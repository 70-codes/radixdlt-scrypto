# This transaction manifest shows how a mintable fungible resource may be minted through the 
# transaction manifest. Most mint operations will typically require you to produce a badge before 
# being allowed to mint a resource. This example is no different. In this example, there is a minter
# badge which we have in our account which allows us to mint this resource

# Note: This manifest does not have a "lock_fee" instruction as this instruction will be added
# automatically by the wallet. If all you intend to do is run this manifest in resim then you can
# add this instruction.

# We have a badge in our account component which allows us to mint this resource. So, we create a 
# proof from this badge which will allow us to mint the resource
CALL_METHOD
    ComponentAddress("{account_component_address}")
    "create_proof_by_amount"
    Decimal("1")
    ResourceAddress("{minter_badge_resource_address}");

# Minting some amount of tokens from the mintable fungible resource
MINT_FUNGIBLE 
    ResourceAddress("{mintable_resource_address}")
    Decimal("{mint_amount}");

# Depositing the entirety of the newly minted tokens into out account
CALL_METHOD
    ComponentAddress("{account_component_address}") 
    "deposit_batch"
    Expression("ENTIRE_WORKTOP");