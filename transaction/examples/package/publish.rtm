# This transaction manifest shows how a package can be published to the ledger

# ==================================================================================================
# WARNING: If you will be submitting this transaction through the Babylon wallet then you MUST
# remove the "lock_fee" instruction that you see below. Otherwise your transaction will fail. If all 
# that you are using is resim then you can safely ignore this warning.
# ==================================================================================================

# Locking 10 XRD in fees from the account component. 
CALL_METHOD 
    Address("${account_address}") 
    "lock_fee"
    Decimal("10");

# Publishing a new package and setting some of its royalty and access rules.
PUBLISH_PACKAGE_ADVANCED
    Blob("${code_blob_hash}") 
    Tuple(
        Map<String, Tuple>()
    )
    Map<String, Tuple>()       # Royalty Configuration
    Map<String, String>()      # Metadata 
    Tuple(                     # Access Rules Config Struct
        Map<Tuple, Array>(),     # Direct Access Method auth Field
        Map<Tuple, Array>(       # Method auth Field
            Tuple(
                Enum("TypedModuleId::ObjectState"),
                "set_royalty_config"
            ),
            Array<String>("owner"),
            Tuple(
                Enum("TypedModuleId::ObjectState"),
                "claim_royalty"
            ),
            Array<String>("owner"),
            Tuple(
                Enum("TypedModuleId::Metadata"),
                "set"
            ),
            Array<String>("owner"),
            Tuple(
                Enum("TypedModuleId::Metadata"),
                "get"
            ),
            Array<String>("public")
        ),
        Map<String, Enum>(),     # Grouped Auth Field
        Map<String, Enum>()     # Group Auth Mutability Field
    );
