name: CI

on: [push, pull_request]

env:
  CARGO_TERM_COLOR: always

jobs:
  sbor-unit-tests:
    name: Run SBOR unit tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
    - uses: actions/checkout@v2
    - name: Run tests
      run: cargo test --verbose
      working-directory: sbor
    - name: Run tests (no_std)
      run: cargo test --verbose --no-default-features --features alloc
      working-directory: sbor
    - name: Run derive tests
      run: cargo test --verbose
      working-directory: sbor-derive
  sbor-integration-tests:
    name: Run SBOR integration tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
    - uses: actions/checkout@v2
    - name: Run tests
      run: cargo test --verbose
      working-directory: sbor-tests
    - name: Run tests (no_std)
      run: cargo test --verbose --no-default-features --features alloc
      working-directory: sbor-tests
    - name: Run bench
      run: cargo bench --verbose
      working-directory: sbor-tests
  scrypto-unit-tests:
    name: Run Scrypto unit tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
    - uses: actions/checkout@v2
    - name: Run tests
      run: cargo test --verbose
      working-directory: scrypto
    - name: Run tests (no_std)
      run: cargo test --verbose --no-default-features --features alloc
      working-directory: scrypto
    - name: Run abi tests
      run: cargo test --verbose
      working-directory: scrypto-abi
    - name: Run derive tests
      run: cargo test --verbose
      working-directory: scrypto-derive
  scrypto-integration-tests:
    name: Run Scrypto integration tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
    - uses: actions/checkout@v2
    - name: Run tests
      run: cargo test --verbose
      working-directory: scrypto-tests
    - name: Run tests (no_std)
      run: cargo test --verbose --no-default-features --features alloc
      working-directory: scrypto-tests
  scrypto-core-examples:
    name: Run Scrypto core examples
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
    - uses: actions/checkout@v2
    - name: Add wasm target
      run: rustup target add wasm32-unknown-unknown
    - name: Add wasm target (nightly)
      run: rustup +nightly target add wasm32-unknown-unknown
    - name: Build account
      run: cargo build --target wasm32-unknown-unknown --release
      working-directory: assets/account
    - name: Build system
      run: cargo build --target wasm32-unknown-unknown --release
      working-directory: assets/system
    - name: Build hello-nft
      run: cargo build --target wasm32-unknown-unknown --release
      working-directory: examples/core/hello-nft
    - name: Run hello-nft test
      run: cargo test --release
      working-directory: examples/core/hello-nft
    - name: Build hello-world
      run: cargo build --target wasm32-unknown-unknown --release
      working-directory: examples/core/hello-world
    - name: Run hello-world test
      run: cargo test --release
      working-directory: examples/core/hello-world
    - name: Build cross-blueprint-call
      run: cargo build --target wasm32-unknown-unknown --release
      working-directory: examples/core/cross-blueprint-call
    - name: Run cross-blueprint-call test
      run: cargo test --release
      working-directory: examples/core/cross-blueprint-call
    - name: Build flat-admin
      run: cargo build --target wasm32-unknown-unknown --release
      working-directory: examples/core/flat-admin
    - name: Run flat-admin test
      run: cargo test --release
      working-directory: examples/core/flat-admin
    - name: Build managed-access
      run: cargo build --target wasm32-unknown-unknown --release
      working-directory: examples/core/managed-access
    - name: Run managed-access test
      run: cargo test --release
      working-directory: examples/core/managed-access
    - name: Build gumball-machine
      run: cargo build --target wasm32-unknown-unknown --release
      working-directory: examples/core/gumball-machine
    - name: Run gumball-machine test
      run: cargo test --release
      working-directory: examples/core/gumball-machine
    - name: Build no-std-lib
      run: cargo build --target wasm32-unknown-unknown --release
      working-directory: examples/core/no-std-lib
  scrypto-defi-examples:
    name: Run Scrypto DeFi examples
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
    - uses: actions/checkout@v2
    - name: Add wasm target
      run: rustup target add wasm32-unknown-unknown
    - name: Run demo
      run: ./demo.sh
      working-directory: examples/defi
    - name: Run auto-lend test
      run: cargo test --release
      working-directory: examples/defi/auto-lend
    - name: Run x-perp-futures test
      run: cargo test --release
      working-directory: examples/defi/x-perp-futures
  scrypto-nft-examples:
    name: Run Scrypto NFT examples
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
    - uses: actions/checkout@v2
    - name: Add wasm target
      run: rustup target add wasm32-unknown-unknown
    - name: Build magic-card
      run: cargo build --target wasm32-unknown-unknown --release
      working-directory: examples/nft/magic-card
    - name: Build magic-card test
      run: cargo test --release
      working-directory: examples/nft/magic-card
    - name: Build sporting-event
      run: cargo build --target wasm32-unknown-unknown --release
      working-directory: examples/nft/sporting-event
    - name: Build sporting-event test
      run: cargo test --release
      working-directory: examples/nft/sporting-event
  radix-engine:
    name: Run Radix Engine tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
    - uses: actions/checkout@v2
    - name: Add wasm target
      run: rustup target add wasm32-unknown-unknown
    - name: Run tests
      run: cargo test --verbose
      working-directory: radix-engine
    - name: Run tests (no_std)
      run: cargo test --verbose --no-default-features --features alloc
      working-directory: radix-engine
    - name: Run bench
      run: cargo bench
      working-directory: radix-engine
  transaction-manifest:
    name: Run transaction manifest tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
    - uses: actions/checkout@v2
    - name: Run tests
      run: cargo test --verbose
      working-directory: transaction-manifest
  simulator-resim:
    name: Run Simulator tests (resim)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
    - uses: actions/checkout@v2
    - name: Add wasm target
      run: rustup target add wasm32-unknown-unknown
    - name: Remove msys64 # Workaround to resolve link error with C:\msys64\mingw64\bin\libclang.dll
      if: runner.os == 'Windows'
      run: Remove-Item -LiteralPath "C:\msys64\" -Force -Recurse
    - name: Install dependencies
      if: runner.os == 'Windows'
      run: choco install llvm -y
    - name: Run tests
      run: bash ./tests/resim.sh
      working-directory: simulator
    - name: Run tests
      run: bash ./tests/manifest.sh
      working-directory: simulator
    - name: Run tests
      run: bash ./tests/scrypto.sh
      working-directory: simulator
