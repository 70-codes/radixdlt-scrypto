[package]
name = "radix-engine"
version = "0.8.0"
edition = "2021"

[dependencies]
sbor = { path = "../sbor", default-features = false }
radix-engine-constants = { path = "../radix-engine-constants" }
radix-engine-interface = { path = "../radix-engine-interface", default-features = false }
native-sdk = { path = "../native-sdk", default-features = false }
transaction = { path = "../transaction", default-features = false }
utils = { path = "../utils", default-features = false }
colored = { version = "2.0.0", default-features = false }
hex = { version = "0.4.3", default-features = false }
bitflags = { version = "1.3" }
lru = { version = "0.8.1", default-features = false, optional = true}
moka = { version = "0.9.4", features = ["sync"], default-features = false, optional = true }
slotmap = "1.0.6"
im = "15.1.0"

# WASM de-/serialization
parity-wasm = { version = "0.42.2" }

# WASM validation
wasmi-validation =  { version = "0.4.1" }

# WASM instrumentation
wasm-instrument = { version = "0.1.0" }

# WASM execution
# - Wasmi is a WASM interpreter that supports WebAssembly MVP
# - Wasmer is a WASM engine with multiple backends: `singlepass` (linear time), `LLVM` and `cranelift`
wasmi = { version = "0.11.0" }
wasmer = { version = "2.2.1", optional = true }
wasmer-compiler-singlepass = { version = "2.2.1", optional = true }

[dev-dependencies]
wabt = { version = "0.10.0" }

[features]
# You should enable either `std` or `alloc`
default = ["std"]
std = ["sbor/std", "native-sdk/std", "wasmi/std", "transaction/std", "radix-engine-interface/std", "utils/std", "moka"]
alloc = ["sbor/alloc", "native-sdk/alloc", "transaction/alloc", "radix-engine-interface/alloc", "utils/alloc", "lru/hashbrown"]

# Use `wasmer` as WASM engine, otherwise `wasmi`
wasmer = ["dep:wasmer", "dep:wasmer-compiler-singlepass"]

# Use moka for caching
moka = ["dep:moka"]
