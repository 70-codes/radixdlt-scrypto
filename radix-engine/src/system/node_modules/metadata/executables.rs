use crate::errors::*;
use crate::kernel::actor::ResolvedActor;
use crate::kernel::call_frame::CallFrameUpdate;
use crate::kernel::interpreters::deref_and_update;
use crate::kernel::kernel_api::{
    ExecutableInvocation, Executor, KernelNodeApi, KernelSubstateApi, LockFlags,
};
use crate::types::*;
use crate::wasm::WasmEngine;
use radix_engine_interface::api::node_modules::metadata::*;
use radix_engine_interface::api::types::{NativeFn, RENodeId, SubstateOffset};
use radix_engine_interface::api::{ClientApi, ClientDerefApi};
use radix_engine_interface::data::ScryptoValue;

pub struct MetadataNativePackage;
impl MetadataNativePackage {
    pub fn invoke_export<Y>(
        export_name: &str,
        receiver: Option<RENodeId>,
        input: ScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        match export_name {
            METADATA_SET_IDENT => {
                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                Self::set(receiver, input, api)
            }
            _ => Err(RuntimeError::InterpreterError(
                InterpreterError::InvalidInvocation,
            )),
        }
    }

    pub(crate) fn set<Y>(
        receiver: RENodeId,
        input: ScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let input: MetadataSetInput = scrypto_decode(&scrypto_encode(&input).unwrap())
            .map_err(|_| RuntimeError::InterpreterError(InterpreterError::InvalidInvocation))?;

        let handle = api.kernel_lock_substate(
            receiver,
            NodeModuleId::Metadata,
            SubstateOffset::Metadata(MetadataOffset::Metadata),
            LockFlags::MUTABLE,
        )?;

        let mut substate = api.kernel_get_substate_ref_mut(handle)?;
        let metadata = substate.metadata();
        metadata.metadata.insert(input.key, input.value);

        Ok(IndexedScryptoValue::from_typed(&()))
    }
}

impl ExecutableInvocation for MetadataGetInvocation {
    type Exec = Self;

    fn resolve<D: ClientDerefApi<RuntimeError>>(
        mut self,
        deref: &mut D,
    ) -> Result<(ResolvedActor, CallFrameUpdate, Self::Exec), RuntimeError> {
        let mut call_frame_update = CallFrameUpdate::empty();

        let resolved_receiver = deref_and_update(
            self.receiver,
            NodeModuleId::Metadata,
            &mut call_frame_update,
            deref,
        )?;

        // TODO: Move this into a more static check once node types implemented
        match &resolved_receiver.receiver.0 {
            RENodeId::Package(..)
            | RENodeId::ResourceManager(..)
            | RENodeId::Component(..)
            | RENodeId::Validator(..)
            | RENodeId::Identity(..) => {}
            _ => {
                return Err(RuntimeError::InterpreterError(
                    InterpreterError::InvalidInvocation,
                ))
            }
        }

        self.receiver = resolved_receiver.receiver.0;
        let actor = ResolvedActor::method(NativeFn::Metadata(MetadataFn::Get), resolved_receiver);

        Ok((actor, call_frame_update, self))
    }
}

impl Executor for MetadataGetInvocation {
    type Output = Option<String>;

    fn execute<Y, W: WasmEngine>(
        self,
        api: &mut Y,
    ) -> Result<(Self::Output, CallFrameUpdate), RuntimeError>
    where
        Y: KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let handle = api.kernel_lock_substate(
            self.receiver,
            NodeModuleId::Metadata,
            SubstateOffset::Metadata(MetadataOffset::Metadata),
            LockFlags::MUTABLE,
        )?;

        let substate_ref = api.kernel_get_substate_ref(handle)?;
        let metadata = substate_ref.metadata();

        let rtn = metadata.metadata.get(&self.key).cloned();

        Ok((rtn, CallFrameUpdate::empty()))
    }
}
