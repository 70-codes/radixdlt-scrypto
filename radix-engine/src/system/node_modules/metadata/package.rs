use crate::system::system_modules::costing::FIXED_LOW_FEE;
use crate::types::*;
use crate::{errors::*, event_schema};
use native_sdk::runtime::Runtime;
use radix_engine_interface::api::field_lock_api::LockFlags;
use radix_engine_interface::api::node_modules::metadata::*;
use radix_engine_interface::api::{ClientApi, CollectionIndex, OBJECT_HANDLE_SELF};
use radix_engine_interface::blueprints::package::PackageDefinition;
use radix_engine_interface::schema::{
    BlueprintCollectionSchema, BlueprintKeyValueStoreSchema, BlueprintSchema, FunctionSchema,
    PackageSchema, TypeRef,
};

use super::{RemoveMetadataEvent, SetMetadataEvent};

#[derive(Debug, Clone, Eq, PartialEq, ScryptoSbor)]
pub enum MetadataPanicError {
    ValueDecodeError(DecodeError),
    InvalidMetadataKey(String),
}

pub const METADATA_COLLECTION: CollectionIndex = 0u8;

pub type MetadataValueSubstate = Option<MetadataValue>;

pub struct MetadataNativePackage;

impl MetadataNativePackage {
    pub fn definition() -> PackageDefinition {
        let mut aggregator = TypeAggregator::<ScryptoCustomTypeKind>::new();

        let mut collections = Vec::new();
        collections.push(BlueprintCollectionSchema::KeyValueStore(
            BlueprintKeyValueStoreSchema {
                key: TypeRef::Blueprint(aggregator.add_child_type_and_descendents::<String>()),
                value: TypeRef::Blueprint(
                    aggregator.add_child_type_and_descendents::<MetadataValue>(),
                ),
                can_own: false,
            },
        ));

        let mut functions = BTreeMap::new();
        functions.insert(
            METADATA_CREATE_IDENT.to_string(),
            FunctionSchema {
                receiver: None,
                input: aggregator.add_child_type_and_descendents::<MetadataCreateInput>(),
                output: aggregator.add_child_type_and_descendents::<MetadataCreateOutput>(),
                export_name: METADATA_CREATE_IDENT.to_string(),
            },
        );
        functions.insert(
            METADATA_CREATE_WITH_DATA_IDENT.to_string(),
            FunctionSchema {
                receiver: None,
                input: aggregator.add_child_type_and_descendents::<MetadataCreateWithDataInput>(),
                output: aggregator.add_child_type_and_descendents::<MetadataCreateWithDataOutput>(),
                export_name: METADATA_CREATE_WITH_DATA_IDENT.to_string(),
            },
        );
        functions.insert(
            METADATA_SET_IDENT.to_string(),
            FunctionSchema {
                receiver: Some(schema::ReceiverInfo::normal_ref_mut()),
                input: aggregator.add_child_type_and_descendents::<MetadataSetInput>(),
                output: aggregator.add_child_type_and_descendents::<MetadataSetOutput>(),
                export_name: METADATA_SET_IDENT.to_string(),
            },
        );
        functions.insert(
            METADATA_GET_IDENT.to_string(),
            FunctionSchema {
                receiver: Some(schema::ReceiverInfo::normal_ref()),
                input: aggregator.add_child_type_and_descendents::<MetadataGetInput>(),
                output: aggregator.add_child_type_and_descendents::<MetadataGetOutput>(),
                export_name: METADATA_GET_IDENT.to_string(),
            },
        );
        functions.insert(
            METADATA_REMOVE_IDENT.to_string(),
            FunctionSchema {
                receiver: Some(schema::ReceiverInfo::normal_ref_mut()),
                input: aggregator.add_child_type_and_descendents::<MetadataRemoveInput>(),
                output: aggregator.add_child_type_and_descendents::<MetadataRemoveOutput>(),
                export_name: METADATA_REMOVE_IDENT.to_string(),
            },
        );

        let event_schema = event_schema! {
            aggregator,
            [SetMetadataEvent, RemoveMetadataEvent]
        };

        let schema = generate_full_schema(aggregator);
        let schema = PackageSchema {
            blueprints: btreemap!(
                METADATA_BLUEPRINT.to_string() => BlueprintSchema {
                    outer_blueprint: None,
                    schema,
                    fields: vec![],
                    collections,
                    functions,
                    virtual_lazy_load_functions: btreemap!(),
                    event_schema,
                    dependencies: btreeset!(),
                    method_auth_template: btreemap!(),
                    outer_method_auth_template: btreemap!(),
                }
            ),
        };

        let function_access_rules = btreemap!(
            METADATA_BLUEPRINT.to_string() => btreemap!(
                METADATA_CREATE_IDENT.to_string() => rule!(allow_all),
                METADATA_CREATE_WITH_DATA_IDENT.to_string() => rule!(allow_all),
            )
        );

        PackageDefinition {
            schema,
            function_access_rules,
            royalty_config: btreemap!(),
        }
    }

    pub fn invoke_export<Y>(
        export_name: &str,
        input: &IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        match export_name {
            METADATA_CREATE_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let _input: MetadataCreateInput = input.as_typed().map_err(|e| {
                    RuntimeError::ApplicationError(ApplicationError::InputDecodeError(e))
                })?;

                let rtn = Self::create(api)?;

                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            METADATA_CREATE_WITH_DATA_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let input: MetadataCreateWithDataInput = input.as_typed().map_err(|e| {
                    RuntimeError::ApplicationError(ApplicationError::InputDecodeError(e))
                })?;

                let rtn = Self::create_with_data(input.data, api)?;

                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            METADATA_SET_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let input: MetadataSetInput = input.as_typed().map_err(|e| {
                    RuntimeError::ApplicationError(ApplicationError::InputDecodeError(e))
                })?;

                let rtn = Self::set(input.key, input.value, api)?;

                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            METADATA_GET_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let input: MetadataGetInput = input.as_typed().map_err(|e| {
                    RuntimeError::ApplicationError(ApplicationError::InputDecodeError(e))
                })?;

                let rtn = Self::get(input.key, api)?;

                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            METADATA_REMOVE_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let input: MetadataRemoveInput = input.as_typed().map_err(|e| {
                    RuntimeError::ApplicationError(ApplicationError::InputDecodeError(e))
                })?;

                let rtn = Self::remove(input.key, api)?;
                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            _ => Err(RuntimeError::ApplicationError(
                ApplicationError::ExportDoesNotExist(export_name.to_string()),
            )),
        }
    }

    pub(crate) fn create<Y>(api: &mut Y) -> Result<Own, RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        let node_id = api.new_object(METADATA_BLUEPRINT, None, vec![], btreemap!())?;

        Ok(Own(node_id))
    }

    pub(crate) fn create_with_data<Y>(
        data: BTreeMap<String, MetadataValue>,
        api: &mut Y,
    ) -> Result<Own, RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        let init_kv_entries = data
            .into_iter()
            .map(|(key, value)| {
                let key = scrypto_encode(&key).unwrap();
                let value = scrypto_encode(&value).unwrap();
                (key, value)
            })
            .collect();

        let node_id = api.new_object(
            METADATA_BLUEPRINT,
            None,
            vec![],
            btreemap!(METADATA_COLLECTION => init_kv_entries),
        )?;

        Ok(Own(node_id))
    }

    pub(crate) fn set<Y>(key: String, value: MetadataValue, api: &mut Y) -> Result<(), RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        let handle = api.actor_lock_key_value_entry(
            OBJECT_HANDLE_SELF,
            0u8,
            &scrypto_encode(&key).unwrap(),
            LockFlags::MUTABLE,
        )?;

        api.key_value_entry_set(handle, scrypto_encode(&value).unwrap())?;
        api.key_value_entry_release(handle)?;

        Runtime::emit_event(api, SetMetadataEvent { key, value })?;

        Ok(())
    }

    pub(crate) fn get<Y>(key: String, api: &mut Y) -> Result<Option<MetadataValue>, RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        let handle = api.actor_lock_key_value_entry(
            OBJECT_HANDLE_SELF,
            0u8,
            &scrypto_encode(&key).unwrap(),
            LockFlags::read_only(),
        )?;

        let data = api.key_value_entry_get(handle)?;
        let substate: Option<MetadataValue> = scrypto_decode(&data).unwrap();

        Ok(substate)
    }

    pub(crate) fn remove<Y>(key: String, api: &mut Y) -> Result<bool, RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        let cur_value: Option<MetadataValue> = api.actor_remove_key_value_entry_typed(
            OBJECT_HANDLE_SELF,
            0u8,
            &scrypto_encode(&key).unwrap(),
        )?;
        let rtn = cur_value.is_some();

        Runtime::emit_event(api, RemoveMetadataEvent { key })?;

        Ok(rtn)
    }
}
