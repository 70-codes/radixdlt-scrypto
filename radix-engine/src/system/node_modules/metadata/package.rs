use crate::errors::*;
use crate::kernel::kernel_api::{KernelNodeApi, KernelSubstateApi};
use crate::system::kernel_modules::costing::FIXED_LOW_FEE;
use crate::types::*;
use radix_engine_interface::api::node_modules::metadata::*;
use radix_engine_interface::api::substate_api::LockFlags;
use radix_engine_interface::api::types::{RENodeId, SubstateOffset};
use radix_engine_interface::api::unsafe_api::ClientCostingReason;
use radix_engine_interface::api::ClientApi;
use radix_engine_interface::blueprints::resource::{AccessRule, FnKey};
use radix_engine_interface::data::ScryptoValue;

use super::SetEntryEvent;

/// A transient resource container.
#[derive(Debug, Clone, PartialEq, Eq, ScryptoSbor)]
pub struct MetadataSubstate {
    pub metadata: BTreeMap<String, String>,
}

impl MetadataSubstate {
    pub fn insert(&mut self, key: String, value: String) {
        self.metadata.insert(key, value);
    }
}


pub struct MetadataNativePackage;
impl MetadataNativePackage {
    pub fn function_access_rules() -> BTreeMap<FnKey, AccessRule> {
        let mut access_rules = BTreeMap::new();
        access_rules.insert(
            FnKey::new(
                METADATA_BLUEPRINT.to_string(),
                METADATA_CREATE_IDENT.to_string(),
            ),
            rule!(allow_all),
        );
        access_rules.insert(
            FnKey::new(
                METADATA_BLUEPRINT.to_string(),
                METADATA_CREATE_WITH_DATA_IDENT.to_string(),
            ),
            rule!(allow_all),
        );
        access_rules
    }

    pub fn invoke_export<Y>(
        export_name: &str,
        receiver: Option<RENodeId>,
        input: ScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        match export_name {
            METADATA_CREATE_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                if receiver.is_some() {
                    return Err(RuntimeError::InterpreterError(
                        InterpreterError::NativeUnexpectedReceiver(export_name.to_string()),
                    ));
                }

                Self::create(input, api)
            }
            METADATA_CREATE_WITH_DATA_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                if receiver.is_some() {
                    return Err(RuntimeError::InterpreterError(
                        InterpreterError::NativeUnexpectedReceiver(export_name.to_string()),
                    ));
                }

                Self::create_with_data(input, api)
            }
            METADATA_SET_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                Self::set(receiver, input, api)
            }
            METADATA_GET_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                Self::get(receiver, input, api)
            }
            METADATA_REMOVE_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                Self::remove(receiver, input, api)
            }
            _ => Err(RuntimeError::InterpreterError(
                InterpreterError::NativeExportDoesNotExist(export_name.to_string()),
            )),
        }
    }

    pub(crate) fn create<Y>(
        input: ScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        let _input: MetadataCreateInput = scrypto_decode(&scrypto_encode(&input).unwrap())
            .map_err(|_| RuntimeError::InterpreterError(InterpreterError::InvalidInvocation))?;

        let substate = MetadataSubstate {
            metadata: BTreeMap::new(),
        };

        let component_id = api.new_object(
            METADATA_BLUEPRINT,
            btreemap!(
                0 => scrypto_encode(&substate).unwrap()
            ),
        )?;

        Ok(IndexedScryptoValue::from_typed(&Own::Object(component_id)))
    }

    pub(crate) fn create_with_data<Y>(
        input: ScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        let input: MetadataCreateWithDataInput =
            scrypto_decode(&scrypto_encode(&input).unwrap())
                .map_err(|_| RuntimeError::InterpreterError(InterpreterError::InvalidInvocation))?;

        let substate = MetadataSubstate {
            metadata: input.data,
        };

        let component_id = api.new_object(
            METADATA_BLUEPRINT,
            btreemap!(
                0 => scrypto_encode(&substate).unwrap()
            ),
        )?;

        Ok(IndexedScryptoValue::from_typed(&Own::Object(component_id)))
    }

    pub(crate) fn set<Y>(
        receiver: RENodeId,
        input: ScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let input: MetadataSetInput = scrypto_decode(&scrypto_encode(&input).unwrap())
            .map_err(|_| RuntimeError::InterpreterError(InterpreterError::InvalidInvocation))?;

        let handle = api.sys_lock_substate(
            receiver,
            SubstateOffset::Metadata(MetadataOffset::Metadata),
            LockFlags::MUTABLE,
        )?;

        let metadata: &mut MetadataSubstate = api.kernel_get_substate_ref_mut(handle)?;
        metadata
            .metadata
            .insert(input.key.clone(), input.value.clone());

        api.emit_event(SetEntryEvent {
            key: input.key,
            value: input.value,
        })?;

        Ok(IndexedScryptoValue::from_typed(&()))
    }

    pub(crate) fn get<Y>(
        receiver: RENodeId,
        input: ScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let input: MetadataGetInput = scrypto_decode(&scrypto_encode(&input).unwrap())
            .map_err(|_| RuntimeError::InterpreterError(InterpreterError::InvalidInvocation))?;

        let handle = api.sys_lock_substate(
            receiver,
            SubstateOffset::Metadata(MetadataOffset::Metadata),
            LockFlags::MUTABLE,
        )?;

        let metadata: &MetadataSubstate = api.kernel_get_substate_ref(handle)?;

        let rtn = metadata.metadata.get(&input.key).cloned();

        Ok(IndexedScryptoValue::from_typed(&rtn))
    }

    pub(crate) fn remove<Y>(
        receiver: RENodeId,
        input: ScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
        where
            Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let input: MetadataRemoveInput = scrypto_decode(&scrypto_encode(&input).unwrap())
            .map_err(|_| RuntimeError::InterpreterError(InterpreterError::InvalidInvocation))?;

        let handle = api.sys_lock_substate(
            receiver,
            SubstateOffset::Metadata(MetadataOffset::Metadata),
            LockFlags::MUTABLE,
        )?;

        let metadata: &mut MetadataSubstate = api.kernel_get_substate_ref_mut(handle)?;

        let rtn = metadata.metadata.remove(&input.key);

        Ok(IndexedScryptoValue::from_typed(&rtn.is_some()))
    }
}
