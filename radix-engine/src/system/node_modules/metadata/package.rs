use crate::system::system_modules::costing::FIXED_LOW_FEE;
use crate::types::*;
use crate::{errors::*, event_schema};
use native_sdk::runtime::Runtime;
use radix_engine_interface::api::field_lock_api::LockFlags;
use radix_engine_interface::api::node_modules::metadata::*;
use radix_engine_interface::api::ClientApi;
use radix_engine_interface::blueprints::resource::{AccessRule, FnKey};
use radix_engine_interface::schema::{
    BlueprintKeyValueStoreSchema, BlueprintSchema, FunctionSchema, PackageSchema, TypeSchema,
};

use super::{RemoveMetadataEvent, SetMetadataEvent};

#[derive(Debug, Clone, Eq, PartialEq, ScryptoSbor)]
pub enum MetadataPanicError {
    ValueDecodeError(DecodeError),
    InvalidMetadataKey(String),
}

pub type MetadataValueSubstate = Option<MetadataEntry>;

pub struct MetadataNativePackage;

impl MetadataNativePackage {
    pub fn schema() -> PackageSchema {
        let mut aggregator = TypeAggregator::<ScryptoCustomTypeKind>::new();

        let mut key_value_stores = Vec::new();
        key_value_stores.push(BlueprintKeyValueStoreSchema {
            key: TypeSchema::Blueprint(aggregator.add_child_type_and_descendents::<String>()),
            value: TypeSchema::Blueprint(
                aggregator.add_child_type_and_descendents::<MetadataEntry>(),
            ),
            can_own: false,
        });

        let mut functions = BTreeMap::new();
        functions.insert(
            METADATA_CREATE_IDENT.to_string(),
            FunctionSchema {
                receiver: None,
                input: aggregator.add_child_type_and_descendents::<MetadataCreateInput>(),
                output: aggregator.add_child_type_and_descendents::<MetadataCreateOutput>(),
                export_name: METADATA_CREATE_IDENT.to_string(),
            },
        );
        functions.insert(
            METADATA_CREATE_WITH_DATA_IDENT.to_string(),
            FunctionSchema {
                receiver: None,
                input: aggregator.add_child_type_and_descendents::<MetadataCreateWithDataInput>(),
                output: aggregator.add_child_type_and_descendents::<MetadataCreateWithDataOutput>(),
                export_name: METADATA_CREATE_WITH_DATA_IDENT.to_string(),
            },
        );
        functions.insert(
            METADATA_SET_IDENT.to_string(),
            FunctionSchema {
                receiver: Some(schema::Receiver::SelfRefMut),
                input: aggregator.add_child_type_and_descendents::<MetadataSetInput>(),
                output: aggregator.add_child_type_and_descendents::<MetadataSetOutput>(),
                export_name: METADATA_SET_IDENT.to_string(),
            },
        );
        functions.insert(
            METADATA_GET_IDENT.to_string(),
            FunctionSchema {
                receiver: Some(schema::Receiver::SelfRef),
                input: aggregator.add_child_type_and_descendents::<MetadataGetInput>(),
                output: aggregator.add_child_type_and_descendents::<MetadataGetOutput>(),
                export_name: METADATA_GET_IDENT.to_string(),
            },
        );
        functions.insert(
            METADATA_REMOVE_IDENT.to_string(),
            FunctionSchema {
                receiver: Some(schema::Receiver::SelfRef),
                input: aggregator.add_child_type_and_descendents::<MetadataRemoveInput>(),
                output: aggregator.add_child_type_and_descendents::<MetadataRemoveOutput>(),
                export_name: METADATA_REMOVE_IDENT.to_string(),
            },
        );

        let event_schema = event_schema! {
            aggregator,
            [SetMetadataEvent, RemoveMetadataEvent]
        };

        let schema = generate_full_schema(aggregator);
        PackageSchema {
            blueprints: btreemap!(
                METADATA_BLUEPRINT.to_string() => BlueprintSchema {
                    outer_blueprint: None,
                    schema,
                    substates: vec![],
                    key_value_stores,
                    functions,
                    virtual_lazy_load_functions: btreemap!(),
                    event_schema,
                }
            ),
        }
    }

    pub fn function_access_rules() -> BTreeMap<FnKey, AccessRule> {
        let mut access_rules = BTreeMap::new();
        access_rules.insert(
            FnKey::new(
                METADATA_BLUEPRINT.to_string(),
                METADATA_CREATE_IDENT.to_string(),
            ),
            rule!(allow_all),
        );
        access_rules.insert(
            FnKey::new(
                METADATA_BLUEPRINT.to_string(),
                METADATA_CREATE_WITH_DATA_IDENT.to_string(),
            ),
            rule!(allow_all),
        );
        access_rules
    }

    pub fn invoke_export<Y>(
        export_name: &str,
        receiver: Option<&NodeId>,
        input: &IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        match export_name {
            METADATA_CREATE_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                if receiver.is_some() {
                    return Err(RuntimeError::SystemUpstreamError(
                        SystemUpstreamError::NativeUnexpectedReceiver(export_name.to_string()),
                    ));
                }

                let _input: MetadataCreateInput = input.as_typed().map_err(|e| {
                    RuntimeError::SystemUpstreamError(SystemUpstreamError::InputDecodeError(e))
                })?;

                let rtn = Self::create(api)?;

                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            METADATA_CREATE_WITH_DATA_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                if receiver.is_some() {
                    return Err(RuntimeError::SystemUpstreamError(
                        SystemUpstreamError::NativeUnexpectedReceiver(export_name.to_string()),
                    ));
                }

                let input: MetadataCreateWithDataInput = input.as_typed().map_err(|e| {
                    RuntimeError::SystemUpstreamError(SystemUpstreamError::InputDecodeError(e))
                })?;

                let rtn = Self::create_with_data(input.data, api)?;

                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            METADATA_SET_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let input: MetadataSetInput = input.as_typed().map_err(|e| {
                    RuntimeError::SystemUpstreamError(SystemUpstreamError::InputDecodeError(e))
                })?;

                let rtn = Self::set(input.key, input.value, api)?;

                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            METADATA_GET_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let input: MetadataGetInput = input.as_typed().map_err(|e| {
                    RuntimeError::SystemUpstreamError(SystemUpstreamError::InputDecodeError(e))
                })?;

                let rtn = Self::get(input.key, api)?;

                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            METADATA_REMOVE_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let input: MetadataRemoveInput = input.as_typed().map_err(|e| {
                    RuntimeError::SystemUpstreamError(SystemUpstreamError::InputDecodeError(e))
                })?;

                let rtn = Self::remove(input.key, api)?;
                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            _ => Err(RuntimeError::SystemUpstreamError(
                SystemUpstreamError::NativeExportDoesNotExist(export_name.to_string()),
            )),
        }
    }

    pub(crate) fn create<Y>(api: &mut Y) -> Result<Own, RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        let node_id = api.new_object(METADATA_BLUEPRINT, None, vec![], vec![vec![]])?;

        Ok(Own(node_id))
    }

    pub(crate) fn create_with_data<Y>(
        data: BTreeMap<String, String>,
        api: &mut Y,
    ) -> Result<Own, RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        let init_kv_entries = data
            .into_iter()
            .map(|(key, value)| {
                let key = scrypto_encode(&key).unwrap();
                let value =
                    scrypto_encode(&MetadataEntry::Value(MetadataValue::String(value))).unwrap();
                (key, value)
            })
            .collect();

        let node_id = api.new_object(METADATA_BLUEPRINT, None, vec![], vec![init_kv_entries])?;

        Ok(Own(node_id))
    }

    pub(crate) fn set<Y>(key: String, value: ScryptoValue, api: &mut Y) -> Result<(), RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        // Schema check
        // TODO: Remove this encode/decode mess
        let metadata: MetadataEntry =
            scrypto_decode(&scrypto_encode(&value).unwrap()).map_err(|e| {
                RuntimeError::ApplicationError(ApplicationError::MetadataError(
                    MetadataPanicError::ValueDecodeError(e),
                ))
            })?;

        let handle =
            api.actor_lock_key_value_entry(&scrypto_encode(&key).unwrap(), LockFlags::MUTABLE)?;

        api.key_value_entry_set(handle, scrypto_encode(&metadata).unwrap())?;
        api.key_value_entry_release(handle)?;

        // FIXME: We skip emitting an event for unattached metadata objects for now
        // FIXME: until we fix the NodeId disappearing for unattached object
        if api.actor_get_info().unwrap().global {
            Runtime::emit_event(
                api,
                SetMetadataEvent {
                    key,
                    value: metadata,
                },
            )?;
        }

        Ok(())
    }

    pub(crate) fn get<Y>(key: String, api: &mut Y) -> Result<Option<MetadataEntry>, RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        let handle =
            api.actor_lock_key_value_entry(&scrypto_encode(&key).unwrap(), LockFlags::read_only())?;

        let data = api.key_value_entry_get(handle)?;
        let substate: Option<MetadataEntry> = scrypto_decode(&data).unwrap();

        Ok(substate)
    }

    pub(crate) fn remove<Y>(key: String, api: &mut Y) -> Result<bool, RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        let cur_value: Option<MetadataEntry> =
            api.actor_remove_key_value_entry_typed(&scrypto_encode(&key).unwrap())?;
        let rtn = cur_value.is_some();

        Runtime::emit_event(api, RemoveMetadataEvent { key })?;

        Ok(rtn)
    }
}
