use crate::errors::*;
use crate::kernel::kernel_api::{KernelNodeApi, KernelSubstateApi};
use crate::system::kernel_modules::costing::FIXED_LOW_FEE;
use crate::system::node_modules::metadata::MetadataSubstate;
use crate::types::*;
use native_sdk::runtime::Runtime;
use radix_engine_interface::api::node_modules::metadata::*;
use radix_engine_interface::api::substate_api::LockFlags;
use radix_engine_interface::api::types::{RENodeId, SubstateOffset};
use radix_engine_interface::api::unsafe_api::ClientCostingReason;
use radix_engine_interface::api::ClientApi;
use radix_engine_interface::blueprints::resource::{AccessRule, FnKey};
use radix_engine_interface::schema::{BlueprintSchema, FunctionSchema, PackageSchema};

use super::SetEntryEvent;

pub struct MetadataNativePackage;

impl MetadataNativePackage {
    pub fn schema() -> PackageSchema {
        let mut aggregator = TypeAggregator::<ScryptoCustomTypeKind>::new();

        let mut substates = Vec::new();
        substates.push(aggregator.add_child_type_and_descendents::<MetadataSubstate>());

        let mut functions = BTreeMap::new();
        functions.insert(
            METADATA_CREATE_IDENT.to_string(),
            FunctionSchema {
                receiver: None,
                input: aggregator.add_child_type_and_descendents::<MetadataCreateInput>(),
                output: aggregator.add_child_type_and_descendents::<MetadataCreateOutput>(),
                export_name: METADATA_CREATE_IDENT.to_string(),
            },
        );
        functions.insert(
            METADATA_CREATE_WITH_DATA_IDENT.to_string(),
            FunctionSchema {
                receiver: None,
                input: aggregator.add_child_type_and_descendents::<MetadataCreateWithDataInput>(),
                output: aggregator.add_child_type_and_descendents::<MetadataCreateWithDataOutput>(),
                export_name: METADATA_CREATE_WITH_DATA_IDENT.to_string(),
            },
        );
        functions.insert(
            METADATA_SET_IDENT.to_string(),
            FunctionSchema {
                receiver: Some(schema::Receiver::SelfRefMut),
                input: aggregator.add_child_type_and_descendents::<MetadataSetInput>(),
                output: aggregator.add_child_type_and_descendents::<MetadataSetOutput>(),
                export_name: METADATA_SET_IDENT.to_string(),
            },
        );
        functions.insert(
            METADATA_GET_IDENT.to_string(),
            FunctionSchema {
                receiver: Some(schema::Receiver::SelfRef),
                input: aggregator.add_child_type_and_descendents::<MetadataGetInput>(),
                output: aggregator.add_child_type_and_descendents::<MetadataGetOutput>(),
                export_name: METADATA_GET_IDENT.to_string(),
            },
        );

        let schema = generate_full_schema(aggregator);
        PackageSchema {
            blueprints: btreemap!(
                METADATA_BLUEPRINT.to_string() => BlueprintSchema {
                    schema,
                    substates,
                    functions
                }
            ),
        }
    }

    pub fn function_access_rules() -> BTreeMap<FnKey, AccessRule> {
        let mut access_rules = BTreeMap::new();
        access_rules.insert(
            FnKey::new(
                METADATA_BLUEPRINT.to_string(),
                METADATA_CREATE_IDENT.to_string(),
            ),
            rule!(allow_all),
        );
        access_rules.insert(
            FnKey::new(
                METADATA_BLUEPRINT.to_string(),
                METADATA_CREATE_WITH_DATA_IDENT.to_string(),
            ),
            rule!(allow_all),
        );
        access_rules
    }

    pub fn invoke_export<Y>(
        export_name: &str,
        receiver: Option<RENodeId>,
        input: IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        match export_name {
            METADATA_CREATE_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                if receiver.is_some() {
                    return Err(RuntimeError::InterpreterError(
                        InterpreterError::NativeUnexpectedReceiver(export_name.to_string()),
                    ));
                }

                Self::create(input, api)
            }
            METADATA_CREATE_WITH_DATA_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                if receiver.is_some() {
                    return Err(RuntimeError::InterpreterError(
                        InterpreterError::NativeUnexpectedReceiver(export_name.to_string()),
                    ));
                }

                Self::create_with_data(input, api)
            }
            METADATA_SET_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                Self::set(receiver, input, api)
            }
            METADATA_GET_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                Self::get(receiver, input, api)
            }
            _ => Err(RuntimeError::InterpreterError(
                InterpreterError::NativeExportDoesNotExist(export_name.to_string()),
            )),
        }
    }

    pub(crate) fn create<Y>(
        input: IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        let _input: MetadataCreateInput = input.as_typed().map_err(|e| {
            RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
        })?;

        let substate = MetadataSubstate {
            metadata: BTreeMap::new(),
        };

        let component_id =
            api.new_object(METADATA_BLUEPRINT, vec![scrypto_encode(&substate).unwrap()])?;

        Ok(IndexedScryptoValue::from_typed(&Own::Object(component_id)))
    }

    pub(crate) fn create_with_data<Y>(
        input: IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        let input: MetadataCreateWithDataInput = input.as_typed().map_err(|e| {
            RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
        })?;

        let substate = MetadataSubstate {
            metadata: input.data,
        };

        let component_id =
            api.new_object(METADATA_BLUEPRINT, vec![scrypto_encode(&substate).unwrap()])?;

        Ok(IndexedScryptoValue::from_typed(&Own::Object(component_id)))
    }

    pub(crate) fn set<Y>(
        receiver: RENodeId,
        input: IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let input: MetadataSetInput = input.as_typed().map_err(|e| {
            RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
        })?;

        let handle = api.sys_lock_substate(
            receiver,
            SubstateOffset::Metadata(MetadataOffset::Metadata),
            LockFlags::MUTABLE,
        )?;

        let metadata: &mut MetadataSubstate = api.kernel_get_substate_ref_mut(handle)?;
        metadata
            .metadata
            .insert(input.key.clone(), input.value.clone());

        Runtime::emit_event(
            api,
            SetEntryEvent {
                key: input.key,
                value: input.value,
            },
        )?;

        Ok(IndexedScryptoValue::from_typed(&()))
    }

    pub(crate) fn get<Y>(
        receiver: RENodeId,
        input: IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let input: MetadataGetInput = input.as_typed().map_err(|e| {
            RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
        })?;

        let handle = api.sys_lock_substate(
            receiver,
            SubstateOffset::Metadata(MetadataOffset::Metadata),
            LockFlags::MUTABLE,
        )?;

        let metadata: &MetadataSubstate = api.kernel_get_substate_ref(handle)?;

        let rtn = metadata.metadata.get(&input.key).cloned();

        Ok(IndexedScryptoValue::from_typed(&rtn))
    }
}
