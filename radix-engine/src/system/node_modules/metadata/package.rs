use crate::errors::*;
use crate::kernel::kernel_api::{KernelNodeApi, KernelSubstateApi};
use crate::system::kernel_modules::costing::FIXED_LOW_FEE;
use crate::types::*;
use native_sdk::runtime::Runtime;
use radix_engine_interface::api::component::KeyValueStoreEntrySubstate;
use radix_engine_interface::api::node_modules::metadata::*;
use radix_engine_interface::api::substate_api::LockFlags;
use radix_engine_interface::api::types::{RENodeId, SubstateOffset};
use radix_engine_interface::api::unsafe_api::ClientCostingReason;
use radix_engine_interface::api::ClientApi;
use radix_engine_interface::blueprints::resource::{AccessRule, FnKey};

use super::SetMetadataEvent;

#[derive(
Debug, Clone, Eq, PartialEq, ScryptoSbor,
)]
pub enum MetadataPanicError {
    UnknownValueType,
    TypeDoesNotMatchSchema,
}

pub struct MetadataNativePackage;
impl MetadataNativePackage {
    pub fn function_access_rules() -> BTreeMap<FnKey, AccessRule> {
        let mut access_rules = BTreeMap::new();
        access_rules.insert(
            FnKey::new(
                METADATA_BLUEPRINT.to_string(),
                METADATA_CREATE_IDENT.to_string(),
            ),
            rule!(allow_all),
        );
        access_rules.insert(
            FnKey::new(
                METADATA_BLUEPRINT.to_string(),
                METADATA_CREATE_WITH_DATA_IDENT.to_string(),
            ),
            rule!(allow_all),
        );
        access_rules
    }

    pub fn invoke_export<Y>(
        export_name: &str,
        receiver: Option<RENodeId>,
        input: ScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        match export_name {
            METADATA_CREATE_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                if receiver.is_some() {
                    return Err(RuntimeError::InterpreterError(
                        InterpreterError::NativeUnexpectedReceiver(export_name.to_string()),
                    ));
                }

                let _input: MetadataCreateInput = scrypto_decode(&scrypto_encode(&input).unwrap())
                    .map_err(|e| {
                        RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
                    })?;

                let rtn = Self::create(api)?;

                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            METADATA_CREATE_WITH_DATA_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                if receiver.is_some() {
                    return Err(RuntimeError::InterpreterError(
                        InterpreterError::NativeUnexpectedReceiver(export_name.to_string()),
                    ));
                }

                let input: MetadataCreateWithDataInput =
                    scrypto_decode(&scrypto_encode(&input).unwrap()).map_err(|e| {
                        RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
                    })?;

                let rtn = Self::create_with_data(input.data, api)?;

                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            METADATA_SET_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                let input: MetadataSet = scrypto_decode(&scrypto_encode(&input).unwrap())
                    .map_err(|e| {
                        RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
                    })?;

                let rtn = Self::set(receiver, input.key, input.value, api)?;

                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            METADATA_GET_STRING_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                let input: MetadataGetStringInput = scrypto_decode(&scrypto_encode(&input).unwrap())
                    .map_err(|e| {
                        RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
                    })?;

                let rtn = Self::get_string(receiver, input.key, api)?;

                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            METADATA_REMOVE_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                let input: MetadataRemoveInput = scrypto_decode(&scrypto_encode(&input).unwrap())
                    .map_err(|e| {
                    RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
                })?;

                let rtn = Self::remove(receiver, input.key, api)?;
                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            _ => Err(RuntimeError::InterpreterError(
                InterpreterError::NativeExportDoesNotExist(export_name.to_string()),
            )),
        }
    }

    pub(crate) fn create<Y>(api: &mut Y) -> Result<Own, RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        let object_id = api.new_object(METADATA_BLUEPRINT, vec![])?;

        Ok(Own::Object(object_id))
    }

    pub(crate) fn create_with_data<Y>(
        data: BTreeMap<String, String>,
        api: &mut Y,
    ) -> Result<Own, RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        let object_id = api.new_object(METADATA_BLUEPRINT, vec![])?;

        for (key, value) in data {
            Self::set(RENodeId::Object(object_id), key, MetadataValue::string(value), api)?;
        }

        Ok(Own::Object(object_id))
    }

    pub(crate) fn set<Y>(
        receiver: RENodeId,
        key: String,
        value: MetadataValue,
        api: &mut Y,
    ) -> Result<(), RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        // Schema check
        match value.type_id {
            METADATA_STRING_TYPE => {
                match value.value {
                    ScryptoValue::String { .. } => {} ,
                    _ => return Err(RuntimeError::ApplicationError(ApplicationError::MetadataError(MetadataPanicError::TypeDoesNotMatchSchema))),
                }
            }
            _ => return Err(RuntimeError::ApplicationError(ApplicationError::MetadataError(MetadataPanicError::UnknownValueType)))
        }

        let handle = api.sys_lock_substate(
            receiver,
            SubstateOffset::KeyValueStore(KeyValueStoreOffset::Entry(
                scrypto_encode(&key).unwrap(),
            )),
            LockFlags::MUTABLE,
        )?;

        // TODO: Remove this encode/decode mess
        let scrypto_value: ScryptoValue = scrypto_decode(&scrypto_encode(&value).unwrap()).unwrap();
        let substate = KeyValueStoreEntrySubstate::Some(
            ScryptoValue::String { value: key.clone() },
            scrypto_value,
        );
        api.sys_write_substate(handle, scrypto_encode(&substate).unwrap())?;
        api.sys_drop_lock(handle)?;

        Runtime::emit_event(api, SetMetadataEvent { key, value })?;

        Ok(())
    }

    pub(crate) fn get_string<Y>(
        receiver: RENodeId,
        key: String,
        api: &mut Y,
    ) -> Result<Result<String, MetadataError>, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let handle = api.sys_lock_substate(
            receiver,
            SubstateOffset::KeyValueStore(KeyValueStoreOffset::Entry(
                scrypto_encode(&key).unwrap(),
            )),
            LockFlags::read_only(),
        )?;

        let data = api.sys_read_substate(handle)?;
        let substate: KeyValueStoreEntrySubstate = scrypto_decode(&data).unwrap();

        let rtn = match substate {
            KeyValueStoreEntrySubstate::Some(.., value) => {
                // TODO: Remove this encode/decode mess
                let metadata_value: MetadataValue = scrypto_decode(&scrypto_encode(&value).unwrap()).unwrap();
                metadata_value.to_string()
            },
            KeyValueStoreEntrySubstate::None => Err(MetadataError::EmptyEntry),
        };

        Ok(rtn)
    }

    pub(crate) fn remove<Y>(
        receiver: RENodeId,
        key: String,
        api: &mut Y,
    ) -> Result<bool, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let handle = api.sys_lock_substate(
            receiver,
            SubstateOffset::KeyValueStore(KeyValueStoreOffset::Entry(
                scrypto_encode(&key).unwrap(),
            )),
            LockFlags::MUTABLE,
        )?;

        let data = api.sys_read_substate(handle)?;
        let substate: KeyValueStoreEntrySubstate = scrypto_decode(&data).unwrap();

        let rtn = match substate {
            KeyValueStoreEntrySubstate::Some(..) => true,
            KeyValueStoreEntrySubstate::None => false,
        };

        api.sys_write_substate(
            handle,
            scrypto_encode(&KeyValueStoreEntrySubstate::None).unwrap(),
        )?;
        api.sys_drop_lock(handle)?;

        Ok(rtn)
    }
}
