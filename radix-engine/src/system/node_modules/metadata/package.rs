use crate::system::system::KeyValueEntrySubstate;
use crate::types::*;
use crate::{errors::*, event_schema, roles_template};
use native_sdk::runtime::Runtime;
use radix_engine_interface::api::field_api::LockFlags;
use radix_engine_interface::api::node_modules::metadata::*;
use radix_engine_interface::api::{
    ClientApi, CollectionIndex, FieldValue, GenericArgs, KVEntry, OBJECT_HANDLE_SELF,
};
use radix_engine_interface::blueprints::package::{
    AuthConfig, BlueprintDefinitionInit, BlueprintType, FunctionAuth, MethodAuthTemplate,
    PackageDefinition,
};
use radix_engine_interface::schema::{
    BlueprintCollectionSchema, BlueprintFunctionsSchemaInit, BlueprintSchemaInit,
    BlueprintStateSchemaInit, FunctionSchemaInit, TypeRef,
};

use super::{RemoveMetadataEvent, SetMetadataEvent};

#[derive(Debug, Clone, Eq, PartialEq, ScryptoSbor)]
pub enum MetadataError {
    KeyStringExceedsMaxLength { max: usize, actual: usize },
    ValueSborExceedsMaxLength { max: usize, actual: usize },
    ValueDecodeError(DecodeError),
    MetadataValidationError(MetadataValidationError),
    NotFound,
}

pub const METADATA_COLLECTION: CollectionIndex = 0u8;

pub type MetadataEntrySubstate = KeyValueEntrySubstate<MetadataValue>;

pub struct MetadataNativePackage;

impl MetadataNativePackage {
    pub fn definition() -> PackageDefinition {
        let mut aggregator = TypeAggregator::<ScryptoCustomTypeKind>::new();

        let mut collections = Vec::new();
        collections.push(BlueprintCollectionSchema::KeyValueStore(
            BlueprintKeyValueSchema {
                key: TypeRef::Static(aggregator.add_child_type_and_descendents::<String>()),
                value: TypeRef::Static(
                    aggregator.add_child_type_and_descendents::<MetadataValue>(),
                ),
                allow_ownership: false,
            },
        ));

        let mut functions = BTreeMap::new();
        functions.insert(
            METADATA_CREATE_IDENT.to_string(),
            FunctionSchemaInit {
                receiver: None,
                input: TypeRef::Static(
                    aggregator.add_child_type_and_descendents::<MetadataCreateInput>(),
                ),
                output: TypeRef::Static(
                    aggregator.add_child_type_and_descendents::<MetadataCreateOutput>(),
                ),
                export: METADATA_CREATE_IDENT.to_string(),
            },
        );
        functions.insert(
            METADATA_CREATE_WITH_DATA_IDENT.to_string(),
            FunctionSchemaInit {
                receiver: None,
                input: TypeRef::Static(
                    aggregator.add_child_type_and_descendents::<MetadataCreateWithDataInput>(),
                ),
                output: TypeRef::Static(
                    aggregator.add_child_type_and_descendents::<MetadataCreateWithDataOutput>(),
                ),
                export: METADATA_CREATE_WITH_DATA_IDENT.to_string(),
            },
        );
        functions.insert(
            METADATA_SET_IDENT.to_string(),
            FunctionSchemaInit {
                receiver: Some(ReceiverInfo::normal_ref_mut()),
                input: TypeRef::Static(
                    aggregator.add_child_type_and_descendents::<MetadataSetInput>(),
                ),
                output: TypeRef::Static(
                    aggregator.add_child_type_and_descendents::<MetadataSetOutput>(),
                ),
                export: METADATA_SET_IDENT.to_string(),
            },
        );
        functions.insert(
            METADATA_LOCK_IDENT.to_string(),
            FunctionSchemaInit {
                receiver: Some(ReceiverInfo::normal_ref_mut()),
                input: TypeRef::Static(
                    aggregator.add_child_type_and_descendents::<MetadataLockInput>(),
                ),
                output: TypeRef::Static(
                    aggregator.add_child_type_and_descendents::<MetadataLockOutput>(),
                ),
                export: METADATA_LOCK_IDENT.to_string(),
            },
        );
        functions.insert(
            METADATA_GET_IDENT.to_string(),
            FunctionSchemaInit {
                receiver: Some(ReceiverInfo::normal_ref()),
                input: TypeRef::Static(
                    aggregator.add_child_type_and_descendents::<MetadataGetInput>(),
                ),
                output: TypeRef::Static(
                    aggregator.add_child_type_and_descendents::<MetadataGetOutput>(),
                ),
                export: METADATA_GET_IDENT.to_string(),
            },
        );
        functions.insert(
            METADATA_REMOVE_IDENT.to_string(),
            FunctionSchemaInit {
                receiver: Some(ReceiverInfo::normal_ref_mut()),
                input: TypeRef::Static(
                    aggregator.add_child_type_and_descendents::<MetadataRemoveInput>(),
                ),
                output: TypeRef::Static(
                    aggregator.add_child_type_and_descendents::<MetadataRemoveOutput>(),
                ),
                export: METADATA_REMOVE_IDENT.to_string(),
            },
        );

        let events = event_schema! {
            aggregator,
            [SetMetadataEvent, RemoveMetadataEvent]
        };

        let schema = generate_full_schema(aggregator);
        let blueprints = btreemap!(
            METADATA_BLUEPRINT.to_string() => BlueprintDefinitionInit {
                blueprint_type: BlueprintType::default(),
                is_transient: true,
                feature_set: btreeset!(),
                dependencies: btreeset!(),

                schema: BlueprintSchemaInit {
                    generics: vec![],
                    schema,
                    state: BlueprintStateSchemaInit {
                        fields: vec![],
                        collections,
                    },
                    events,
                    functions: BlueprintFunctionsSchemaInit {
                        functions,
                    },
                    hooks: BlueprintHooksInit::default(),
                },

                royalty_config: PackageRoyaltyConfig::default(),
                auth_config: AuthConfig {
                    function_auth: FunctionAuth::AllowAll,
                    method_auth: MethodAuthTemplate::StaticRoleDefinition(
                        roles_template!(
                            roles {
                                METADATA_SETTER_ROLE => updaters: [METADATA_SETTER_UPDATER_ROLE];
                                METADATA_SETTER_UPDATER_ROLE => updaters: [METADATA_SETTER_UPDATER_ROLE];
                                METADATA_LOCKER_ROLE => updaters: [METADATA_LOCKER_UPDATER_ROLE];
                                METADATA_LOCKER_UPDATER_ROLE => updaters: [METADATA_LOCKER_UPDATER_ROLE];
                            },
                            methods {
                                METADATA_SET_IDENT => [METADATA_SETTER_ROLE];
                                METADATA_REMOVE_IDENT => [METADATA_SETTER_ROLE];
                                METADATA_LOCK_IDENT => [METADATA_LOCKER_ROLE];
                                METADATA_GET_IDENT => MethodAccessibility::Public;
                            }
                        ),
                    ),
                },
            }
        );

        PackageDefinition { blueprints }
    }

    pub fn invoke_export<Y>(
        export_name: &str,
        input: &IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        match export_name {
            METADATA_CREATE_IDENT => {
                let _input: MetadataCreateInput = input.as_typed().map_err(|e| {
                    RuntimeError::ApplicationError(ApplicationError::InputDecodeError(e))
                })?;

                let rtn = Self::create(api)?;

                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            METADATA_CREATE_WITH_DATA_IDENT => {
                let input: MetadataCreateWithDataInput = input.as_typed().map_err(|e| {
                    RuntimeError::ApplicationError(ApplicationError::InputDecodeError(e))
                })?;

                let rtn = Self::create_with_data(input.data, api)?;

                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            METADATA_SET_IDENT => {
                let input: MetadataSetInput = input.as_typed().map_err(|e| {
                    RuntimeError::ApplicationError(ApplicationError::InputDecodeError(e))
                })?;

                let rtn = Self::set(input.key, input.value, api)?;

                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            METADATA_LOCK_IDENT => {
                let input: MetadataLockInput = input.as_typed().map_err(|e| {
                    RuntimeError::ApplicationError(ApplicationError::InputDecodeError(e))
                })?;

                let rtn = Self::lock(input.key, api)?;

                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            METADATA_GET_IDENT => {
                let input: MetadataGetInput = input.as_typed().map_err(|e| {
                    RuntimeError::ApplicationError(ApplicationError::InputDecodeError(e))
                })?;

                let rtn = Self::get(input.key, api)?;

                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            METADATA_REMOVE_IDENT => {
                let input: MetadataRemoveInput = input.as_typed().map_err(|e| {
                    RuntimeError::ApplicationError(ApplicationError::InputDecodeError(e))
                })?;

                let rtn = Self::remove(input.key, api)?;
                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            _ => Err(RuntimeError::ApplicationError(
                ApplicationError::ExportDoesNotExist(export_name.to_string()),
            )),
        }
    }

    pub(crate) fn create<Y>(api: &mut Y) -> Result<Own, RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        let node_id = api.new_object(
            METADATA_BLUEPRINT,
            vec![],
            GenericArgs::default(),
            vec![],
            btreemap!(),
        )?;

        Ok(Own(node_id))
    }

    pub fn init_system_struct(
        data: MetadataInit,
    ) -> Result<
        (
            Vec<Option<FieldValue>>,
            BTreeMap<u8, BTreeMap<Vec<u8>, KVEntry>>,
        ),
        MetadataError,
    > {
        let mut init_kv_entries = BTreeMap::new();
        for (key, entry) in data.data {
            if key.len() > MAX_METADATA_KEY_STRING_LEN {
                return Err(MetadataError::KeyStringExceedsMaxLength {
                    max: MAX_METADATA_KEY_STRING_LEN,
                    actual: key.len(),
                });
            }

            let key = scrypto_encode(&key).unwrap();

            let value = match entry.value {
                Some(metadata_value) => {
                    let value = scrypto_encode(&metadata_value).unwrap();
                    if value.len() > MAX_METADATA_VALUE_SBOR_LEN {
                        return Err(MetadataError::ValueSborExceedsMaxLength {
                            max: MAX_METADATA_VALUE_SBOR_LEN,
                            actual: value.len(),
                        });
                    }
                    Some(value)
                }
                None => None,
            };

            let kv_entry = KVEntry {
                value,
                locked: entry.lock,
            };

            init_kv_entries.insert(key, kv_entry);
        }

        Ok((vec![], btreemap!(METADATA_COLLECTION => init_kv_entries)))
    }

    pub(crate) fn create_with_data<Y>(
        mut metadata_init: MetadataInit,
        api: &mut Y,
    ) -> Result<Own, RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        for value in metadata_init.data.values_mut() {
            if let Some(v) = value.value.take() {
                let v = validate_metadata_value(v).map_err(|e| {
                    RuntimeError::ApplicationError(ApplicationError::MetadataError(
                        MetadataError::MetadataValidationError(e),
                    ))
                })?;
                let _ = value.value.insert(v);
            }
        }

        let (fields, kv_entries) = Self::init_system_struct(metadata_init)
            .map_err(|e| RuntimeError::ApplicationError(ApplicationError::MetadataError(e)))?;

        let node_id = api.new_object(
            METADATA_BLUEPRINT,
            vec![],
            GenericArgs::default(),
            fields
                .into_iter()
                .map(|f| match f {
                    Some(f) => f,
                    None => FieldValue::new(()),
                })
                .collect(),
            kv_entries,
        )?;

        Ok(Own(node_id))
    }

    pub(crate) fn set<Y>(key: String, value: MetadataValue, api: &mut Y) -> Result<(), RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        let value = validate_metadata_value(value).map_err(|e| {
            RuntimeError::ApplicationError(ApplicationError::MetadataError(
                MetadataError::MetadataValidationError(e),
            ))
        })?;

        if key.len() > MAX_METADATA_KEY_STRING_LEN {
            return Err(RuntimeError::ApplicationError(
                ApplicationError::MetadataError(MetadataError::KeyStringExceedsMaxLength {
                    max: MAX_METADATA_KEY_STRING_LEN,
                    actual: key.len(),
                }),
            ));
        }

        let sbor_value = scrypto_encode(&value).unwrap();
        if sbor_value.len() > MAX_METADATA_VALUE_SBOR_LEN {
            return Err(RuntimeError::ApplicationError(
                ApplicationError::MetadataError(MetadataError::ValueSborExceedsMaxLength {
                    max: MAX_METADATA_VALUE_SBOR_LEN,
                    actual: sbor_value.len(),
                }),
            ));
        }

        let handle = api.actor_open_key_value_entry(
            OBJECT_HANDLE_SELF,
            0u8,
            &scrypto_encode(&key).unwrap(),
            LockFlags::MUTABLE,
        )?;
        api.key_value_entry_set(handle, sbor_value)?;
        api.key_value_entry_close(handle)?;

        Runtime::emit_event(api, SetMetadataEvent { key, value })?;

        Ok(())
    }

    pub(crate) fn lock<Y>(key: String, api: &mut Y) -> Result<(), RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        let handle = api.actor_open_key_value_entry(
            OBJECT_HANDLE_SELF,
            0u8,
            &scrypto_encode(&key).unwrap(),
            LockFlags::MUTABLE,
        )?;
        api.key_value_entry_lock(handle)?;
        api.key_value_entry_close(handle)?;

        Ok(())
    }

    pub(crate) fn get<Y>(key: String, api: &mut Y) -> Result<Option<MetadataValue>, RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        let handle = api.actor_open_key_value_entry(
            OBJECT_HANDLE_SELF,
            0u8,
            &scrypto_encode(&key).unwrap(),
            LockFlags::read_only(),
        )?;

        let data = api.key_value_entry_get(handle)?;
        let substate: Option<MetadataValue> = scrypto_decode(&data).unwrap();

        Ok(substate)
    }

    pub(crate) fn remove<Y>(key: String, api: &mut Y) -> Result<bool, RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        let cur_value: Option<MetadataValue> = api.actor_remove_key_value_entry_typed(
            OBJECT_HANDLE_SELF,
            0u8,
            &scrypto_encode(&key).unwrap(),
        )?;
        let rtn = cur_value.is_some();

        Runtime::emit_event(api, RemoveMetadataEvent { key })?;

        Ok(rtn)
    }
}

#[derive(Debug, Clone, PartialEq, Eq, ScryptoSbor)]
pub enum MetadataValidationError {
    URLValidationError(URLValidationError),
}

impl From<URLValidationError> for MetadataValidationError {
    fn from(value: URLValidationError) -> Self {
        Self::URLValidationError(value)
    }
}

pub fn validate_metadata_value(
    value: MetadataValue,
) -> Result<MetadataValue, MetadataValidationError> {
    match value {
        MetadataValue::String(x) => Ok(MetadataValue::String(x)),
        MetadataValue::Bool(x) => Ok(MetadataValue::Bool(x)),
        MetadataValue::U8(x) => Ok(MetadataValue::U8(x)),
        MetadataValue::U32(x) => Ok(MetadataValue::U32(x)),
        MetadataValue::U64(x) => Ok(MetadataValue::U64(x)),
        MetadataValue::I32(x) => Ok(MetadataValue::I32(x)),
        MetadataValue::I64(x) => Ok(MetadataValue::I64(x)),
        MetadataValue::Decimal(x) => Ok(MetadataValue::Decimal(x)),
        MetadataValue::GlobalAddress(x) => Ok(MetadataValue::GlobalAddress(x)),
        MetadataValue::PublicKey(x) => Ok(MetadataValue::PublicKey(x)),
        MetadataValue::NonFungibleGlobalId(x) => Ok(MetadataValue::NonFungibleGlobalId(x)),
        MetadataValue::NonFungibleLocalId(x) => Ok(MetadataValue::NonFungibleLocalId(x)),
        MetadataValue::Instant(x) => Ok(MetadataValue::Instant(x)),
        MetadataValue::Url(url) => Ok(MetadataValue::Url(
            validate_url(url.0.as_str()).map(|x| Url(x))?,
        )),
        MetadataValue::Origin(_) => todo!(),
        MetadataValue::PublicKeyHash(x) => Ok(MetadataValue::PublicKeyHash(x)),
        MetadataValue::StringArray(x) => Ok(MetadataValue::StringArray(x)),
        MetadataValue::BoolArray(x) => Ok(MetadataValue::BoolArray(x)),
        MetadataValue::U8Array(x) => Ok(MetadataValue::U8Array(x)),
        MetadataValue::U32Array(x) => Ok(MetadataValue::U32Array(x)),
        MetadataValue::U64Array(x) => Ok(MetadataValue::U64Array(x)),
        MetadataValue::I32Array(x) => Ok(MetadataValue::I32Array(x)),
        MetadataValue::I64Array(x) => Ok(MetadataValue::I64Array(x)),
        MetadataValue::DecimalArray(x) => Ok(MetadataValue::DecimalArray(x)),
        MetadataValue::GlobalAddressArray(x) => Ok(MetadataValue::GlobalAddressArray(x)),
        MetadataValue::PublicKeyArray(x) => Ok(MetadataValue::PublicKeyArray(x)),
        MetadataValue::NonFungibleGlobalIdArray(x) => {
            Ok(MetadataValue::NonFungibleGlobalIdArray(x))
        }
        MetadataValue::NonFungibleLocalIdArray(x) => Ok(MetadataValue::NonFungibleLocalIdArray(x)),
        MetadataValue::InstantArray(x) => Ok(MetadataValue::InstantArray(x)),
        MetadataValue::UrlArray(x) => Ok(MetadataValue::UrlArray(
            x.into_iter()
                .map(|x| {
                    validate_url(x.0.as_str())
                        .map(|x| Url(x))
                        .map_err(|x| MetadataValidationError::URLValidationError(x))
                })
                .collect::<Result<Vec<Url>, MetadataValidationError>>()?,
        )),
        MetadataValue::OriginArray(_) => todo!(),
        MetadataValue::PublicKeyHashArray(x) => Ok(MetadataValue::PublicKeyHashArray(x)),
    }
}

#[derive(Debug, Clone, PartialEq, Eq, ScryptoSbor)]
pub enum URLValidationError {
    InvalidUrl(String),
    NotAllowedSchema(String),
    UsernameTooLong { max: usize, actual: usize },
    PasswordTooLong { max: usize, actual: usize },
    MissingHost,
    DomainTooLong { max: usize, actual: usize },
    PathTooLong { max: usize, actual: usize },
    QueryTooLong { max: usize, actual: usize },
    FragmentTooLong { max: usize, actual: usize },
}

/// Validates a URL with Radix limits and returns the canonical representation.
pub fn validate_url(url: &str) -> Result<String, URLValidationError> {
    let url = url::Url::parse(url).map_err(|_| URLValidationError::InvalidUrl(url.to_string()))?;

    // Restrict schema
    let schema = url.scheme(); // lower-cased
    if schema.ne("http") && schema.ne("https") {
        return Err(URLValidationError::NotAllowedSchema(schema.to_string()));
    }

    // Restrict user name
    let user_name = url.username(); // percent-encoded ASCII string
    if user_name.len() > URL_MAX_USERNAME_LEN {
        return Err(URLValidationError::UsernameTooLong {
            max: URL_MAX_USERNAME_LEN,
            actual: user_name.len(),
        });
    }

    // Restrict password
    let password = url.password(); // percent-encoded ASCII string
    if let Some(password) = password {
        if password.len() > URL_MAX_PASSWORD_LEN {
            return Err(URLValidationError::PasswordTooLong {
                max: URL_MAX_PASSWORD_LEN,
                actual: password.len(),
            });
        }
    }

    // Check host and port
    let host = url.host(); // Non-ASCII domain labels are punycode-encoded per IDNA
    if let Some(host) = host {
        match host {
            url::Host::Domain(domain) => {
                if domain.len() > URL_MAX_DOMAIN_LEN {
                    return Err(URLValidationError::DomainTooLong {
                        max: URL_MAX_DOMAIN_LEN,
                        actual: domain.len(),
                    });
                }
            }
            url::Host::Ipv4(_) => {}
            url::Host::Ipv6(_) => {}
        }
    }
    let _port = url.port();

    // Check path
    let path = url.path(); // percent-encoded ASCII string.
    if path.len() > URL_MAX_PATH_LEN {
        return Err(URLValidationError::PathTooLong {
            max: URL_MAX_PATH_LEN,
            actual: path.len(),
        });
    }

    // Check query
    let query = url.query(); // percent-encoded ASCII string.
    if let Some(query) = query {
        if query.len() > URL_MAX_QUERY_LEN {
            return Err(URLValidationError::QueryTooLong {
                max: URL_MAX_QUERY_LEN,
                actual: query.len(),
            });
        }
    }

    // Check fragment
    let fragment = url.fragment(); // percent-encoded ASCII string.
    if let Some(fragment) = fragment {
        if fragment.len() > URL_MAX_FRAGMENT_LEN {
            return Err(URLValidationError::FragmentTooLong {
                max: URL_MAX_FRAGMENT_LEN,
                actual: fragment.len(),
            });
        }
    }

    Ok(url.into())
}

#[cfg(test)]
mod tests {
    use super::*;

    #[macro_export]
    macro_rules! assert_validate_success {
        ( $input: expr, $expected: expr) => {{
            assert_eq!(validate_url($input), Ok($expected.to_owned()));
            assert_eq!(validate_url($expected), Ok($expected.to_owned()));
        }};
    }

    #[macro_export]
    macro_rules! assert_validate_failure {
        ( $input: expr, $expected: expr) => {{
            assert_eq!(validate_url($input), Err($expected));
        }};
    }

    #[test]
    fn test_validate_url() {
        assert_validate_success!(
            "Https://user中name:pass文word@Example.测试.com/abc/💖?key=老虎#fragment%65",
            "https://user%E4%B8%ADname:pass%E6%96%87word@example.xn--0zwm56d.com/abc/%F0%9F%92%96?key=%E8%80%81%E8%99%8E#fragment%65"
        );
        assert_validate_failure!(
            "httpexample.com",
            URLValidationError::InvalidUrl("httpexample.com".to_string())
        );
        assert_validate_failure!(
            "ftp://google.com",
            URLValidationError::NotAllowedSchema("ftp".to_string())
        );
        assert_validate_failure!(
            format!(
                "http://{}:password@example.com/path?query#fragment",
                "x".repeat(URL_MAX_USERNAME_LEN + 1)
            )
            .as_str(),
            URLValidationError::UsernameTooLong {
                max: URL_MAX_USERNAME_LEN,
                actual: URL_MAX_USERNAME_LEN + 1
            }
        );
        assert_validate_failure!(
            format!(
                "http://username:{}@example.com/path?query#fragment",
                "x".repeat(URL_MAX_PASSWORD_LEN + 1)
            )
            .as_str(),
            URLValidationError::PasswordTooLong {
                max: URL_MAX_PASSWORD_LEN,
                actual: URL_MAX_PASSWORD_LEN + 1
            }
        );
        assert_validate_failure!(
            format!(
                "http://username:password@{}/path?query#fragment",
                "x".repeat(URL_MAX_DOMAIN_LEN + 1)
            )
            .as_str(),
            URLValidationError::DomainTooLong {
                max: URL_MAX_DOMAIN_LEN,
                actual: URL_MAX_DOMAIN_LEN + 1
            }
        );
        assert_validate_failure!(
            format!(
                "http://username:password@example.com/{}?query#fragment",
                "x".repeat(URL_MAX_PATH_LEN) // path includes the leading `/`
            )
            .as_str(),
            URLValidationError::PathTooLong {
                max: URL_MAX_PATH_LEN,
                actual: URL_MAX_PATH_LEN + 1
            }
        );
        assert_validate_failure!(
            format!(
                "http://username:password@example.com/path?{}#fragment",
                "x".repeat(URL_MAX_QUERY_LEN + 1)
            )
            .as_str(),
            URLValidationError::QueryTooLong {
                max: URL_MAX_QUERY_LEN,
                actual: URL_MAX_QUERY_LEN + 1
            }
        );
        assert_validate_failure!(
            format!(
                "http://username:password@example.com/path?query#{}",
                "x".repeat(URL_MAX_FRAGMENT_LEN + 1)
            )
            .as_str(),
            URLValidationError::FragmentTooLong {
                max: URL_MAX_FRAGMENT_LEN,
                actual: URL_MAX_FRAGMENT_LEN + 1
            }
        );
    }
}
