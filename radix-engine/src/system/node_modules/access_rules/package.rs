use crate::kernel::kernel_api::{KernelModuleApi, KernelNodeApi, KernelSubstateApi};
use crate::system::kernel_modules::auth::{convert_contextless, MethodAuthorization};
use crate::system::kernel_modules::costing::FIXED_LOW_FEE;
use crate::types::*;
use crate::{errors::*, event_schema};
use native_sdk::runtime::Runtime;
use radix_engine_interface::api::node_modules::auth::*;
use radix_engine_interface::api::node_modules::metadata::METADATA_GET_IDENT;
use radix_engine_interface::api::substate_api::LockFlags;
use radix_engine_interface::api::types::ClientCostingReason;
use radix_engine_interface::api::types::{RENodeId, SubstateOffset};
use radix_engine_interface::api::ClientApi;
use radix_engine_interface::blueprints::resource::*;
use radix_engine_interface::schema::{BlueprintSchema, FunctionSchema, PackageSchema};

use super::{SetMutabilityEvent, SetRuleEvent};

#[derive(Debug, Clone, Eq, PartialEq, ScryptoSbor)]
pub enum AccessRulesChainError {
    BlueprintFunctionNotFound(String),
    ProtectedMethod(MethodKey),
}

/// A transient resource container.
#[derive(Debug, Clone, PartialEq, Eq, ScryptoSbor)]
pub struct FunctionAccessRulesSubstate {
    pub access_rules: BTreeMap<FnKey, AccessRule>,
    pub default_auth: AccessRule,
}

/// A transient resource container.
#[derive(Debug, Clone, PartialEq, Eq, ScryptoSbor)]
pub struct MethodAccessRulesSubstate {
    pub access_rules: AccessRulesConfig,
    pub child_blueprint_rules: BTreeMap<String, AccessRulesConfig>,
}

impl MethodAccessRulesSubstate {
    pub fn method_mutability_authorization(&self, object_key: &ObjectKey, key: &MethodKey) -> MethodAuthorization {
        let method_auth = match object_key {
            ObjectKey::SELF => self.access_rules.get_mutability(key),
            ObjectKey::ChildBlueprint(blueprint_name) => {
                if let Some(config) = self.child_blueprint_rules.get(blueprint_name) {
                    config.get_mutability(key)
                } else {
                    AccessRule::DenyAll
                }
            },
        };

        // TODO: Remove
        convert_contextless(&method_auth)
    }

    pub fn group_mutability_authorization(&self, name: &str) -> MethodAuthorization {
        let group_auth = self.access_rules.get_group_mutability(name);
        // TODO: Remove
        convert_contextless(&group_auth)
    }
}

pub struct AccessRulesNativePackage;

impl AccessRulesNativePackage {
    pub fn schema() -> PackageSchema {
        let mut aggregator = TypeAggregator::<ScryptoCustomTypeKind>::new();

        let mut substates = Vec::new();
        substates.push(aggregator.add_child_type_and_descendents::<MethodAccessRulesSubstate>());

        let mut functions = BTreeMap::new();
        functions.insert(
            ACCESS_RULES_CREATE_IDENT.to_string(),
            FunctionSchema {
                receiver: None,
                input: aggregator.add_child_type_and_descendents::<AccessRulesCreateInput>(),
                output: aggregator.add_child_type_and_descendents::<AccessRulesCreateOutput>(),
                export_name: ACCESS_RULES_CREATE_IDENT.to_string(),
            },
        );
        functions.insert(
            ACCESS_RULES_SET_METHOD_ACCESS_RULE_AND_MUTABILITY_IDENT.to_string(),
            FunctionSchema {
                receiver: Some(schema::Receiver::SelfRefMut),
                input: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetMethodAccessRuleAndMutabilityInput>(),
                output: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetMethodAccessRuleAndMutabilityOutput>(),
                export_name: ACCESS_RULES_SET_METHOD_ACCESS_RULE_AND_MUTABILITY_IDENT.to_string(),
            },
        );
        functions.insert(
            ACCESS_RULES_SET_METHOD_ACCESS_RULE_IDENT.to_string(),
            FunctionSchema {
                receiver: Some(schema::Receiver::SelfRefMut),
                input: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetMethodAccessRuleInput>(),
                output: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetMethodAccessRuleOutput>(),
                export_name: ACCESS_RULES_SET_METHOD_ACCESS_RULE_IDENT.to_string(),
            },
        );
        functions.insert(
            ACCESS_RULES_SET_METHOD_MUTABILITY_IDENT.to_string(),
            FunctionSchema {
                receiver: Some(schema::Receiver::SelfRefMut),
                input: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetMethodMutabilityInput>(),
                output: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetMethodMutabilityOutput>(),
                export_name: ACCESS_RULES_SET_METHOD_MUTABILITY_IDENT.to_string(),
            },
        );
        functions.insert(
            ACCESS_RULES_SET_GROUP_ACCESS_RULE_AND_MUTABILITY_IDENT.to_string(),
            FunctionSchema {
                receiver: Some(schema::Receiver::SelfRefMut),
                input: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetGroupAccessRuleAndMutabilityInput>(),
                output: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetGroupAccessRuleAndMutabilityOutput>(),
                export_name: ACCESS_RULES_SET_GROUP_ACCESS_RULE_AND_MUTABILITY_IDENT.to_string(),
            },
        );
        functions.insert(
            ACCESS_RULES_SET_GROUP_ACCESS_RULE_IDENT.to_string(),
            FunctionSchema {
                receiver: Some(schema::Receiver::SelfRefMut),
                input: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetGroupAccessRuleInput>(),
                output: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetGroupAccessRuleOutput>(),
                export_name: ACCESS_RULES_SET_GROUP_ACCESS_RULE_IDENT.to_string(),
            },
        );
        functions.insert(
            ACCESS_RULES_SET_GROUP_MUTABILITY_IDENT.to_string(),
            FunctionSchema {
                receiver: Some(schema::Receiver::SelfRefMut),
                input: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetGroupMutabilityInput>(),
                output: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetGroupMutabilityOutput>(),
                export_name: ACCESS_RULES_SET_GROUP_MUTABILITY_IDENT.to_string(),
            },
        );

        functions.insert(
            ACCESS_RULES_SET_CHILD_BLUEPRINT_METHOD_ACCESS_RULE_AND_MUTABILITY_IDENT.to_string(),
            FunctionSchema {
                receiver: Some(schema::Receiver::SelfRefMut),
                input: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetChildBlueprintMethodAccessRuleAndMutabilityInput>(),
                output: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetChildBlueprintMethodAccessRuleAndMutabilityOutput>(),
                export_name: ACCESS_RULES_SET_CHILD_BLUEPRINT_METHOD_ACCESS_RULE_AND_MUTABILITY_IDENT.to_string(),
            },
        );
        functions.insert(
            ACCESS_RULES_SET_CHILD_BLUEPRINT_METHOD_ACCESS_RULE_IDENT.to_string(),
            FunctionSchema {
                receiver: Some(schema::Receiver::SelfRefMut),
                input: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetChildBlueprintMethodAccessRuleInput>(),
                output: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetChildBlueprintMethodAccessRuleOutput>(),
                export_name: ACCESS_RULES_SET_CHILD_BLUEPRINT_METHOD_ACCESS_RULE_IDENT.to_string(),
            },
        );
        functions.insert(
            ACCESS_RULES_SET_CHILD_BLUEPRINT_METHOD_MUTABILITY_IDENT.to_string(),
            FunctionSchema {
                receiver: Some(schema::Receiver::SelfRefMut),
                input: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetChildBlueprintMethodMutabilityInput>(),
                output: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetChildBlueprintMethodMutabilityOutput>(),
                export_name: ACCESS_RULES_SET_CHILD_BLUEPRINT_METHOD_MUTABILITY_IDENT.to_string(),
            },
        );

        let event_schema = event_schema! {
            aggregator,
            [
                SetRuleEvent,
                SetMutabilityEvent
            ]
        };

        let schema = generate_full_schema(aggregator);
        PackageSchema {
            blueprints: btreemap!(
                ACCESS_RULES_BLUEPRINT.to_string() => BlueprintSchema {
                    schema,
                    substates,
                    functions,
                    virtual_lazy_load_functions: btreemap!(),
                    event_schema
                }
            ),
        }
    }

    pub fn authorization<Y: KernelModuleApi<RuntimeError>>(
        node_id: &RENodeId,
        module_id: &NodeModuleId,
        ident: &str,
        input: &IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<MethodAuthorization, RuntimeError> {
        let authorization = match ident {
            ACCESS_RULES_SET_METHOD_ACCESS_RULE_AND_MUTABILITY_IDENT => {
                let input: AccessRulesSetMethodAccessRuleAndMutabilityInput =
                    input.as_typed().map_err(|e| {
                        RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
                    })?;

                Self::method_mutability_authorization(
                    node_id, *module_id, ObjectKey::SELF, input.method_key, api,
                )?
            }
            ACCESS_RULES_SET_METHOD_ACCESS_RULE_IDENT => {
                let input: AccessRulesSetMethodAccessRuleInput = input.as_typed().map_err(|e| {
                    RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
                })?;

                Self::method_mutability_authorization(
                    node_id, *module_id, ObjectKey::SELF, input.key, api,
                )?
            }
            ACCESS_RULES_SET_METHOD_MUTABILITY_IDENT => {
                let input: AccessRulesSetMethodMutabilityInput = input.as_typed().map_err(|e| {
                    RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
                })?;
                Self::method_mutability_authorization(
                    node_id, *module_id, ObjectKey::SELF, input.key, api,
                )?
            }
            ACCESS_RULES_SET_GROUP_ACCESS_RULE_AND_MUTABILITY_IDENT => {
                AccessRulesNativePackage::get_authorization_for_set_group_access_rule_and_mutability(
                    node_id, *module_id, input, api,
                )?
            }
            ACCESS_RULES_SET_GROUP_ACCESS_RULE_IDENT => {
                AccessRulesNativePackage::get_authorization_for_set_group_access_rule(
                    node_id, *module_id, input, api,
                )?
            }
            ACCESS_RULES_SET_GROUP_MUTABILITY_IDENT => {
                AccessRulesNativePackage::get_authorization_for_set_group_mutability(
                    node_id, *module_id, input, api,
                )?
            }
            ACCESS_RULES_SET_CHILD_BLUEPRINT_METHOD_ACCESS_RULE_AND_MUTABILITY_IDENT => {
                let input: AccessRulesSetChildBlueprintMethodAccessRuleAndMutabilityInput =
                    input.as_typed().map_err(|e| {
                        RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
                    })?;

                AccessRulesNativePackage::method_mutability_authorization(
                    node_id, *module_id, ObjectKey::ChildBlueprint(input.blueprint_name), input.method_key, api,
                )?
            }
            ACCESS_RULES_SET_CHILD_BLUEPRINT_METHOD_ACCESS_RULE_IDENT => {
                let input: AccessRulesSetChildBlueprintMethodAccessRuleInput = input.as_typed().map_err(|e| {
                    RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
                })?;

                Self::method_mutability_authorization(
                    node_id, *module_id, ObjectKey::ChildBlueprint(input.blueprint_name), input.key, api,
                )?
            }
            ACCESS_RULES_SET_CHILD_BLUEPRINT_METHOD_MUTABILITY_IDENT => {
                let input: AccessRulesSetChildBlueprintMethodMutabilityInput = input.as_typed().map_err(|e| {
                    RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
                })?;

                Self::method_mutability_authorization(
                    node_id, *module_id, ObjectKey::ChildBlueprint(input.blueprint_name), input.key, api,
                )?
            }
            _ => MethodAuthorization::AllowAll,
        };

        Ok(authorization)
    }

    pub fn function_access_rules() -> BTreeMap<FnKey, AccessRule> {
        let mut access_rules = BTreeMap::new();
        access_rules.insert(
            FnKey::new(
                ACCESS_RULES_BLUEPRINT.to_string(),
                ACCESS_RULES_CREATE_IDENT.to_string(),
            ),
            rule!(allow_all),
        );
        access_rules
    }

    pub fn invoke_export<Y>(
        export_name: &str,
        receiver: Option<&RENodeId>,
        input: &IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        match export_name {
            ACCESS_RULES_CREATE_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                if receiver.is_some() {
                    return Err(RuntimeError::InterpreterError(
                        InterpreterError::NativeUnexpectedReceiver(export_name.to_string()),
                    ));
                }

                Self::create(input, api)
            }
            ACCESS_RULES_SET_METHOD_ACCESS_RULE_AND_MUTABILITY_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                let input: AccessRulesSetMethodAccessRuleAndMutabilityInput =
                    input.as_typed().map_err(|e| {
                        RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
                    })?;
                let rtn = Self::set_method_access_rule_and_mutability(receiver, input.method_key, input.rule, input.mutability, api)?;
                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            ACCESS_RULES_SET_CHILD_BLUEPRINT_METHOD_ACCESS_RULE_AND_MUTABILITY_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                let input: AccessRulesSetChildBlueprintMethodAccessRuleAndMutabilityInput =
                    input.as_typed().map_err(|e| {
                        RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
                    })?;
                let rtn = Self::set_child_blueprint_method_access_rule_and_mutability(receiver, input.blueprint_name, input.method_key, input.rule, input.mutability, api)?;
                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            ACCESS_RULES_SET_METHOD_ACCESS_RULE_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                Self::set_method_access_rule(receiver, input, api)
            }
            ACCESS_RULES_SET_METHOD_MUTABILITY_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                Self::set_method_mutability(receiver, input, api)
            }
            ACCESS_RULES_SET_GROUP_ACCESS_RULE_AND_MUTABILITY_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                Self::set_group_access_rule_and_mutability(receiver, input, api)
            }
            ACCESS_RULES_SET_GROUP_ACCESS_RULE_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                Self::set_group_access_rule(receiver, input, api)
            }
            ACCESS_RULES_SET_GROUP_MUTABILITY_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                Self::set_group_mutability(receiver, input, api)
            }
            _ => Err(RuntimeError::InterpreterError(
                InterpreterError::NativeExportDoesNotExist(export_name.to_string()),
            )),
        }
    }

    fn group_mutability_authorization<Y>(
        receiver: &RENodeId,
        module_id: NodeModuleId,
        name: &str,
        api: &mut Y,
    ) -> Result<MethodAuthorization, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi,
    {
        let handle = api.kernel_lock_substate(
            receiver,
            module_id,
            SubstateOffset::AccessRules(AccessRulesOffset::AccessRules),
            LockFlags::read_only(),
        )?;

        let authorization = {
            let access_rules_substate: &MethodAccessRulesSubstate =
                api.kernel_get_substate_ref(handle)?;
            access_rules_substate.group_mutability_authorization(name)
        };

        api.kernel_drop_lock(handle)?;

        Ok(authorization)
    }

    pub fn method_mutability_authorization<Y>(
        receiver: &RENodeId,
        module_id: NodeModuleId,
        object_key: ObjectKey,
        method_key: MethodKey,
        api: &mut Y,
    ) -> Result<MethodAuthorization, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi,
    {
        let authorization = if method_key.node_module_id.eq(&NodeModuleId::AccessRules)
            || method_key.node_module_id.eq(&NodeModuleId::AccessRules1)
        {
            // Should we just store this on ledger?
            MethodAuthorization::DenyAll
        } else {
            let handle = api.kernel_lock_substate(
                receiver,
                module_id,
                SubstateOffset::AccessRules(AccessRulesOffset::AccessRules),
                LockFlags::read_only(),
            )?;

            let authorization = {
                let access_rules_substate: &MethodAccessRulesSubstate =
                    api.kernel_get_substate_ref(handle)?;
                access_rules_substate.method_mutability_authorization(&object_key, &method_key)
            };

            api.kernel_drop_lock(handle)?;

            authorization
        };

        Ok(authorization)
    }

    pub(crate) fn create<Y>(
        input: &IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let input: AccessRulesCreateInput = input.as_typed().map_err(|e| {
            RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
        })?;

        // Set default access rules for Metadata Get
        let mut access_rules = input.access_rules;
        access_rules.set_method_access_rule_and_mutability(
            MethodKey::new(NodeModuleId::Metadata, METADATA_GET_IDENT),
            AccessRule::AllowAll,
            AccessRule::DenyAll,
        );

        let substate = MethodAccessRulesSubstate {
            access_rules,
            child_blueprint_rules: BTreeMap::new(),
        };

        let component_id = api.new_object(
            ACCESS_RULES_BLUEPRINT,
            vec![scrypto_encode(&substate).unwrap()],
        )?;

        Ok(IndexedScryptoValue::from_typed(&Own::Object(component_id)))
    }

    pub(crate) fn set_method_access_rule<Y>(
        receiver: &RENodeId,
        input: &IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let input: AccessRulesSetMethodAccessRuleInput = input.as_typed().map_err(|e| {
            RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
        })?;

        let handle = api.sys_lock_substate(
            receiver.clone(),
            SubstateOffset::AccessRules(AccessRulesOffset::AccessRules),
            LockFlags::MUTABLE,
        )?;

        let access_rules_substate: &mut MethodAccessRulesSubstate =
            api.kernel_get_substate_ref_mut(handle)?;
        let access_rules = &mut access_rules_substate.access_rules;
        access_rules.set_method_access_rule(input.key.clone(), input.rule.clone());

        Runtime::emit_event(
            api,
            SetRuleEvent::Method {
                key: input.key,
                rule: input.rule,
            },
        )?;

        Ok(IndexedScryptoValue::from_typed(&()))
    }

    pub(crate) fn set_method_mutability<Y>(
        receiver: &RENodeId,
        input: &IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let input: AccessRulesSetMethodMutabilityInput = input.as_typed().map_err(|e| {
            RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
        })?;

        let handle = api.sys_lock_substate(
            *receiver,
            SubstateOffset::AccessRules(AccessRulesOffset::AccessRules),
            LockFlags::MUTABLE,
        )?;

        let access_rules_substate: &mut MethodAccessRulesSubstate =
            api.kernel_get_substate_ref_mut(handle)?;
        let access_rules = &mut access_rules_substate.access_rules;
        access_rules.set_mutability(input.key.clone(), input.mutability.clone());

        Runtime::emit_event(
            api,
            SetMutabilityEvent::Method {
                key: input.key,
                mutability: input.mutability,
            },
        )?;

        Ok(IndexedScryptoValue::from_typed(&()))
    }

    fn set_method_access_rule_and_mutability_internal<Y>(
        receiver: &RENodeId,
        object_key: ObjectKey,
        method_key: MethodKey,
        rule: AccessRuleEntry,
        mutability: AccessRuleEntry,
        api: &mut Y,
    ) -> Result<(), RuntimeError>
        where
            Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let handle = api.sys_lock_substate(
            *receiver,
            SubstateOffset::AccessRules(AccessRulesOffset::AccessRules),
            LockFlags::MUTABLE,
        )?;


        let access_rules_substate: &mut MethodAccessRulesSubstate =
            api.kernel_get_substate_ref_mut(handle)?;

        let access_rules = match object_key {
            ObjectKey::SELF => {
                &mut access_rules_substate.access_rules
            }
            ObjectKey::ChildBlueprint(blueprint_name) => {
                access_rules_substate.child_blueprint_rules.get_mut(&blueprint_name).unwrap()
            }
        };
        access_rules.set_method_access_rule(method_key.clone(), rule.clone());
        access_rules.set_mutability(method_key.clone(), mutability.clone());

        Runtime::emit_event(
            api,
            SetRuleEvent::Method {
                key: method_key.clone(),
                rule: rule.into(),
            },
        )?;
        Runtime::emit_event(
            api,
            SetMutabilityEvent::Method {
                key: method_key,
                mutability: mutability,
            },
        )?;

        Ok(())
    }

    pub(crate) fn set_method_access_rule_and_mutability<Y>(
        receiver: &RENodeId,
        method_key: MethodKey,
        rule: AccessRuleEntry,
        mutability: AccessRuleEntry,
        api: &mut Y,
    ) -> Result<(), RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        Self::set_method_access_rule_and_mutability_internal(
            receiver,
            ObjectKey::SELF,
            method_key,
            rule,
            mutability,
            api,
        )
    }

    pub(crate) fn set_child_blueprint_method_access_rule_and_mutability<Y>(
        receiver: &RENodeId,
        blueprint_name: String,
        method_key: MethodKey,
        rule: AccessRuleEntry,
        mutability: AccessRuleEntry,
        api: &mut Y,
    ) -> Result<(), RuntimeError>
        where
            Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        Self::set_method_access_rule_and_mutability_internal(
            receiver,
            ObjectKey::ChildBlueprint(blueprint_name),
            method_key,
            rule,
            mutability,
            api,
        )
    }

    pub(crate) fn get_authorization_for_set_group_access_rule<Y>(
        receiver: &RENodeId,
        module_id: NodeModuleId,
        input: &IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<MethodAuthorization, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi,
    {
        let input: AccessRulesSetGroupAccessRuleInput = input.as_typed().map_err(|e| {
            RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
        })?;

        Self::group_mutability_authorization(receiver, module_id, input.name.as_str(), api)
    }

    pub(crate) fn set_group_access_rule<Y>(
        receiver: &RENodeId,
        input: &IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let input: AccessRulesSetGroupAccessRuleInput = input.as_typed().map_err(|e| {
            RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
        })?;

        let handle = api.sys_lock_substate(
            receiver.clone(),
            SubstateOffset::AccessRules(AccessRulesOffset::AccessRules),
            LockFlags::MUTABLE,
        )?;

        let access_rules_substate: &mut MethodAccessRulesSubstate =
            api.kernel_get_substate_ref_mut(handle)?;
        let access_rules = &mut access_rules_substate.access_rules;

        access_rules.set_group_access_rule(input.name.clone(), input.rule.clone());

        Runtime::emit_event(
            api,
            SetRuleEvent::Group {
                name: input.name,
                rule: input.rule,
            },
        )?;

        Ok(IndexedScryptoValue::from_typed(&()))
    }

    pub(crate) fn get_authorization_for_set_group_mutability<Y>(
        receiver: &RENodeId,
        module_id: NodeModuleId,
        input: &IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<MethodAuthorization, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi,
    {
        let input: AccessRulesSetGroupMutabilityInput = input.as_typed().map_err(|e| {
            RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
        })?;

        Self::group_mutability_authorization(receiver, module_id, input.name.as_str(), api)
    }

    pub(crate) fn set_group_mutability<Y>(
        receiver: &RENodeId,
        input: &IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let input: AccessRulesSetGroupMutabilityInput = input.as_typed().map_err(|e| {
            RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
        })?;

        let handle = api.sys_lock_substate(
            receiver.clone(),
            SubstateOffset::AccessRules(AccessRulesOffset::AccessRules),
            LockFlags::MUTABLE,
        )?;

        let access_rules_substate: &mut MethodAccessRulesSubstate =
            api.kernel_get_substate_ref_mut(handle)?;
        let access_rules = &mut access_rules_substate.access_rules;
        access_rules.set_group_mutability(input.name.clone(), input.mutability.clone());

        Runtime::emit_event(
            api,
            SetMutabilityEvent::Group {
                name: input.name,
                mutability: input.mutability,
            },
        )?;

        Ok(IndexedScryptoValue::from_typed(&()))
    }

    pub(crate) fn get_authorization_for_set_group_access_rule_and_mutability<Y>(
        receiver: &RENodeId,
        module_id: NodeModuleId,
        input: &IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<MethodAuthorization, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi,
    {
        let input: AccessRulesSetGroupAccessRuleAndMutabilityInput =
            input.as_typed().map_err(|e| {
                RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
            })?;

        Self::group_mutability_authorization(receiver, module_id, input.name.as_str(), api)
    }

    pub(crate) fn set_group_access_rule_and_mutability<Y>(
        receiver: &RENodeId,
        input: &IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let input: AccessRulesSetGroupAccessRuleAndMutabilityInput =
            input.as_typed().map_err(|e| {
                RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
            })?;

        let handle = api.sys_lock_substate(
            receiver.clone(),
            SubstateOffset::AccessRules(AccessRulesOffset::AccessRules),
            LockFlags::MUTABLE,
        )?;

        let access_rules_substate: &mut MethodAccessRulesSubstate =
            api.kernel_get_substate_ref_mut(handle)?;
        let access_rules = &mut access_rules_substate.access_rules;
        access_rules.set_group_access_rule_and_mutability(
            input.name.as_str(),
            input.rule.clone(),
            input.mutability.clone(),
        );

        Runtime::emit_event(
            api,
            SetRuleEvent::Group {
                name: input.name.clone(),
                rule: input.rule,
            },
        )?;
        Runtime::emit_event(
            api,
            SetMutabilityEvent::Group {
                name: input.name,
                mutability: input.mutability,
            },
        )?;

        Ok(IndexedScryptoValue::from_typed(&()))
    }
}
