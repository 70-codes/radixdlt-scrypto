use crate::kernel::kernel_api::KernelSubstateApi;
use crate::system::system_modules::auth::AuthError;
use crate::system::system_modules::costing::FIXED_LOW_FEE;
use crate::types::*;
use crate::{errors::*, event_schema};
use native_sdk::runtime::Runtime;
use radix_engine_interface::api::field_lock_api::LockFlags;
use radix_engine_interface::api::node_modules::auth::*;
use radix_engine_interface::api::node_modules::metadata::{METADATA_GET_IDENT, METADATA_SET_IDENT};
use radix_engine_interface::api::node_modules::royalty::{
    COMPONENT_ROYALTY_CLAIM_ROYALTY_IDENT, COMPONENT_ROYALTY_SET_ROYALTY_CONFIG_IDENT,
};
use radix_engine_interface::api::{ClientApi, ObjectModuleId, OBJECT_HANDLE_SELF};
use radix_engine_interface::blueprints::resource::*;
use radix_engine_interface::schema::{BlueprintSchema, FunctionSchema, PackageSchema};
use radix_engine_interface::types::*;
use crate::system::node_modules::access_rules::{UpdateMethodEvent};

use super::{SetRoleMutabilityEvent, DefineRoleEvent};

#[derive(Debug, Clone, Eq, PartialEq, ScryptoSbor)]
pub enum AccessRulesChainError {
    BlueprintFunctionNotFound(String),
    ProtectedMethod(MethodKey),
}

#[derive(Debug, Clone, PartialEq, Eq, ScryptoSbor)]
pub struct FunctionAccessRulesSubstate {
    pub access_rules: BTreeMap<FnKey, AccessRule>,
    pub default_auth: AccessRule,
}

#[derive(Debug, Clone, PartialEq, Eq, ScryptoSbor)]
pub struct MethodAccessRulesSubstate {
    pub access_rules: NodeAuthorityRules,
    pub inner_blueprint_access_rules: BTreeMap<String, NodeAuthorityRules>,
}

impl MethodAccessRulesSubstate {
    pub fn role_mutability_list(
        &self,
        object_key: &ObjectKey,
        authority_key: &RoleKey,
    ) -> RoleList {
        match object_key {
            ObjectKey::SELF => self.access_rules.get_role_mutability(authority_key),
            ObjectKey::InnerBlueprint(blueprint_name) => {
                if let Some(config) = self.inner_blueprint_access_rules.get(blueprint_name) {
                    config.get_role_mutability(authority_key)
                } else {
                    RoleList::none()
                }
            }
        }
    }

    pub fn method_permission_mutability_list(
        &self,
        object_key: &ObjectKey,
        method_key: &MethodKey,
    ) -> RoleList {
        match object_key {
            ObjectKey::SELF => self.access_rules.get_method_mutability(method_key),
            ObjectKey::InnerBlueprint(blueprint_name) => {
                if let Some(config) = self.inner_blueprint_access_rules.get(blueprint_name) {
                    config.get_method_mutability(method_key)
                } else {
                    RoleList::none()
                }
            }
        }
    }
}

#[derive(Debug, Clone, PartialEq, Eq, ScryptoSbor, ManifestSbor)]
pub enum CycleCheckError<S> {
    CycleFound(S),
    MissingAuthority(S),
    OwnerAuthorityHasReferences,
    OwnerAuthorityMutabilityHasInvalidReferences,
}

pub trait CycleCheck<S: sbor::rust::hash::Hash + PartialEq + Eq + Clone> {
    fn get_references(&self, authority: &S) -> Result<IndexSet<S>, CycleCheckError<S>>;

    fn cycle_check(
        &self,
        node: &S,
        visited: &mut IndexSet<S>,
        stack: &mut IndexSet<S>,
    ) -> Result<(), CycleCheckError<S>> {
        if stack.contains(node) {
            return Err(CycleCheckError::CycleFound(node.clone()));
        }

        if visited.contains(node) {
            return Ok(());
        }

        visited.insert(node.clone());
        stack.insert(node.clone());

        let referenced = self.get_references(node)?;

        for ref_authority in referenced {
            self.cycle_check(&ref_authority, visited, stack)?;
        }

        stack.remove(node);

        Ok(())
    }
}

/// Method authorization rules for a component
#[derive(Debug, Clone, PartialEq, Eq, ScryptoSbor, ManifestSbor)]
pub struct NodeAuthorityRules {
    pub method_permissions: BTreeMap<MethodKey, MethodPermission>, // Should this be optional?
    pub method_permission_mutability: BTreeMap<MethodKey, RoleList>,
    pub roles: BTreeMap<RoleKey, AccessRule>,
    pub protected_roles: BTreeMap<RoleKey, RoleList>,
}

impl NodeAuthorityRules {
    pub fn get_rule(&self, authority: &RoleKey) -> Option<&AccessRule> {
        self.roles.get(authority)
    }
}

impl CycleCheck<RoleKey> for NodeAuthorityRules {
    fn get_references(
        &self,
        authority: &RoleKey,
    ) -> Result<IndexSet<RoleKey>, CycleCheckError<RoleKey>> {
        if let Some(access_rule) = self.roles.get(authority) {
            Ok(access_rule.get_referenced_authorities())
        } else {
            Err(CycleCheckError::MissingAuthority(authority.clone()))
        }
    }
}

impl CycleCheck<RoleKey> for Roles {
    fn get_references(
        &self,
        authority: &RoleKey,
    ) -> Result<IndexSet<RoleKey>, CycleCheckError<RoleKey>> {
        if let Some((access, _mutability)) = self.rules.get(authority) {
            Ok(access.get_referenced_authorities())
        } else {
            Err(CycleCheckError::MissingAuthority(authority.clone()))
        }
    }
}

impl NodeAuthorityRules {
    pub fn new() -> Self {
        Self {
            method_permissions: BTreeMap::new(),
            method_permission_mutability: BTreeMap::new(),
            roles: BTreeMap::new(),
            protected_roles: BTreeMap::new(),
        }
    }

    fn create(
        method_permissions_and_mutability: BTreeMap<MethodKey, (MethodPermission, RoleList)>,
        inner_blueprint: bool,
        mut authority_rules: Roles,
    ) -> Result<Self, CycleCheckError<RoleKey>> {
        let mut method_permissions = BTreeMap::new();
        let mut method_permission_mutability = BTreeMap::new();

        for (method, (permission, mutability)) in method_permissions_and_mutability {
            method_permissions.insert(method.clone(), permission);
            method_permission_mutability.insert(method, mutability);
        }

        if !inner_blueprint {
            // Predefined rules
            // TODO: virtualize this state
            if !authority_rules.rules.contains_key(&RoleKey::new("owner")) {
                authority_rules.define_role("owner", AccessRule::DenyAll, RoleList::none())
            }

            // Metadata
            {
                // Always public
                let metadata_get = MethodKey::new(ObjectModuleId::Metadata, METADATA_GET_IDENT);
                method_permissions.insert(metadata_get.clone(), MethodPermission::Public);
                method_permission_mutability.insert(metadata_get, RoleList::none());

                let metadata_set = MethodKey::new(ObjectModuleId::Metadata, METADATA_SET_IDENT);
                if !method_permissions.contains_key(&metadata_set) {
                    method_permissions.insert(
                        metadata_set.clone(),
                        MethodPermission::Protected(RoleList::none()),
                    );
                    method_permission_mutability.insert(metadata_set, RoleList::none());
                }
            }

            {
                let royalty_set = MethodKey::new(
                    ObjectModuleId::Royalty,
                    COMPONENT_ROYALTY_SET_ROYALTY_CONFIG_IDENT,
                );
                if !method_permissions.contains_key(&royalty_set) {
                    let mut role_list = RoleList::none();
                    if authority_rules.rules.contains_key(&RoleKey::new("owner")) {
                        role_list.insert("owner");
                    }
                    method_permissions
                        .insert(royalty_set.clone(), MethodPermission::Protected(role_list));
                    method_permission_mutability.insert(royalty_set, RoleList::none());
                }

                let royalty_claim = MethodKey::new(
                    ObjectModuleId::Royalty,
                    COMPONENT_ROYALTY_CLAIM_ROYALTY_IDENT,
                );
                if !method_permissions.contains_key(&royalty_claim) {
                    let mut role_list = RoleList::none();
                    if authority_rules.rules.contains_key(&RoleKey::new("owner")) {
                        role_list.insert("owner");
                    }
                    method_permissions.insert(
                        royalty_claim.clone(),
                        MethodPermission::Protected(role_list),
                    );
                    method_permission_mutability.insert(royalty_claim, RoleList::none());
                }
            }
        }

        let mut visited = index_set_new();
        let mut stack = index_set_new();
        for authority in authority_rules.rules.keys() {
            authority_rules.cycle_check(authority, &mut visited, &mut stack)?;
        }

        let mut rules = BTreeMap::new();
        let mut protected_roles = BTreeMap::new();
        for (authority, (rule, mutability_rule)) in authority_rules.rules {
            rules.insert(authority.clone(), rule);
            protected_roles.insert(authority, mutability_rule);
        }

        Ok(Self {
            method_permissions,
            method_permission_mutability,
            roles: rules,
            protected_roles,
        })
    }

    pub fn get_method_mutability(&self, key: &MethodKey) -> RoleList {
        match self.method_permission_mutability.get(&key) {
            None => RoleList::none(),
            Some(entry) => entry.clone(),
        }
    }

    pub fn get_role_mutability(&self, key: &RoleKey) -> RoleList {
        match self.protected_roles.get(&key) {
            None => RoleList::none(),
            Some(entry) => entry.clone(),
        }
    }

    pub fn define_role<E: Into<AccessRule>>(
        &mut self,
        authority_key: RoleKey,
        access_rule_entry: E,
    ) -> Result<(), CycleCheckError<RoleKey>> {
        self.roles
            .insert(authority_key.clone(), access_rule_entry.into());

        let mut visited = index_set_new();
        let mut stack = index_set_new();
        self.cycle_check(&authority_key, &mut visited, &mut stack)?;

        Ok(())
    }

    pub fn set_role_mutability(
        &mut self,
        authority_key: RoleKey,
        roles: RoleList,
    ) -> Result<(), CycleCheckError<RoleKey>> {
        self.protected_roles.insert(authority_key.clone(), roles);
        Ok(())
    }

    pub fn set_method_permission(
        &mut self,
        method_key: MethodKey,
        permission: MethodPermission,
    ) -> Result<(), CycleCheckError<RoleKey>> {
        self.method_permissions
            .insert(method_key.clone(), permission);
        Ok(())
    }

    pub fn set_method_mutability(
        &mut self,
        method_key: MethodKey,
        mutability: RoleList,
    ) -> Result<(), CycleCheckError<RoleKey>> {
        self.method_permission_mutability
            .insert(method_key.clone(), mutability);
        Ok(())
    }
}

pub struct AccessRulesNativePackage;

impl AccessRulesNativePackage {
    pub fn schema() -> PackageSchema {
        let mut aggregator = TypeAggregator::<ScryptoCustomTypeKind>::new();

        let mut fields = Vec::new();
        fields.push(aggregator.add_child_type_and_descendents::<MethodAccessRulesSubstate>());

        let mut functions = BTreeMap::new();
        functions.insert(
            ACCESS_RULES_CREATE_IDENT.to_string(),
            FunctionSchema {
                receiver: None,
                input: aggregator.add_child_type_and_descendents::<AccessRulesCreateInput>(),
                output: aggregator.add_child_type_and_descendents::<AccessRulesCreateOutput>(),
                export_name: ACCESS_RULES_CREATE_IDENT.to_string(),
            },
        );
        functions.insert(
            ACCESS_RULES_UPDATE_METHOD_IDENT.to_string(),
            FunctionSchema {
                receiver: Some(schema::ReceiverInfo::normal_ref_mut()),
                input: aggregator
                    .add_child_type_and_descendents::<AccessRulesUpdateMethod>(),
                output: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetMethodPermissionAndMutabilityOutput>(),
                export_name: ACCESS_RULES_UPDATE_METHOD_IDENT.to_string(),
            },
        );
        functions.insert(
            ACCESS_RULES_DEFINE_ROLE_IDENT.to_string(),
            FunctionSchema {
                receiver: Some(schema::ReceiverInfo::normal_ref_mut()),
                input: aggregator.add_child_type_and_descendents::<AccessRulesDefineRoleInput>(),
                output: aggregator.add_child_type_and_descendents::<AccessRulesDefineRoleOutput>(),
                export_name: ACCESS_RULES_DEFINE_ROLE_IDENT.to_string(),
            },
        );
        functions.insert(
            ACCESS_RULES_SET_ROLE_MUTABILITY_IDENT.to_string(),
            FunctionSchema {
                receiver: Some(schema::ReceiverInfo::normal_ref_mut()),
                input: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetRoleMutabilityInput>(),
                output: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetRoleMutabilityOutput>(),
                export_name: ACCESS_RULES_SET_ROLE_MUTABILITY_IDENT.to_string(),
            },
        );


        let event_schema = event_schema! {
            aggregator,
            [
                UpdateMethodEvent,
                DefineRoleEvent,
                SetRoleMutabilityEvent
            ]
        };

        let schema = generate_full_schema(aggregator);
        PackageSchema {
            blueprints: btreemap!(
                ACCESS_RULES_BLUEPRINT.to_string() => BlueprintSchema {
                    outer_blueprint: None,
                    schema,
                    fields,
                    collections: vec![],
                    functions,
                    virtual_lazy_load_functions: btreemap!(),
                    event_schema,
                }
            ),
        }
    }

    pub fn authorization<Y: KernelSubstateApi<L>, L: Default>(
        node_id: &NodeId,
        ident: &str,
        input: &IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<RoleList, RuntimeError> {
        let roles = match ident {
            ACCESS_RULES_UPDATE_METHOD_IDENT => {
                let input: AccessRulesUpdateMethod =
                    input.as_typed().map_err(|e| {
                        RuntimeError::SystemUpstreamError(SystemUpstreamError::InputDecodeError(e))
                    })?;

                Self::method_permission_mutability_authorization(
                    node_id,
                    input.object_key,
                    &input.method_key,
                    api,
                )?
            }
            ACCESS_RULES_DEFINE_ROLE_IDENT => {
                let input: AccessRulesDefineRoleInput = input.as_typed().map_err(|e| {
                    RuntimeError::SystemUpstreamError(SystemUpstreamError::InputDecodeError(e))
                })?;
                Self::role_mutability_authorization(
                    node_id,
                    input.object_key,
                    &input.role_key,
                    api,
                )?
            }
            ACCESS_RULES_SET_ROLE_MUTABILITY_IDENT => {
                let input: AccessRulesSetRoleMutabilityInput = input.as_typed().map_err(|e| {
                    RuntimeError::SystemUpstreamError(SystemUpstreamError::InputDecodeError(e))
                })?;
                Self::role_mutability_authorization(
                    node_id,
                    input.object_key,
                    &input.role_key,
                    api,
                )?
            }
            _ => RoleList::none(),
        };

        Ok(roles)
    }

    pub fn function_access_rules() -> BTreeMap<FnKey, AccessRule> {
        let mut access_rules = BTreeMap::new();
        access_rules.insert(
            FnKey::new(
                ACCESS_RULES_BLUEPRINT.to_string(),
                ACCESS_RULES_CREATE_IDENT.to_string(),
            ),
            rule!(allow_all),
        );
        access_rules
    }

    pub fn invoke_export<Y>(
        export_name: &str,
        receiver: Option<&NodeId>,
        input: &IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        match export_name {
            ACCESS_RULES_CREATE_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                if receiver.is_some() {
                    return Err(RuntimeError::SystemUpstreamError(
                        SystemUpstreamError::NativeUnexpectedReceiver(export_name.to_string()),
                    ));
                }

                let input: AccessRulesCreateInput = input.as_typed().map_err(|e| {
                    RuntimeError::SystemUpstreamError(SystemUpstreamError::InputDecodeError(e))
                })?;

                let rtn = Self::create(
                    input.method_permissions,
                    input.authority_rules,
                    input.inner_blueprint_rules,
                    api,
                )?;
                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            ACCESS_RULES_UPDATE_METHOD_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let input: AccessRulesUpdateMethod =
                    input.as_typed().map_err(|e| {
                        RuntimeError::SystemUpstreamError(SystemUpstreamError::InputDecodeError(e))
                    })?;
                let rtn = Self::update_method(
                    input.object_key,
                    input.method_key,
                    input.permission,
                    input.mutability,
                    api,
                )?;
                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            ACCESS_RULES_DEFINE_ROLE_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let input: AccessRulesDefineRoleInput = input.as_typed().map_err(|e| {
                    RuntimeError::SystemUpstreamError(SystemUpstreamError::InputDecodeError(e))
                })?;

                let rtn = Self::define_role(input.object_key, input.role_key, input.rule, api)?;
                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            ACCESS_RULES_SET_ROLE_MUTABILITY_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let input: AccessRulesSetRoleMutabilityInput = input.as_typed().map_err(|e| {
                    RuntimeError::SystemUpstreamError(SystemUpstreamError::InputDecodeError(e))
                })?;

                let rtn = Self::set_role_mutability(
                    input.object_key,
                    input.role_key,
                    input.mutability,
                    api,
                )?;
                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            _ => Err(RuntimeError::SystemUpstreamError(
                SystemUpstreamError::NativeExportDoesNotExist(export_name.to_string()),
            )),
        }
    }

    fn method_permission_mutability_authorization<Y, L: Default>(
        receiver: &NodeId,
        object_key: ObjectKey,
        method_key: &MethodKey,
        api: &mut Y,
    ) -> Result<RoleList, RuntimeError>
    where
        Y: KernelSubstateApi<L>,
    {
        let handle = api.kernel_lock_substate(
            receiver,
            ACCESS_RULES_FIELD_PARTITION,
            &AccessRulesField::AccessRules.into(),
            LockFlags::read_only(),
            L::default(),
        )?;

        let role_list = {
            let access_rules_substate: MethodAccessRulesSubstate =
                api.kernel_read_substate(handle)?.as_typed().unwrap();
            access_rules_substate.method_permission_mutability_list(&object_key, method_key)
        };

        api.kernel_drop_lock(handle)?;

        Ok(role_list)
    }

    fn role_mutability_authorization<Y, L: Default>(
        receiver: &NodeId,
        object_key: ObjectKey,
        authority_key: &RoleKey,
        api: &mut Y,
    ) -> Result<RoleList, RuntimeError>
    where
        Y: KernelSubstateApi<L>,
    {
        let handle = api.kernel_lock_substate(
            receiver,
            ACCESS_RULES_FIELD_PARTITION,
            &AccessRulesField::AccessRules.into(),
            LockFlags::read_only(),
            L::default(),
        )?;

        let access_rule = {
            let access_rules_substate: MethodAccessRulesSubstate =
                api.kernel_read_substate(handle)?.as_typed().unwrap();
            access_rules_substate.role_mutability_list(&object_key, authority_key)
        };

        api.kernel_drop_lock(handle)?;

        Ok(access_rule)
    }

    pub(crate) fn create<Y>(
        method_permissions: BTreeMap<MethodKey, (MethodPermission, RoleList)>,
        role_definitions: Roles,
        inner_blueprint_rules: BTreeMap<
            String,
            (Roles, BTreeMap<MethodKey, (MethodPermission, RoleList)>),
        >,
        api: &mut Y,
    ) -> Result<Own, RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        let access_rules = NodeAuthorityRules::create(method_permissions, false, role_definitions)
            .map_err(|e| {
                RuntimeError::ModuleError(ModuleError::AuthError(AuthError::CycleCheckError(e)))
            })?;

        let mut inner_blueprint_access_rules = BTreeMap::new();
        for (blueprint, (authority_rules, protected_methods)) in inner_blueprint_rules {
            let inner_access_rules = NodeAuthorityRules::create(
                protected_methods,
                true,
                authority_rules,
            )
            .map_err(|e| {
                RuntimeError::ModuleError(ModuleError::AuthError(AuthError::CycleCheckError(e)))
            })?;
            inner_blueprint_access_rules.insert(blueprint, inner_access_rules);
        }

        let substate = MethodAccessRulesSubstate {
            access_rules,
            inner_blueprint_access_rules,
        };

        let component_id = api.new_simple_object(
            ACCESS_RULES_BLUEPRINT,
            vec![scrypto_encode(&substate).unwrap()],
        )?;

        Ok(Own(component_id))
    }

    pub(crate) fn update_method<Y>(
        object_key: ObjectKey,
        method_key: MethodKey,
        permission: Option<MethodPermission>,
        mutability: Option<RoleList>,
        api: &mut Y,
    ) -> Result<(), RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        let handle = api.actor_lock_field(
            OBJECT_HANDLE_SELF,
            AccessRulesField::AccessRules.into(),
            LockFlags::MUTABLE,
        )?;

        let mut access_rules_substate: MethodAccessRulesSubstate =
            api.field_lock_read_typed(handle)?;
        let access_rules = match object_key {
            ObjectKey::SELF => &mut access_rules_substate.access_rules,
            ObjectKey::InnerBlueprint(blueprint_name) => access_rules_substate
                .inner_blueprint_access_rules
                .get_mut(&blueprint_name)
                .unwrap(),
        };
        if let Some(permission) = &permission {
            access_rules
                .set_method_permission(method_key.clone(), permission.clone())
                .map_err(|cycle| {
                    RuntimeError::ModuleError(ModuleError::AuthError(AuthError::CycleCheckError(
                        cycle,
                    )))
                })?;

        }
        if let Some(mutability) = &mutability {
            access_rules
                .set_method_mutability(method_key.clone(), mutability.clone())
                .map_err(|cycle| {
                    RuntimeError::ModuleError(ModuleError::AuthError(AuthError::CycleCheckError(
                        cycle,
                    )))
                })?;
        }

        Runtime::emit_event(
            api,
            UpdateMethodEvent {
                method_key: method_key.clone(),
                permission,
                mutability,
            },
        )?;

        api.field_lock_write_typed(handle, &access_rules_substate)?;
        Ok(())
    }

    pub(crate) fn define_role<Y>(
        object_key: ObjectKey,
        authority_key: RoleKey,
        rule: AccessRule,
        api: &mut Y,
    ) -> Result<(), RuntimeError>
        where
            Y: ClientApi<RuntimeError>,
    {
        Self::define_role_and_mutability_internal(
            object_key,
            authority_key,
            Some(rule),
            Option::<RoleList>::None,
            api,
        )
    }

    pub(crate) fn set_role_mutability<Y>(
        object_key: ObjectKey,
        authority_key: RoleKey,
        mutability: RoleList,
        api: &mut Y,
    ) -> Result<(), RuntimeError>
        where
            Y: ClientApi<RuntimeError>,
    {
        Self::define_role_and_mutability_internal(
            object_key,
            authority_key,
            None,
            Some(mutability),
            api,
        )
    }

    fn define_role_and_mutability_internal<Y>(
        object_key: ObjectKey,
        role_key: RoleKey,
        rule: Option<AccessRule>,
        mutability: Option<RoleList>,
        api: &mut Y,
    ) -> Result<(), RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        let handle = api.actor_lock_field(
            OBJECT_HANDLE_SELF,
            AccessRulesField::AccessRules.into(),
            LockFlags::MUTABLE,
        )?;

        let mut access_rules_substate: MethodAccessRulesSubstate =
            api.field_lock_read_typed(handle)?;
        let access_rules = match object_key {
            ObjectKey::SELF => &mut access_rules_substate.access_rules,
            ObjectKey::InnerBlueprint(blueprint_name) => access_rules_substate
                .inner_blueprint_access_rules
                .get_mut(&blueprint_name)
                .unwrap(),
        };
        if let Some(rule) = rule {
            access_rules
                .define_role(role_key.clone(), rule.clone())
                .map_err(|cycle| {
                    RuntimeError::ModuleError(ModuleError::AuthError(AuthError::CycleCheckError(
                        cycle,
                    )))
                })?;

            Runtime::emit_event(
                api,
                DefineRoleEvent {
                    role_key: role_key.clone(),
                    rule,
                },
            )?;
        }
        if let Some(mutability) = mutability {
            access_rules
                .set_role_mutability(role_key.clone(), mutability.clone())
                .map_err(|cycle| {
                    RuntimeError::ModuleError(ModuleError::AuthError(AuthError::CycleCheckError(
                        cycle,
                    )))
                })?;
            Runtime::emit_event(
                api,
                SetRoleMutabilityEvent {
                    role_key: role_key,
                    mutability,
                },
            )?;
        }
        api.field_lock_write_typed(handle, &access_rules_substate)?;

        Ok(())
    }
}
