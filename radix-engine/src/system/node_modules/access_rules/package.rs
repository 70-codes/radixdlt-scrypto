use crate::errors::*;
use crate::kernel::kernel_api::{KernelNodeApi, KernelSubstateApi};
use crate::system::kernel_modules::auth::{convert_contextless, MethodAuthorization};
use crate::system::kernel_modules::costing::FIXED_LOW_FEE;
use crate::types::*;
use radix_engine_interface::api::component::TypeInfoSubstate;
use radix_engine_interface::api::node_modules::auth::*;
use radix_engine_interface::api::package::PackageInfoSubstate;
use radix_engine_interface::api::substate_api::LockFlags;
use radix_engine_interface::api::types::{PackageOffset, RENodeId, SubstateOffset};
use radix_engine_interface::api::unsafe_api::ClientCostingReason;
use radix_engine_interface::api::ClientApi;
use radix_engine_interface::blueprints::resource::*;
use radix_engine_interface::data::ScryptoValue;

use super::{SetMutabilityEvent, SetRuleEvent};

#[derive(Debug, Clone, Eq, PartialEq, ScryptoSbor)]
pub enum AccessRulesChainError {
    BlueprintFunctionNotFound(String),
    InvalidIndex(u32),
    ProtectedMethod(MethodKey),
}

/// A transient resource container.
#[derive(Debug, Clone, PartialEq, Eq, ScryptoSbor)]
pub struct FunctionAccessRulesSubstate {
    pub access_rules: BTreeMap<FunctionKey, AccessRule>,
    pub default_auth: AccessRule,
}

/// A transient resource container.
#[derive(Debug, Clone, PartialEq, Eq, ScryptoSbor)]
pub struct MethodAccessRulesChainSubstate {
    pub access_rules_chain: Vec<AccessRules>,
}

impl MethodAccessRulesChainSubstate {
    pub fn method_mutability_authorization(&self, key: &MethodKey) -> Vec<MethodAuthorization> {
        let mut authorizations = Vec::new();
        for auth in &self.access_rules_chain {
            let method_auth = auth.get_mutability(key);

            // TODO: Remove
            let authorization = convert_contextless(method_auth);
            authorizations.push(authorization);
        }

        authorizations
    }

    pub fn group_mutability_authorization(&self, name: &str) -> Vec<MethodAuthorization> {
        let mut authorizations = Vec::new();
        for auth in &self.access_rules_chain {
            let group_auth = auth.get_group_mutability(name);

            // TODO: Remove
            let authorization = convert_contextless(group_auth);
            authorizations.push(authorization);
        }

        authorizations
    }
}

pub struct AccessRulesNativePackage;
impl AccessRulesNativePackage {
    pub fn invoke_export<Y>(
        export_name: &str,
        receiver: Option<RENodeId>,
        input: ScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        match export_name {
            ACCESS_RULES_ADD_ACCESS_CHECK_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunPrecompiled)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                Self::add_access_check(receiver, input, api)
            }
            ACCESS_RULES_SET_METHOD_ACCESS_RULE_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunPrecompiled)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                Self::set_method_access_rule(receiver, input, api)
            }
            ACCESS_RULES_SET_METHOD_MUTABILITY_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunPrecompiled)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                Self::set_method_mutability(receiver, input, api)
            }
            ACCESS_RULES_SET_GROUP_ACCESS_RULE_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunPrecompiled)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                Self::set_group_access_rule(receiver, input, api)
            }
            ACCESS_RULES_SET_GROUP_MUTABILITY_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunPrecompiled)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                Self::set_group_mutability(receiver, input, api)
            }
            ACCESS_RULES_GET_LENGTH_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunPrecompiled)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                Self::get_length(receiver, input, api)
            }
            _ => Err(RuntimeError::InterpreterError(
                InterpreterError::NativeExportDoesNotExist(export_name.to_string()),
            )),
        }
    }

    pub(crate) fn add_access_check<Y>(
        receiver: RENodeId,
        input: ScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let input: AccessRulesAddAccessCheckInput =
            scrypto_decode(&scrypto_encode(&input).unwrap())
                .map_err(|_| RuntimeError::InterpreterError(InterpreterError::InvalidInvocation))?;

        // Abi checks
        {
            let handle = api.kernel_lock_substate(
                receiver,
                NodeModuleId::TypeInfo,
                SubstateOffset::TypeInfo(TypeInfoOffset::TypeInfo),
                LockFlags::read_only(),
            )?;

            let (package_id, blueprint_name) = {
                let type_info: &TypeInfoSubstate = api.kernel_get_substate_ref(handle)?;
                let package_address = type_info.package_address;
                let blueprint_name = type_info.blueprint_name.to_owned();
                (RENodeId::GlobalPackage(package_address), blueprint_name)
            };

            let package_offset = SubstateOffset::Package(PackageOffset::Info);
            let handle = api.kernel_lock_substate(
                package_id,
                NodeModuleId::SELF,
                package_offset,
                LockFlags::read_only(),
            )?;
            let package: &PackageInfoSubstate = api.kernel_get_substate_ref(handle)?;
            let blueprint_abi = package.blueprint_abi(&blueprint_name).unwrap_or_else(|| {
                panic!(
                    "Blueprint {} is not found in package node {:?}",
                    blueprint_name, package_id
                )
            });

            // TODO: Should we check all other module methods or should we even make this check?
            for (key, _) in input.access_rules.get_all_method_auth() {
                if let MethodKey {
                    node_module_id: NodeModuleId::SELF,
                    ident: method_ident,
                } = key
                {
                    if !blueprint_abi.contains_fn(method_ident.as_str()) {
                        return Err(RuntimeError::ApplicationError(
                            ApplicationError::AccessRulesChainError(
                                AccessRulesChainError::BlueprintFunctionNotFound(
                                    method_ident.to_string(),
                                ),
                            ),
                        ));
                    }
                }
            }
        }

        let handle = api.sys_lock_substate(
            receiver,
            SubstateOffset::AccessRulesChain(AccessRulesChainOffset::AccessRulesChain),
            LockFlags::MUTABLE,
        )?;

        let substate: &mut MethodAccessRulesChainSubstate =
            api.kernel_get_substate_ref_mut(handle)?;
        substate.access_rules_chain.push(input.access_rules);

        Ok(IndexedScryptoValue::from_typed(&()))
    }

    fn group_mutability_authorization<Y>(
        receiver: RENodeId,
        module_id: NodeModuleId,
        name: &str,
        api: &mut Y,
    ) -> Result<Vec<MethodAuthorization>, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi,
    {
        let handle = api.kernel_lock_substate(
            receiver,
            module_id,
            SubstateOffset::AccessRulesChain(AccessRulesChainOffset::AccessRulesChain),
            LockFlags::read_only(),
        )?;

        let authorization = {
            let access_rules_substate: &MethodAccessRulesChainSubstate =
                api.kernel_get_substate_ref(handle)?;
            access_rules_substate.group_mutability_authorization(name)
        };

        api.kernel_drop_lock(handle)?;

        Ok(authorization)
    }

    fn method_mutability_authorization<Y>(
        receiver: RENodeId,
        module_id: NodeModuleId,
        key: MethodKey,
        api: &mut Y,
    ) -> Result<Vec<MethodAuthorization>, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi,
    {
        let authorization = if key.node_module_id.eq(&NodeModuleId::AccessRules)
            || key.node_module_id.eq(&NodeModuleId::AccessRules1)
        {
            // Should we just store this on ledger?
            vec![MethodAuthorization::DenyAll]
        } else {
            let handle = api.kernel_lock_substate(
                receiver,
                module_id,
                SubstateOffset::AccessRulesChain(AccessRulesChainOffset::AccessRulesChain),
                LockFlags::read_only(),
            )?;

            let authorization = {
                let access_rules_substate: &MethodAccessRulesChainSubstate =
                    api.kernel_get_substate_ref(handle)?;
                access_rules_substate.method_mutability_authorization(&key)
            };

            api.kernel_drop_lock(handle)?;

            authorization
        };

        Ok(authorization)
    }

    pub(crate) fn set_method_access_rule_authorization<Y>(
        receiver: RENodeId,
        module_id: NodeModuleId,
        args: &ScryptoValue,
        api: &mut Y,
    ) -> Result<Vec<MethodAuthorization>, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi,
    {
        // TODO: Remove encode/decode mess
        let input: AccessRulesSetMethodAccessRuleInput =
            scrypto_decode(&scrypto_encode(args).unwrap())
                .map_err(|_| RuntimeError::InterpreterError(InterpreterError::InvalidInvocation))?;

        Self::method_mutability_authorization(receiver, module_id, input.key, api)
    }

    pub(crate) fn set_method_access_rule<Y>(
        receiver: RENodeId,
        input: ScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let input: AccessRulesSetMethodAccessRuleInput =
            scrypto_decode(&scrypto_encode(&input).unwrap())
                .map_err(|_| RuntimeError::InterpreterError(InterpreterError::InvalidInvocation))?;

        let handle = api.sys_lock_substate(
            receiver,
            SubstateOffset::AccessRulesChain(AccessRulesChainOffset::AccessRulesChain),
            LockFlags::MUTABLE,
        )?;

        let access_rules_substate: &mut MethodAccessRulesChainSubstate =
            api.kernel_get_substate_ref_mut(handle)?;
        let access_rules_chain = &mut access_rules_substate.access_rules_chain;
        let index: usize = input.index.try_into().unwrap();
        let access_rules =
            access_rules_chain
                .get_mut(index)
                .ok_or(RuntimeError::ApplicationError(
                    ApplicationError::AccessRulesChainError(AccessRulesChainError::InvalidIndex(
                        input.index,
                    )),
                ))?;

        access_rules.set_method_access_rule(input.key.clone(), input.rule.clone());

        api.emit_event(SetRuleEvent::Method {
            index: input.index,
            key: input.key,
            rule: input.rule,
        })?;

        Ok(IndexedScryptoValue::from_typed(&()))
    }

    pub(crate) fn set_group_access_rule_authorization<Y>(
        receiver: RENodeId,
        module_id: NodeModuleId,
        args: &ScryptoValue,
        api: &mut Y,
    ) -> Result<Vec<MethodAuthorization>, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi,
    {
        // TODO: Remove encode/decode mess
        let input: AccessRulesSetGroupAccessRuleInput =
            scrypto_decode(&scrypto_encode(&args).unwrap())
                .map_err(|_| RuntimeError::InterpreterError(InterpreterError::InvalidInvocation))?;

        Self::group_mutability_authorization(receiver, module_id, input.name.as_str(), api)
    }

    pub(crate) fn set_group_access_rule<Y>(
        receiver: RENodeId,
        input: ScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let input: AccessRulesSetGroupAccessRuleInput =
            scrypto_decode(&scrypto_encode(&input).unwrap())
                .map_err(|_| RuntimeError::InterpreterError(InterpreterError::InvalidInvocation))?;

        let handle = api.sys_lock_substate(
            receiver,
            SubstateOffset::AccessRulesChain(AccessRulesChainOffset::AccessRulesChain),
            LockFlags::MUTABLE,
        )?;

        let access_rules_substate: &mut MethodAccessRulesChainSubstate =
            api.kernel_get_substate_ref_mut(handle)?;
        let access_rules_list = &mut access_rules_substate.access_rules_chain;
        let index: usize = input.index.try_into().unwrap();
        let access_rules =
            access_rules_list
                .get_mut(index)
                .ok_or(RuntimeError::ApplicationError(
                    ApplicationError::AccessRulesChainError(AccessRulesChainError::InvalidIndex(
                        input.index,
                    )),
                ))?;

        access_rules.set_group_access_rule(input.name.clone(), input.rule.clone());

        api.emit_event(SetRuleEvent::Group {
            index: input.index,
            name: input.name,
            rule: input.rule,
        })?;

        Ok(IndexedScryptoValue::from_typed(&()))
    }

    pub(crate) fn set_method_mutability_authorization<Y>(
        receiver: RENodeId,
        module_id: NodeModuleId,
        args: &ScryptoValue,
        api: &mut Y,
    ) -> Result<Vec<MethodAuthorization>, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi,
    {
        // TODO: Remove encode/decode mess
        let input: AccessRulesSetMethodMutabilityInput =
            scrypto_decode(&scrypto_encode(args).unwrap())
                .map_err(|_| RuntimeError::InterpreterError(InterpreterError::InvalidInvocation))?;

        Self::method_mutability_authorization(receiver, module_id, input.key, api)
    }

    pub(crate) fn set_method_mutability<Y>(
        receiver: RENodeId,
        input: ScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let input: AccessRulesSetMethodMutabilityInput =
            scrypto_decode(&scrypto_encode(&input).unwrap())
                .map_err(|_| RuntimeError::InterpreterError(InterpreterError::InvalidInvocation))?;

        let handle = api.sys_lock_substate(
            receiver,
            SubstateOffset::AccessRulesChain(AccessRulesChainOffset::AccessRulesChain),
            LockFlags::MUTABLE,
        )?;

        let access_rules_substate: &mut MethodAccessRulesChainSubstate =
            api.kernel_get_substate_ref_mut(handle)?;
        let access_rules_chain = &mut access_rules_substate.access_rules_chain;
        let index: usize = input.index.try_into().unwrap();
        let access_rules =
            access_rules_chain
                .get_mut(index)
                .ok_or(RuntimeError::ApplicationError(
                    ApplicationError::AccessRulesChainError(AccessRulesChainError::InvalidIndex(
                        input.index,
                    )),
                ))?;

        access_rules.set_mutability(input.key.clone(), input.mutability.clone());

        api.emit_event(SetMutabilityEvent::Method {
            index: input.index,
            key: input.key,
            mutability: input.mutability,
        })?;

        Ok(IndexedScryptoValue::from_typed(&()))
    }

    pub(crate) fn set_group_mutability_authorization<Y>(
        receiver: RENodeId,
        module_id: NodeModuleId,
        args: &ScryptoValue,
        api: &mut Y,
    ) -> Result<Vec<MethodAuthorization>, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi,
    {
        // TODO: Remove encode/decode mess
        let input: AccessRulesSetGroupMutabilityInput =
            scrypto_decode(&scrypto_encode(&args).unwrap())
                .map_err(|_| RuntimeError::InterpreterError(InterpreterError::InvalidInvocation))?;

        Self::group_mutability_authorization(receiver, module_id, input.name.as_str(), api)
    }

    pub(crate) fn set_group_mutability<Y>(
        receiver: RENodeId,
        input: ScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let input: AccessRulesSetGroupMutabilityInput =
            scrypto_decode(&scrypto_encode(&input).unwrap())
                .map_err(|_| RuntimeError::InterpreterError(InterpreterError::InvalidInvocation))?;

        let handle = api.sys_lock_substate(
            receiver,
            SubstateOffset::AccessRulesChain(AccessRulesChainOffset::AccessRulesChain),
            LockFlags::MUTABLE,
        )?;

        let access_rules_substate: &mut MethodAccessRulesChainSubstate =
            api.kernel_get_substate_ref_mut(handle)?;
        let access_rules_list = &mut access_rules_substate.access_rules_chain;
        let index: usize = input.index.try_into().unwrap();
        let access_rules =
            access_rules_list
                .get_mut(index)
                .ok_or(RuntimeError::ApplicationError(
                    ApplicationError::AccessRulesChainError(AccessRulesChainError::InvalidIndex(
                        input.index,
                    )),
                ))?;

        access_rules.set_group_mutability(input.name.clone(), input.mutability.clone());

        api.emit_event(SetMutabilityEvent::Group {
            index: input.index,
            name: input.name,
            mutability: input.mutability,
        })?;

        Ok(IndexedScryptoValue::from_typed(&()))
    }

    pub(crate) fn get_length<Y>(
        receiver: RENodeId,
        input: ScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let _input: AccessRulesGetLengthInput = scrypto_decode(&scrypto_encode(&input).unwrap())
            .map_err(|_| RuntimeError::InterpreterError(InterpreterError::InvalidInvocation))?;

        let handle = api.sys_lock_substate(
            receiver,
            SubstateOffset::AccessRulesChain(AccessRulesChainOffset::AccessRulesChain),
            LockFlags::MUTABLE,
        )?;

        let access_rules_substate: &MethodAccessRulesChainSubstate =
            api.kernel_get_substate_ref(handle)?;

        let len = access_rules_substate.access_rules_chain.len() as u32;
        Ok(IndexedScryptoValue::from_typed(&len))
    }
}
