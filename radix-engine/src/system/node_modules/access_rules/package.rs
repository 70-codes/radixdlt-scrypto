use crate::kernel::kernel_api::KernelSubstateApi;
use crate::system::system::KeyValueEntrySubstate;
use crate::system::system_modules::costing::FIXED_LOW_FEE;
use crate::types::*;
use crate::{errors::*, event_schema};
use native_sdk::runtime::Runtime;
use radix_engine_interface::api::field_lock_api::LockFlags;
use radix_engine_interface::api::node_modules::auth::*;
use radix_engine_interface::api::{ClientApi, OBJECT_HANDLE_SELF};
use radix_engine_interface::blueprints::package::{
    AuthConfig, BlueprintDefinitionInit, MethodAuthTemplate, PackageSetup,
};
use radix_engine_interface::blueprints::resource::*;
use radix_engine_interface::schema::{
    BlueprintCollectionSchema, BlueprintFunctionsTemplateInit, BlueprintKeyValueStoreSchema,
    BlueprintSchemaInit, BlueprintStateSchemaInit, FunctionSchemaInit, TypeRef,
};
use radix_engine_interface::types::*;

use super::UpdateRoleEvent;

#[derive(Debug, Clone, Eq, PartialEq, ScryptoSbor)]
pub enum AccessRulesError {
    BlueprintFunctionNotFound(String),
    ProtectedMethod(MethodKey),
    RoleDoesNotExist(RoleKey),
    MethodDoesNotExist(ObjectKey, MethodKey),
    UsedReservedRole(String),
}

pub struct AccessRulesNativePackage;

impl AccessRulesNativePackage {
    pub fn definition() -> PackageSetup {
        let mut aggregator = TypeAggregator::<ScryptoCustomTypeKind>::new();

        let fields = Vec::new();

        let mut collections = Vec::new();
        collections.push(BlueprintCollectionSchema::KeyValueStore(
            BlueprintKeyValueStoreSchema {
                key: TypeRef::Static(aggregator.add_child_type_and_descendents::<RoleKey>()),
                value: TypeRef::Static(aggregator.add_child_type_and_descendents::<AccessRule>()),
                can_own: false,
            },
        ));
        collections.push(BlueprintCollectionSchema::KeyValueStore(
            BlueprintKeyValueStoreSchema {
                key: TypeRef::Static(aggregator.add_child_type_and_descendents::<RoleKey>()),
                value: TypeRef::Static(aggregator.add_child_type_and_descendents::<RoleList>()),
                can_own: false,
            },
        ));

        let mut functions = BTreeMap::new();
        functions.insert(
            ACCESS_RULES_CREATE_IDENT.to_string(),
            FunctionSchemaInit {
                receiver: None,
                input: aggregator.add_child_type_and_descendents::<AccessRulesCreateInput>(),
                output: aggregator.add_child_type_and_descendents::<AccessRulesCreateOutput>(),
                export: ACCESS_RULES_CREATE_IDENT.to_string(),
            },
        );
        functions.insert(
            ACCESS_RULES_UPDATE_ROLE_IDENT.to_string(),
            FunctionSchemaInit {
                receiver: Some(schema::ReceiverInfo::normal_ref_mut()),
                input: aggregator.add_child_type_and_descendents::<AccessRulesUpdateRoleInput>(),
                output: aggregator.add_child_type_and_descendents::<AccessRulesUpdateRoleOutput>(),
                export: ACCESS_RULES_UPDATE_ROLE_IDENT.to_string(),
            },
        );
        functions.insert(
            ACCESS_RULES_GET_ROLE_IDENT.to_string(),
            FunctionSchemaInit {
                receiver: Some(schema::ReceiverInfo::normal_ref_mut()),
                input: aggregator.add_child_type_and_descendents::<AccessRulesGetRoleInput>(),
                output: aggregator.add_child_type_and_descendents::<AccessRulesGetRoleOutput>(),
                export: ACCESS_RULES_GET_ROLE_IDENT.to_string(),
            },
        );

        let events = event_schema! {
            aggregator,
            [
                UpdateRoleEvent
            ]
        };

        let schema = generate_full_schema(aggregator);
        let blueprints = btreemap!(
            ACCESS_RULES_BLUEPRINT.to_string() => BlueprintDefinitionInit {
                outer_blueprint: None,
                dependencies: btreeset!(),
                feature_set: btreeset!(),

                schema: BlueprintSchemaInit {
                    schema,
                    state: BlueprintStateSchemaInit {
                        fields,
                        collections,
                    },
                    events,
                    functions: BlueprintFunctionsTemplateInit {
                        virtual_lazy_load_functions: btreemap!(),
                        functions,
                    },
                },

                royalty_config: RoyaltyConfig::default(),
                auth_config: AuthConfig {
                    function_auth: btreemap!(
                        ACCESS_RULES_CREATE_IDENT.to_string() => rule!(allow_all) // TODO: Remove for system blueprints
                    ),
                    method_auth: MethodAuthTemplate::Static {
                        auth: btreemap!(),
                        outer_auth: btreemap!(),
                    },
                },
            }
        );

        PackageSetup { blueprints }
    }

    pub fn authorization<Y: KernelSubstateApi<L>, L: Default>(
        node_id: &NodeId,
        ident: &str,
        input: &IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<MethodPermission, RuntimeError> {
        let permission = match ident {
            ACCESS_RULES_UPDATE_ROLE_IDENT => {
                let input: AccessRulesUpdateRoleInput = input.as_typed().map_err(|e| {
                    RuntimeError::ApplicationError(ApplicationError::InputDecodeError(e))
                })?;
                Self::update_role_authorization(node_id, &input, api)?
            }
            ACCESS_RULES_GET_ROLE_IDENT => MethodPermission::Public,
            _ => MethodPermission::nobody(),
        };

        Ok(permission)
    }

    pub fn invoke_export<Y>(
        export_name: &str,
        input: &IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        match export_name {
            ACCESS_RULES_CREATE_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let input: AccessRulesCreateInput = input.as_typed().map_err(|e| {
                    RuntimeError::ApplicationError(ApplicationError::InputDecodeError(e))
                })?;

                let rtn = Self::create(input.roles, api)?;
                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            ACCESS_RULES_UPDATE_ROLE_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let input: AccessRulesUpdateRoleInput = input.as_typed().map_err(|e| {
                    RuntimeError::ApplicationError(ApplicationError::InputDecodeError(e))
                })?;

                let rtn = Self::update_role(input.role_key, input.rule, input.mutability, api)?;
                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            ACCESS_RULES_GET_ROLE_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let input: AccessRulesGetRoleInput = input.as_typed().map_err(|e| {
                    RuntimeError::ApplicationError(ApplicationError::InputDecodeError(e))
                })?;

                let rtn = Self::get_role(input.role_key, api)?;
                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            _ => Err(RuntimeError::ApplicationError(
                ApplicationError::ExportDoesNotExist(export_name.to_string()),
            )),
        }
    }

    fn update_role_authorization<Y, L: Default>(
        receiver: &NodeId,
        input: &AccessRulesUpdateRoleInput,
        api: &mut Y,
    ) -> Result<MethodPermission, RuntimeError>
    where
        Y: KernelSubstateApi<L>,
    {
        if input.role_key.key.eq(SELF_ROLE) {
            return Ok(MethodPermission::Protected(RoleList::none()));
        }

        let handle = api.kernel_lock_substate_with_default(
            receiver,
            ACCESS_RULES_BASE_PARTITION
                .at_offset(ACCESS_RULES_MUTABILITY_PARTITION_OFFSET)
                .unwrap(),
            &SubstateKey::Map(scrypto_encode(&input.role_key).unwrap()),
            LockFlags::read_only(),
            Some(|| {
                let kv_entry = KeyValueEntrySubstate::<()>::default();
                IndexedScryptoValue::from_typed(&kv_entry)
            }),
            L::default(),
        )?;

        let substate: KeyValueEntrySubstate<RoleList> =
            api.kernel_read_substate(handle)?.as_typed().unwrap();
        api.kernel_drop_lock(handle)?;
        let role_list = substate.value.unwrap_or_else(|| RoleList::none());

        Ok(role_list.into())
    }

    pub(crate) fn create<Y>(roles: Roles, api: &mut Y) -> Result<Own, RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        if roles.roles.contains_key(&RoleKey::new(SELF_ROLE)) {
            return Err(RuntimeError::ApplicationError(
                ApplicationError::AccessRulesError(AccessRulesError::UsedReservedRole(
                    SELF_ROLE.to_string(),
                )),
            ));
        }

        let mut role_entries = BTreeMap::new();
        let mut mutability_entries = BTreeMap::new();

        for (role_key, entry) in roles.roles {
            role_entries.insert(
                scrypto_encode(&role_key).unwrap(),
                (scrypto_encode(&entry.rule).unwrap(), false),
            );
            mutability_entries.insert(
                scrypto_encode(&role_key).unwrap(),
                (
                    scrypto_encode(&entry.mutable).unwrap(),
                    !entry.mutable_mutable,
                ),
            );
        }

        let component_id = api.new_object(
            ACCESS_RULES_BLUEPRINT,
            vec![],
            None,
            vec![],
            btreemap!(
                0u8 => role_entries,
                1u8 => mutability_entries,
            ),
        )?;

        Ok(Own(component_id))
    }

    fn update_role<Y>(
        role_key: RoleKey,
        rule: Option<AccessRule>,
        mutability: Option<(RoleList, bool)>,
        api: &mut Y,
    ) -> Result<(), RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        if let Some(rule) = &rule {
            let handle = api.actor_lock_key_value_entry(
                OBJECT_HANDLE_SELF,
                0u8,
                &scrypto_encode(&role_key).unwrap(),
                LockFlags::MUTABLE,
            )?;

            let substate: Option<AccessRule> = api.key_value_entry_get_typed(handle)?;
            if substate.is_none() {
                return Err(RuntimeError::ApplicationError(
                    ApplicationError::AccessRulesError(AccessRulesError::RoleDoesNotExist(
                        role_key,
                    )),
                ));
            }

            api.key_value_entry_set_typed(handle, rule.clone())?;
            api.key_value_entry_release(handle)?;
        }

        if let Some((role_list, mutable)) = &mutability {
            let handle = api.actor_lock_key_value_entry(
                OBJECT_HANDLE_SELF,
                1u8,
                &scrypto_encode(&role_key).unwrap(),
                LockFlags::MUTABLE,
            )?;

            let substate: Option<RoleList> = api.key_value_entry_get_typed(handle)?;
            if substate.is_none() {
                return Err(RuntimeError::ApplicationError(
                    ApplicationError::AccessRulesError(AccessRulesError::RoleDoesNotExist(
                        role_key,
                    )),
                ));
            }
            if !*mutable {
                api.key_value_entry_freeze(handle)?;
            }

            api.key_value_entry_set_typed(handle, role_list.clone())?;
            api.key_value_entry_release(handle)?;
        }

        Runtime::emit_event(
            api,
            UpdateRoleEvent {
                role_key,
                rule,
                mutability,
            },
        )?;

        Ok(())
    }

    pub(crate) fn get_role<Y>(
        role_key: RoleKey,
        api: &mut Y,
    ) -> Result<Option<AccessRule>, RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        let handle = api.actor_lock_key_value_entry(
            OBJECT_HANDLE_SELF,
            0u8,
            &scrypto_encode(&role_key).unwrap(),
            LockFlags::read_only(),
        )?;

        let access_rule: Option<AccessRule> = api.key_value_entry_get_typed(handle)?;

        api.key_value_entry_release(handle)?;

        Ok(access_rule)
    }
}
