use crate::kernel::kernel_api::{KernelApi, KernelNodeApi, KernelSubstateApi};
use crate::kernel::kernel_callback_api::KernelCallbackObject;
use crate::system::system_modules::costing::FIXED_LOW_FEE;
use crate::types::*;
use crate::{errors::*, event_schema};
use native_sdk::runtime::Runtime;
use radix_engine_interface::api::field_lock_api::LockFlags;
use radix_engine_interface::api::node_modules::auth::*;
use radix_engine_interface::api::node_modules::metadata::{METADATA_GET_IDENT, METADATA_SET_IDENT};
use radix_engine_interface::api::{ClientApi, ObjectModuleId, OBJECT_HANDLE_SELF};
use radix_engine_interface::api::node_modules::royalty::{COMPONENT_ROYALTY_CLAIM_ROYALTY_IDENT, COMPONENT_ROYALTY_SET_ROYALTY_CONFIG_IDENT};
use radix_engine_interface::blueprints::resource::*;
use radix_engine_interface::schema::{BlueprintSchema, FunctionSchema, PackageSchema};
use radix_engine_interface::types::*;

use super::{SetMutabilityEvent, SetRuleEvent};

#[derive(Debug, Clone, Eq, PartialEq, ScryptoSbor)]
pub enum AccessRulesChainError {
    BlueprintFunctionNotFound(String),
    ProtectedMethod(MethodKey),
}

#[derive(Debug, Clone, PartialEq, Eq, ScryptoSbor)]
pub struct FunctionAccessRulesSubstate {
    pub access_rules: BTreeMap<FnKey, AccessRule>,
    pub default_auth: AccessRule,
}

#[derive(Debug, Clone, PartialEq, Eq, ScryptoSbor)]
pub struct MethodAccessRulesSubstate {
    pub access_rules: AccessRulesConfig,
    pub child_blueprint_rules: BTreeMap<String, AccessRulesConfig>,
}

impl MethodAccessRulesSubstate {
    pub fn group_mutability_authorization(&self, object_key: &ObjectKey, name: &str) -> AccessRule {
        match object_key {
            ObjectKey::SELF => self.access_rules.get_group_mutability(name),
            ObjectKey::ChildBlueprint(blueprint_name) => {
                if let Some(config) = self.child_blueprint_rules.get(blueprint_name) {
                    config.get_group_mutability(name)
                } else {
                    AccessRule::DenyAll
                }
            }
        }
    }
}

pub struct AccessRulesNativePackage;

impl AccessRulesNativePackage {
    pub fn schema() -> PackageSchema {
        let mut aggregator = TypeAggregator::<ScryptoCustomTypeKind>::new();

        let mut fields = Vec::new();
        fields.push(aggregator.add_child_type_and_descendents::<MethodAccessRulesSubstate>());

        let mut functions = BTreeMap::new();
        functions.insert(
            ACCESS_RULES_CREATE_IDENT.to_string(),
            FunctionSchema {
                receiver: None,
                input: aggregator.add_child_type_and_descendents::<AccessRulesCreateInput>(),
                output: aggregator.add_child_type_and_descendents::<AccessRulesCreateOutput>(),
                export_name: ACCESS_RULES_CREATE_IDENT.to_string(),
            },
        );
        functions.insert(
            ACCESS_RULES_SET_GROUP_ACCESS_RULE_AND_MUTABILITY_IDENT.to_string(),
            FunctionSchema {
                receiver: Some(schema::Receiver::SelfRefMut),
                input: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetGroupAccessRuleAndMutabilityInput>(),
                output: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetGroupAccessRuleAndMutabilityOutput>(),
                export_name: ACCESS_RULES_SET_GROUP_ACCESS_RULE_AND_MUTABILITY_IDENT.to_string(),
            },
        );
        functions.insert(
            ACCESS_RULES_SET_GROUP_ACCESS_RULE_IDENT.to_string(),
            FunctionSchema {
                receiver: Some(schema::Receiver::SelfRefMut),
                input: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetGroupAccessRuleInput>(),
                output: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetGroupAccessRuleOutput>(),
                export_name: ACCESS_RULES_SET_GROUP_ACCESS_RULE_IDENT.to_string(),
            },
        );
        functions.insert(
            ACCESS_RULES_SET_GROUP_MUTABILITY_IDENT.to_string(),
            FunctionSchema {
                receiver: Some(schema::Receiver::SelfRefMut),
                input: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetGroupMutabilityInput>(),
                output: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetGroupMutabilityOutput>(),
                export_name: ACCESS_RULES_SET_GROUP_MUTABILITY_IDENT.to_string(),
            },
        );

        let event_schema = event_schema! {
            aggregator,
            [
                SetRuleEvent,
                SetMutabilityEvent
            ]
        };

        let schema = generate_full_schema(aggregator);
        PackageSchema {
            blueprints: btreemap!(
                ACCESS_RULES_BLUEPRINT.to_string() => BlueprintSchema {
                    outer_blueprint: None,
                    schema,
                    fields,
                    collections: vec![],
                    functions,
                    virtual_lazy_load_functions: btreemap!(),
                    event_schema
                }
            ),
        }
    }

    pub fn authorization<Y: KernelApi<M>, M: KernelCallbackObject>(
        node_id: &NodeId,
        ident: &str,
        input: &IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<AccessRule, RuntimeError> {
        let access_rule = match ident {
            ACCESS_RULES_SET_GROUP_ACCESS_RULE_AND_MUTABILITY_IDENT => {
                let input: AccessRulesSetGroupAccessRuleAndMutabilityInput =
                    input.as_typed().map_err(|e| {
                        RuntimeError::SystemUpstreamError(SystemUpstreamError::InputDecodeError(e))
                    })?;

                Self::group_mutability_authorization(
                    node_id,
                    input.object_key,
                    input.name.as_str(),
                    api,
                )?
            }
            ACCESS_RULES_SET_GROUP_ACCESS_RULE_IDENT => {
                let input: AccessRulesSetGroupAccessRuleInput = input.as_typed().map_err(|e| {
                    RuntimeError::SystemUpstreamError(SystemUpstreamError::InputDecodeError(e))
                })?;
                Self::group_mutability_authorization(
                    node_id,
                    input.object_key,
                    input.name.as_str(),
                    api,
                )?
            }
            ACCESS_RULES_SET_GROUP_MUTABILITY_IDENT => {
                let input: AccessRulesSetGroupMutabilityInput = input.as_typed().map_err(|e| {
                    RuntimeError::SystemUpstreamError(SystemUpstreamError::InputDecodeError(e))
                })?;
                Self::group_mutability_authorization(
                    node_id,
                    input.object_key,
                    input.name.as_str(),
                    api,
                )?
            }
            _ => AccessRule::AllowAll,
        };

        Ok(access_rule)
    }

    pub fn function_access_rules() -> BTreeMap<FnKey, AccessRule> {
        let mut access_rules = BTreeMap::new();
        access_rules.insert(
            FnKey::new(
                ACCESS_RULES_BLUEPRINT.to_string(),
                ACCESS_RULES_CREATE_IDENT.to_string(),
            ),
            rule!(allow_all),
        );
        access_rules
    }

    pub fn invoke_export<Y>(
        export_name: &str,
        receiver: Option<&NodeId>,
        input: &IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        match export_name {
            ACCESS_RULES_CREATE_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                if receiver.is_some() {
                    return Err(RuntimeError::SystemUpstreamError(
                        SystemUpstreamError::NativeUnexpectedReceiver(export_name.to_string()),
                    ));
                }

                let input: AccessRulesCreateInput = input.as_typed().map_err(|e| {
                    RuntimeError::SystemUpstreamError(SystemUpstreamError::InputDecodeError(e))
                })?;

                let rtn = Self::create(input.access_rules, input.child_blueprint_rules, api)?;
                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            ACCESS_RULES_SET_GROUP_ACCESS_RULE_AND_MUTABILITY_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let input: AccessRulesSetGroupAccessRuleAndMutabilityInput =
                    input.as_typed().map_err(|e| {
                        RuntimeError::SystemUpstreamError(SystemUpstreamError::InputDecodeError(e))
                    })?;
                let rtn = Self::set_group_access_rule_and_mutability(
                    input.object_key,
                    input.name,
                    input.rule,
                    input.mutability,
                    api,
                )?;
                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            ACCESS_RULES_SET_GROUP_ACCESS_RULE_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let input: AccessRulesSetGroupAccessRuleInput = input.as_typed().map_err(|e| {
                    RuntimeError::SystemUpstreamError(SystemUpstreamError::InputDecodeError(e))
                })?;

                let rtn =
                    Self::set_group_access_rule(input.object_key, input.name, input.rule, api)?;
                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            ACCESS_RULES_SET_GROUP_MUTABILITY_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let input: AccessRulesSetGroupMutabilityInput = input.as_typed().map_err(|e| {
                    RuntimeError::SystemUpstreamError(SystemUpstreamError::InputDecodeError(e))
                })?;

                let rtn = Self::set_group_mutability(
                    input.object_key,
                    input.name,
                    input.mutability,
                    api,
                )?;
                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            _ => Err(RuntimeError::SystemUpstreamError(
                SystemUpstreamError::NativeExportDoesNotExist(export_name.to_string()),
            )),
        }
    }

    fn group_mutability_authorization<Y, L: Default>(
        receiver: &NodeId,
        object_key: ObjectKey,
        name: &str,
        api: &mut Y,
    ) -> Result<AccessRule, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi<L>,
    {
        let handle = api.kernel_lock_substate(
            receiver,
            ACCESS_RULES_FIELD_PARTITION,
            &AccessRulesField::AccessRules.into(),
            LockFlags::read_only(),
            L::default(),
        )?;

        let access_rule = {
            let access_rules_substate: MethodAccessRulesSubstate =
                api.kernel_read_substate(handle)?.as_typed().unwrap();
            access_rules_substate.group_mutability_authorization(&object_key, name)
        };

        api.kernel_drop_lock(handle)?;

        Ok(access_rule)
    }

    pub(crate) fn create<Y>(
        mut access_rules: AccessRulesConfig,
        mut child_blueprint_rules: BTreeMap<String, AccessRulesConfig>,
        api: &mut Y,
    ) -> Result<Own, RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        // Set default access rules for Metadata Get
        access_rules.set_group_access_rule_and_mutability("public", AccessRule::AllowAll, AccessRule::DenyAll);
        for (_blueprint, config) in &mut child_blueprint_rules {
            config.set_group_access_rule_and_mutability("public", AccessRule::AllowAll, AccessRule::DenyAll);
        }

        access_rules.set_public(
            MethodKey::new(ObjectModuleId::Metadata, METADATA_GET_IDENT));
        access_rules.set_group(
            MethodKey::new(ObjectModuleId::Metadata, METADATA_SET_IDENT),
            "update_metadata",
        );

        access_rules.set_group(
            MethodKey::new(
                ObjectModuleId::Royalty,
                COMPONENT_ROYALTY_SET_ROYALTY_CONFIG_IDENT,
            ),
            "royalty",
        );
        access_rules.set_group(
            MethodKey::new(
                ObjectModuleId::Royalty,
                COMPONENT_ROYALTY_CLAIM_ROYALTY_IDENT,
            ),
            "royalty",
        );

        let substate = MethodAccessRulesSubstate {
            access_rules,
            child_blueprint_rules,
        };

        let component_id = api.new_simple_object(
            ACCESS_RULES_BLUEPRINT,
            vec![scrypto_encode(&substate).unwrap()],
        )?;

        Ok(Own(component_id))
    }

    pub(crate) fn set_group_access_rule<Y>(
        object_key: ObjectKey,
        name: String,
        rule: AccessRuleEntry,
        api: &mut Y,
    ) -> Result<(), RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        Self::set_group_access_rule_and_mutability_internal(object_key, name, Some(rule), None, api)
    }

    pub(crate) fn set_group_mutability<Y>(
        object_key: ObjectKey,
        name: String,
        mutability: AccessRule,
        api: &mut Y,
    ) -> Result<(), RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        Self::set_group_access_rule_and_mutability_internal(
            object_key,
            name,
            None,
            Some(mutability),
            api,
        )
    }

    pub(crate) fn set_group_access_rule_and_mutability<Y>(
        object_key: ObjectKey,
        name: String,
        rule: AccessRuleEntry,
        mutability: AccessRule,
        api: &mut Y,
    ) -> Result<(), RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        Self::set_group_access_rule_and_mutability_internal(
            object_key,
            name,
            Some(rule),
            Some(mutability),
            api,
        )
    }

    fn set_group_access_rule_and_mutability_internal<Y>(
        object_key: ObjectKey,
        name: String,
        rule: Option<AccessRuleEntry>,
        mutability: Option<AccessRule>,
        api: &mut Y,
    ) -> Result<(), RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        let handle = api.actor_lock_field(
            OBJECT_HANDLE_SELF,
            AccessRulesField::AccessRules.into(),
            LockFlags::MUTABLE,
        )?;

        let mut access_rules_substate: MethodAccessRulesSubstate =
            api.field_lock_read_typed(handle)?;
        let access_rules = match object_key {
            ObjectKey::SELF => &mut access_rules_substate.access_rules,
            ObjectKey::ChildBlueprint(blueprint_name) => access_rules_substate
                .child_blueprint_rules
                .get_mut(&blueprint_name)
                .unwrap(),
        };
        if let Some(rule) = &rule {
            access_rules.set_group_access_rule(name.clone(), rule.clone());
        }
        if let Some(mutability) = &mutability {
            access_rules.set_group_mutability(name.clone(), mutability.clone());
        }
        api.field_lock_write_typed(handle, &access_rules_substate)?;

        if let Some(rule) = rule {
            Runtime::emit_event(
                api,
                SetRuleEvent::Group {
                    name: name.clone(),
                    rule,
                },
            )?;
        }
        if let Some(mutability) = mutability {
            Runtime::emit_event(
                api,
                SetMutabilityEvent::Group {
                    name: name.clone(),
                    mutability,
                },
            )?;
        }

        Ok(())
    }
}
