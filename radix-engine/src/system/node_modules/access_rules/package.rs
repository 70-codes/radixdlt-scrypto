use crate::kernel::kernel_api::KernelSubstateApi;
use crate::system::system_modules::auth::AuthError;
use crate::system::system_modules::costing::FIXED_LOW_FEE;
use crate::types::*;
use crate::{errors::*, event_schema};
use native_sdk::runtime::Runtime;
use radix_engine_interface::api::field_lock_api::LockFlags;
use radix_engine_interface::api::node_modules::auth::*;
use radix_engine_interface::api::node_modules::metadata::METADATA_SET_IDENT;
use radix_engine_interface::api::node_modules::royalty::{
    COMPONENT_ROYALTY_CLAIM_ROYALTY_IDENT, COMPONENT_ROYALTY_SET_ROYALTY_CONFIG_IDENT,
};
use radix_engine_interface::api::{ClientApi, ObjectModuleId, OBJECT_HANDLE_SELF};
use radix_engine_interface::blueprints::resource::*;
use radix_engine_interface::schema::{BlueprintSchema, FunctionSchema, PackageSchema};
use radix_engine_interface::types::*;

use super::{SetMutabilityEvent, SetRuleEvent};

#[derive(Debug, Clone, Eq, PartialEq, ScryptoSbor)]
pub enum AccessRulesChainError {
    BlueprintFunctionNotFound(String),
    ProtectedMethod(MethodKey),
}

#[derive(Debug, Clone, PartialEq, Eq, ScryptoSbor)]
pub struct FunctionAccessRulesSubstate {
    pub access_rules: BTreeMap<FnKey, AccessRule>,
    pub default_auth: AccessRule,
}

#[derive(Debug, Clone, PartialEq, Eq, ScryptoSbor)]
pub struct MethodAccessRulesSubstate {
    pub access_rules: NodeAuthorityRules,
    pub inner_blueprint_access_rules: BTreeMap<String, NodeAuthorityRules>,
}

impl MethodAccessRulesSubstate {
    pub fn authority_mutability_access_rule(
        &self,
        object_key: &ObjectKey,
        authority_key: &AuthorityKey,
    ) -> AccessRule {
        match object_key {
            ObjectKey::SELF => self.access_rules.get_authority_mutability(authority_key),
            ObjectKey::InnerBlueprint(blueprint_name) => {
                if let Some(config) = self.inner_blueprint_access_rules.get(blueprint_name) {
                    config.get_authority_mutability(authority_key)
                } else {
                    AccessRule::DenyAll
                }
            }
        }
    }
}

#[derive(Debug, Clone, PartialEq, Eq, ScryptoSbor, ManifestSbor)]
pub enum CycleCheckError<S> {
    CycleFound(S),
    MissingAuthority(S),
    OwnerAuthorityHasReferences,
}

pub trait CycleCheck<S: sbor::rust::hash::Hash + PartialEq + Eq + Clone> {
    fn get_references(&self, authority: &S) -> Result<IndexSet<S>, CycleCheckError<S>>;

    fn cycle_check(
        &self,
        node: &S,
        visited: &mut IndexSet<S>,
        stack: &mut IndexSet<S>,
    ) -> Result<(), CycleCheckError<S>> {
        if stack.contains(node) {
            return Err(CycleCheckError::CycleFound(node.clone()));
        }

        if visited.contains(node) {
            return Ok(());
        }

        visited.insert(node.clone());
        stack.insert(node.clone());

        let referenced = self.get_references(node)?;

        for ref_authority in referenced {
            self.cycle_check(&ref_authority, visited, stack)?;
        }

        stack.remove(node);

        Ok(())
    }
}

/// Method authorization rules for a component
#[derive(Debug, Clone, PartialEq, Eq, ScryptoSbor, ManifestSbor)]
pub struct NodeAuthorityRules {
    pub methods: BTreeMap<MethodKey, MethodEntry>,
    pub rules: BTreeMap<AuthorityKey, AccessRule>,
    pub mutability: BTreeMap<AuthorityKey, AccessRule>,
}

impl NodeAuthorityRules {
    pub fn get_rule(&self, authority: &AuthorityKey) -> Option<&AccessRule> {
        self.rules.get(authority)
    }
}

impl CycleCheck<AuthorityKey> for NodeAuthorityRules {
    fn get_references(
        &self,
        authority: &AuthorityKey,
    ) -> Result<IndexSet<AuthorityKey>, CycleCheckError<AuthorityKey>> {
        let mut references = index_set_new();
        if let Some(access_rule) = self.rules.get(authority) {
            access_rule.get_referenced_authorities(&mut references);
        } else {
            return Err(CycleCheckError::MissingAuthority(authority.clone()));
        }
        if let Some(access_rule) = self.mutability.get(authority) {
            access_rule.get_referenced_authorities(&mut references);
        }

        match authority {
            AuthorityKey::Owner => {
                if !references.is_empty() {
                    return Err(CycleCheckError::OwnerAuthorityHasReferences);
                }
                Ok(index_set_new())
            }
            AuthorityKey::Module(module_id, ..) => {
                let references = references
                    .into_iter()
                    .map(|rule| AuthorityKey::from_access_rule(module_id.clone(), rule))
                    .collect();
                Ok(references)
            }
        }
    }
}

impl CycleCheck<AuthorityKey> for AuthorityRules {
    fn get_references(
        &self,
        authority: &AuthorityKey,
    ) -> Result<IndexSet<AuthorityKey>, CycleCheckError<AuthorityKey>> {
        let referenced = if let Some((access, mutability)) = self.rules.get(authority) {
            let mut referenced = index_set_new();
            access.get_referenced_authorities(&mut referenced);
            mutability.get_referenced_authorities(&mut referenced);

            referenced
        } else {
            return Err(CycleCheckError::MissingAuthority(authority.clone()));
        };

        match authority {
            AuthorityKey::Owner => {
                if !referenced.is_empty() {
                    return Err(CycleCheckError::OwnerAuthorityHasReferences);
                }
                Ok(index_set_new())
            }
            AuthorityKey::Module(module_id, ..) => {
                let referenced = referenced
                    .into_iter()
                    .map(|rule| AuthorityKey::from_access_rule(module_id.clone(), rule))
                    .collect();
                Ok(referenced)
            }
        }
    }
}

impl NodeAuthorityRules {
    pub fn new() -> Self {
        Self {
            methods: BTreeMap::new(),
            rules: BTreeMap::new(),
            mutability: BTreeMap::new(),
        }
    }

    fn create(
        inner_blueprint: bool,
        mut method_authorities: MethodAuthorities,
        mut authority_rules: AuthorityRules,
    ) -> Result<Self, CycleCheckError<AuthorityKey>> {
        if !inner_blueprint {
            // Set predefined authorities
            method_authorities.set_module_method_authority(
                ObjectModuleId::Metadata,
                METADATA_SET_IDENT,
                METADATA_AUTHORITY,
            );
            method_authorities.set_module_method_authority(
                ObjectModuleId::Royalty,
                COMPONENT_ROYALTY_SET_ROYALTY_CONFIG_IDENT,
                ROYALTY_AUTHORITY,
            );
            method_authorities.set_module_method_authority(
                ObjectModuleId::Royalty,
                COMPONENT_ROYALTY_CLAIM_ROYALTY_IDENT,
                ROYALTY_AUTHORITY,
            );

            // Predefined rules
            // TODO: virtualize this state
            if !authority_rules.rules.contains_key(&AuthorityKey::Owner) {
                authority_rules.set_owner_rule(AccessRule::DenyAll, AccessRule::DenyAll)
            }

            let metadata_authority = AuthorityKey::metadata(METADATA_AUTHORITY);
            if !authority_rules.rules.contains_key(&metadata_authority) {
                authority_rules.set_rule(
                    metadata_authority,
                    rule!(require_owner()),
                    rule!(require_owner()),
                );
            }
            let royalty_authority = AuthorityKey::royalty(ROYALTY_AUTHORITY);
            if !authority_rules.rules.contains_key(&royalty_authority) {
                authority_rules.set_rule(
                    royalty_authority,
                    rule!(require_owner()),
                    rule!(require_owner()),
                );
            }
        }

        let mut visited = index_set_new();
        let mut stack = index_set_new();
        for authority in authority_rules.rules.keys() {
            authority_rules.cycle_check(authority, &mut visited, &mut stack)?;
        }

        let methods = method_authorities.methods;
        let mut rules = BTreeMap::new();
        let mut mutability = BTreeMap::new();
        for (authority, (rule, mutability_rule)) in authority_rules.rules {
            rules.insert(authority.clone(), rule);
            mutability.insert(authority, mutability_rule);
        }

        Ok(Self {
            methods,
            rules,
            mutability,
        })
    }

    pub fn get_authority_mutability(&self, key: &AuthorityKey) -> AccessRule {
        match self.mutability.get(&key) {
            None => AccessRule::DenyAll,
            Some(entry) => entry.clone(),
        }
    }

    pub fn set_authority_access_rule<E: Into<AccessRule>>(
        &mut self,
        authority_key: AuthorityKey,
        access_rule_entry: E,
    ) -> Result<(), CycleCheckError<AuthorityKey>> {
        self.rules
            .insert(authority_key.clone(), access_rule_entry.into());

        let mut visited = index_set_new();
        let mut stack = index_set_new();
        self.cycle_check(&authority_key, &mut visited, &mut stack)?;

        Ok(())
    }

    pub fn set_authority_mutability<M: Into<AccessRule>>(
        &mut self,
        authority_key: AuthorityKey,
        access_rule: M,
    ) -> Result<(), CycleCheckError<AuthorityKey>> {
        self.mutability
            .insert(authority_key.clone(), access_rule.into());

        let mut visited = index_set_new();
        let mut stack = index_set_new();
        self.cycle_check(&authority_key, &mut visited, &mut stack)?;

        Ok(())
    }
}

pub struct AccessRulesNativePackage;

impl AccessRulesNativePackage {
    pub fn schema() -> PackageSchema {
        let mut aggregator = TypeAggregator::<ScryptoCustomTypeKind>::new();

        let mut fields = Vec::new();
        fields.push(aggregator.add_child_type_and_descendents::<MethodAccessRulesSubstate>());

        let mut functions = BTreeMap::new();
        functions.insert(
            ACCESS_RULES_CREATE_IDENT.to_string(),
            FunctionSchema {
                receiver: None,
                input: aggregator.add_child_type_and_descendents::<AccessRulesCreateInput>(),
                output: aggregator.add_child_type_and_descendents::<AccessRulesCreateOutput>(),
                export_name: ACCESS_RULES_CREATE_IDENT.to_string(),
            },
        );
        functions.insert(
            ACCESS_RULES_SET_AUTHORITY_RULE_AND_MUTABILITY_IDENT.to_string(),
            FunctionSchema {
                receiver: Some(schema::ReceiverInfo::normal_ref_mut()),
                input: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetAuthorityRuleAndMutabilityInput>(),
                output: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetAuthorityRuleAndMutabilityOutput>(),
                export_name: ACCESS_RULES_SET_AUTHORITY_RULE_AND_MUTABILITY_IDENT.to_string(),
            },
        );
        functions.insert(
            ACCESS_RULES_SET_AUTHORITY_RULE_IDENT.to_string(),
            FunctionSchema {
                receiver: Some(schema::ReceiverInfo::normal_ref_mut()),
                input: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetAuthorityRuleInput>(),
                output: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetAuthorityRuleOutput>(),
                export_name: ACCESS_RULES_SET_AUTHORITY_RULE_IDENT.to_string(),
            },
        );
        functions.insert(
            ACCESS_RULES_SET_AUTHORITY_MUTABILITY_IDENT.to_string(),
            FunctionSchema {
                receiver: Some(schema::ReceiverInfo::normal_ref_mut()),
                input: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetAuthorityMutabilityInput>(),
                output: aggregator
                    .add_child_type_and_descendents::<AccessRulesSetAuthorityMutabilityOutput>(),
                export_name: ACCESS_RULES_SET_AUTHORITY_MUTABILITY_IDENT.to_string(),
            },
        );

        let event_schema = event_schema! {
            aggregator,
            [
                SetRuleEvent,
                SetMutabilityEvent
            ]
        };

        let schema = generate_full_schema(aggregator);
        PackageSchema {
            blueprints: btreemap!(
                ACCESS_RULES_BLUEPRINT.to_string() => BlueprintSchema {
                    outer_blueprint: None,
                    schema,
                    fields,
                    collections: vec![],
                    functions,
                    virtual_lazy_load_functions: btreemap!(),
                    event_schema
                }
            ),
        }
    }

    pub fn authorization<Y: KernelSubstateApi<L>, L: Default>(
        node_id: &NodeId,
        ident: &str,
        input: &IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<AccessRule, RuntimeError> {
        let access_rule = match ident {
            ACCESS_RULES_SET_AUTHORITY_RULE_AND_MUTABILITY_IDENT => {
                let input: AccessRulesSetAuthorityRuleAndMutabilityInput =
                    input.as_typed().map_err(|e| {
                        RuntimeError::SystemUpstreamError(SystemUpstreamError::InputDecodeError(e))
                    })?;

                Self::authority_mutability_authorization(
                    node_id,
                    input.object_key,
                    &input.authority_key,
                    api,
                )?
            }
            ACCESS_RULES_SET_AUTHORITY_RULE_IDENT => {
                let input: AccessRulesSetAuthorityRuleInput = input.as_typed().map_err(|e| {
                    RuntimeError::SystemUpstreamError(SystemUpstreamError::InputDecodeError(e))
                })?;
                Self::authority_mutability_authorization(
                    node_id,
                    input.object_key,
                    &input.authority_key,
                    api,
                )?
            }
            ACCESS_RULES_SET_AUTHORITY_MUTABILITY_IDENT => {
                let input: AccessRulesSetAuthorityMutabilityInput =
                    input.as_typed().map_err(|e| {
                        RuntimeError::SystemUpstreamError(SystemUpstreamError::InputDecodeError(e))
                    })?;
                Self::authority_mutability_authorization(
                    node_id,
                    input.object_key,
                    &input.authority_key,
                    api,
                )?
            }
            _ => AccessRule::AllowAll,
        };

        Ok(access_rule)
    }

    pub fn function_access_rules() -> BTreeMap<FnKey, AccessRule> {
        let mut access_rules = BTreeMap::new();
        access_rules.insert(
            FnKey::new(
                ACCESS_RULES_BLUEPRINT.to_string(),
                ACCESS_RULES_CREATE_IDENT.to_string(),
            ),
            rule!(allow_all),
        );
        access_rules
    }

    pub fn invoke_export<Y>(
        export_name: &str,
        receiver: Option<&NodeId>,
        input: &IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        match export_name {
            ACCESS_RULES_CREATE_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                if receiver.is_some() {
                    return Err(RuntimeError::SystemUpstreamError(
                        SystemUpstreamError::NativeUnexpectedReceiver(export_name.to_string()),
                    ));
                }

                let input: AccessRulesCreateInput = input.as_typed().map_err(|e| {
                    RuntimeError::SystemUpstreamError(SystemUpstreamError::InputDecodeError(e))
                })?;

                let rtn = Self::create(
                    input.method_authorities,
                    input.authority_rules,
                    input.inner_blueprint_rules,
                    api,
                )?;
                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            ACCESS_RULES_SET_AUTHORITY_RULE_AND_MUTABILITY_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let input: AccessRulesSetAuthorityRuleAndMutabilityInput =
                    input.as_typed().map_err(|e| {
                        RuntimeError::SystemUpstreamError(SystemUpstreamError::InputDecodeError(e))
                    })?;
                let rtn = Self::set_authority_access_rule_and_mutability(
                    input.object_key,
                    input.authority_key,
                    input.rule,
                    input.mutability,
                    api,
                )?;
                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            ACCESS_RULES_SET_AUTHORITY_RULE_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let input: AccessRulesSetAuthorityRuleInput = input.as_typed().map_err(|e| {
                    RuntimeError::SystemUpstreamError(SystemUpstreamError::InputDecodeError(e))
                })?;

                let rtn = Self::set_authority_access_rule(
                    input.object_key,
                    input.authority_key,
                    input.rule,
                    api,
                )?;
                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            ACCESS_RULES_SET_AUTHORITY_MUTABILITY_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let input: AccessRulesSetAuthorityMutabilityInput =
                    input.as_typed().map_err(|e| {
                        RuntimeError::SystemUpstreamError(SystemUpstreamError::InputDecodeError(e))
                    })?;

                let rtn = Self::set_authority_mutability(
                    input.object_key,
                    input.authority_key,
                    input.mutability,
                    api,
                )?;
                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            _ => Err(RuntimeError::SystemUpstreamError(
                SystemUpstreamError::NativeExportDoesNotExist(export_name.to_string()),
            )),
        }
    }

    fn authority_mutability_authorization<Y, L: Default>(
        receiver: &NodeId,
        object_key: ObjectKey,
        authority_key: &AuthorityKey,
        api: &mut Y,
    ) -> Result<AccessRule, RuntimeError>
    where
        Y: KernelSubstateApi<L>,
    {
        let handle = api.kernel_lock_substate(
            receiver,
            ACCESS_RULES_FIELD_PARTITION,
            &AccessRulesField::AccessRules.into(),
            LockFlags::read_only(),
            L::default(),
        )?;

        let access_rule = {
            let access_rules_substate: MethodAccessRulesSubstate =
                api.kernel_read_substate(handle)?.as_typed().unwrap();
            access_rules_substate.authority_mutability_access_rule(&object_key, authority_key)
        };

        api.kernel_drop_lock(handle)?;

        Ok(access_rule)
    }

    pub(crate) fn create<Y>(
        method_authorities: MethodAuthorities,
        authority_rules: AuthorityRules,
        child_blueprint_rules: BTreeMap<String, (MethodAuthorities, AuthorityRules)>,
        api: &mut Y,
    ) -> Result<Own, RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        let access_rules = NodeAuthorityRules::create(false, method_authorities, authority_rules)
            .map_err(|e| {
            RuntimeError::ModuleError(ModuleError::AuthError(AuthError::CycleCheckError(e)))
        })?;

        let mut inner_blueprint_access_rules = BTreeMap::new();
        for (blueprint, (method_authorities, authority_rules)) in child_blueprint_rules {
            let inner_access_rules = NodeAuthorityRules::create(
                true,
                method_authorities,
                authority_rules,
            )
            .map_err(|e| {
                RuntimeError::ModuleError(ModuleError::AuthError(AuthError::CycleCheckError(e)))
            })?;
            inner_blueprint_access_rules.insert(blueprint, inner_access_rules);
        }

        let substate = MethodAccessRulesSubstate {
            access_rules,
            inner_blueprint_access_rules,
        };

        let component_id = api.new_simple_object(
            ACCESS_RULES_BLUEPRINT,
            vec![scrypto_encode(&substate).unwrap()],
        )?;

        Ok(Own(component_id))
    }

    pub(crate) fn set_authority_access_rule<Y>(
        object_key: ObjectKey,
        authority_key: AuthorityKey,
        rule: AccessRule,
        api: &mut Y,
    ) -> Result<(), RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        Self::set_authority_access_rule_and_mutability_internal(
            object_key,
            authority_key,
            Some(rule),
            None,
            api,
        )
    }

    pub(crate) fn set_authority_mutability<Y>(
        object_key: ObjectKey,
        authority_key: AuthorityKey,
        mutability: AccessRule,
        api: &mut Y,
    ) -> Result<(), RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        Self::set_authority_access_rule_and_mutability_internal(
            object_key,
            authority_key,
            None,
            Some(mutability),
            api,
        )
    }

    pub(crate) fn set_authority_access_rule_and_mutability<Y>(
        object_key: ObjectKey,
        authority_key: AuthorityKey,
        rule: AccessRule,
        mutability: AccessRule,
        api: &mut Y,
    ) -> Result<(), RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        Self::set_authority_access_rule_and_mutability_internal(
            object_key,
            authority_key,
            Some(rule),
            Some(mutability),
            api,
        )
    }

    fn set_authority_access_rule_and_mutability_internal<Y>(
        object_key: ObjectKey,
        authority_key: AuthorityKey,
        rule: Option<AccessRule>,
        mutability: Option<AccessRule>,
        api: &mut Y,
    ) -> Result<(), RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        let handle = api.actor_lock_field(
            OBJECT_HANDLE_SELF,
            AccessRulesField::AccessRules.into(),
            LockFlags::MUTABLE,
        )?;

        let mut access_rules_substate: MethodAccessRulesSubstate =
            api.field_lock_read_typed(handle)?;
        let access_rules = match object_key {
            ObjectKey::SELF => &mut access_rules_substate.access_rules,
            ObjectKey::InnerBlueprint(blueprint_name) => access_rules_substate
                .inner_blueprint_access_rules
                .get_mut(&blueprint_name)
                .unwrap(),
        };
        if let Some(rule) = &rule {
            access_rules
                .set_authority_access_rule(authority_key.clone(), rule.clone())
                .map_err(|cycle| {
                    RuntimeError::ModuleError(ModuleError::AuthError(AuthError::CycleCheckError(
                        cycle,
                    )))
                })?;
        }
        if let Some(mutability) = &mutability {
            access_rules
                .set_authority_mutability(authority_key.clone(), mutability.clone())
                .map_err(|cycle| {
                    RuntimeError::ModuleError(ModuleError::AuthError(AuthError::CycleCheckError(
                        cycle,
                    )))
                })?;
        }
        api.field_lock_write_typed(handle, &access_rules_substate)?;

        if let Some(rule) = rule {
            Runtime::emit_event(
                api,
                SetRuleEvent {
                    authority_key: authority_key.clone(),
                    rule,
                },
            )?;
        }
        if let Some(mutability) = mutability {
            Runtime::emit_event(
                api,
                SetMutabilityEvent {
                    authority_key: authority_key.clone(),
                    mutability,
                },
            )?;
        }

        Ok(())
    }
}
