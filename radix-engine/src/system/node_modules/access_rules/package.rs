use crate::errors::*;
use crate::kernel::kernel_api::{KernelNodeApi, KernelSubstateApi};
use crate::system::kernel_modules::auth::{convert_contextless, MethodAuthorization};
use crate::system::kernel_modules::costing::FIXED_LOW_FEE;
use crate::system::node::RENodeInit;
use crate::types::*;
use native_sdk::runtime::Runtime;
use radix_engine_interface::api::node_modules::auth::*;
use radix_engine_interface::api::substate_api::LockFlags;
use radix_engine_interface::api::types::{RENodeId, SubstateOffset};
use radix_engine_interface::api::unsafe_api::ClientCostingReason;
use radix_engine_interface::api::ClientApi;
use radix_engine_interface::blueprints::resource::*;
use radix_engine_interface::data::scrypto::ScryptoValue;

use super::{SetMutabilityEvent, SetRuleEvent};

#[derive(Debug, Clone, Eq, PartialEq, ScryptoSbor)]
pub enum AccessRulesChainError {
    BlueprintFunctionNotFound(String),
    ProtectedMethod(MethodKey),
}

/// A transient resource container.
#[derive(Debug, Clone, PartialEq, Eq, ScryptoSbor)]
pub struct FunctionAccessRulesSubstate {
    pub access_rules: BTreeMap<FnKey, AccessRule>,
    pub default_auth: AccessRule,
}

/// A transient resource container.
#[derive(Debug, Clone, PartialEq, Eq, ScryptoSbor)]
pub struct MethodAccessRulesSubstate {
    pub access_rules: AccessRules,
}

impl MethodAccessRulesSubstate {
    pub fn method_mutability_authorization(&self, key: &MethodKey) -> MethodAuthorization {
        let method_auth = self.access_rules.get_mutability(key);
        // TODO: Remove
        convert_contextless(method_auth)
    }

    pub fn group_mutability_authorization(&self, name: &str) -> MethodAuthorization {
        let group_auth = self.access_rules.get_group_mutability(name);
        // TODO: Remove
        convert_contextless(group_auth)
    }
}

pub struct AccessRulesNativePackage;
impl AccessRulesNativePackage {
    pub fn function_access_rules() -> BTreeMap<FnKey, AccessRule> {
        let mut access_rules = BTreeMap::new();
        access_rules.insert(
            FnKey::new(
                ACCESS_RULES_BLUEPRINT.to_string(),
                ACCESS_RULES_CREATE_IDENT.to_string(),
            ),
            rule!(allow_all),
        );
        access_rules
    }

    pub fn invoke_export<Y>(
        export_name: &str,
        receiver: Option<RENodeId>,
        input: ScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        match export_name {
            ACCESS_RULES_CREATE_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                if receiver.is_some() {
                    return Err(RuntimeError::InterpreterError(
                        InterpreterError::NativeUnexpectedReceiver(export_name.to_string()),
                    ));
                }

                Self::create(input, api)
            }
            ACCESS_RULES_SET_METHOD_ACCESS_RULE_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                Self::set_method_access_rule(receiver, input, api)
            }
            ACCESS_RULES_SET_METHOD_MUTABILITY_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                Self::set_method_mutability(receiver, input, api)
            }
            ACCESS_RULES_SET_GROUP_ACCESS_RULE_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                Self::set_group_access_rule(receiver, input, api)
            }
            ACCESS_RULES_SET_GROUP_MUTABILITY_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                Self::set_group_mutability(receiver, input, api)
            }
            _ => Err(RuntimeError::InterpreterError(
                InterpreterError::NativeExportDoesNotExist(export_name.to_string()),
            )),
        }
    }

    fn group_mutability_authorization<Y>(
        receiver: RENodeId,
        module_id: NodeModuleId,
        name: &str,
        api: &mut Y,
    ) -> Result<MethodAuthorization, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi,
    {
        let handle = api.kernel_lock_substate(
            receiver,
            module_id,
            SubstateOffset::AccessRules(AccessRulesOffset::AccessRules),
            LockFlags::read_only(),
        )?;

        let authorization = {
            let access_rules_substate: &MethodAccessRulesSubstate =
                api.kernel_get_substate_ref(handle)?;
            access_rules_substate.group_mutability_authorization(name)
        };

        api.kernel_drop_lock(handle)?;

        Ok(authorization)
    }

    fn method_mutability_authorization<Y>(
        receiver: RENodeId,
        module_id: NodeModuleId,
        key: MethodKey,
        api: &mut Y,
    ) -> Result<MethodAuthorization, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi,
    {
        let authorization = if key.node_module_id.eq(&NodeModuleId::AccessRules)
            || key.node_module_id.eq(&NodeModuleId::AccessRules1)
        {
            // Should we just store this on ledger?
            MethodAuthorization::DenyAll
        } else {
            let handle = api.kernel_lock_substate(
                receiver,
                module_id,
                SubstateOffset::AccessRules(AccessRulesOffset::AccessRules),
                LockFlags::read_only(),
            )?;

            let authorization = {
                let access_rules_substate: &MethodAccessRulesSubstate =
                    api.kernel_get_substate_ref(handle)?;
                access_rules_substate.method_mutability_authorization(&key)
            };

            api.kernel_drop_lock(handle)?;

            authorization
        };

        Ok(authorization)
    }

    pub(crate) fn create<Y>(
        input: ScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let input: AccessRulesCreateInput = scrypto_decode(&scrypto_encode(&input).unwrap())
            .map_err(|_| RuntimeError::InterpreterError(InterpreterError::InvalidInvocation))?;

        let node_id = api.kernel_allocate_node_id(RENodeType::Component)?;
        api.kernel_create_node(
            node_id,
            RENodeInit::AccessRules(MethodAccessRulesSubstate {
                access_rules: input.access_rules,
            }),
            BTreeMap::new(),
        )?;

        Ok(IndexedScryptoValue::from_typed(&Own::Component(
            node_id.into(),
        )))
    }

    pub(crate) fn set_method_access_rule_authorization<Y>(
        receiver: RENodeId,
        module_id: NodeModuleId,
        args: &ScryptoValue,
        api: &mut Y,
    ) -> Result<MethodAuthorization, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi,
    {
        // TODO: Remove encode/decode mess
        let input: AccessRulesSetMethodAccessRuleInput =
            scrypto_decode(&scrypto_encode(args).unwrap())
                .map_err(|_| RuntimeError::InterpreterError(InterpreterError::InvalidInvocation))?;

        Self::method_mutability_authorization(receiver, module_id, input.key, api)
    }

    pub(crate) fn set_method_access_rule<Y>(
        receiver: RENodeId,
        input: ScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let input: AccessRulesSetMethodAccessRuleInput =
            scrypto_decode(&scrypto_encode(&input).unwrap())
                .map_err(|_| RuntimeError::InterpreterError(InterpreterError::InvalidInvocation))?;

        let handle = api.sys_lock_substate(
            receiver,
            SubstateOffset::AccessRules(AccessRulesOffset::AccessRules),
            LockFlags::MUTABLE,
        )?;

        let access_rules_substate: &mut MethodAccessRulesSubstate =
            api.kernel_get_substate_ref_mut(handle)?;
        let access_rules = &mut access_rules_substate.access_rules;
        access_rules.set_method_access_rule(input.key.clone(), input.rule.clone());

        Runtime::emit_event(
            api,
            SetRuleEvent::Method {
                key: input.key,
                rule: input.rule,
            },
        )?;

        Ok(IndexedScryptoValue::from_typed(&()))
    }

    pub(crate) fn set_group_access_rule_authorization<Y>(
        receiver: RENodeId,
        module_id: NodeModuleId,
        args: &ScryptoValue,
        api: &mut Y,
    ) -> Result<MethodAuthorization, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi,
    {
        // TODO: Remove encode/decode mess
        let input: AccessRulesSetGroupAccessRuleInput =
            scrypto_decode(&scrypto_encode(&args).unwrap())
                .map_err(|_| RuntimeError::InterpreterError(InterpreterError::InvalidInvocation))?;

        Self::group_mutability_authorization(receiver, module_id, input.name.as_str(), api)
    }

    pub(crate) fn set_group_access_rule<Y>(
        receiver: RENodeId,
        input: ScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let input: AccessRulesSetGroupAccessRuleInput =
            scrypto_decode(&scrypto_encode(&input).unwrap())
                .map_err(|_| RuntimeError::InterpreterError(InterpreterError::InvalidInvocation))?;

        let handle = api.sys_lock_substate(
            receiver,
            SubstateOffset::AccessRules(AccessRulesOffset::AccessRules),
            LockFlags::MUTABLE,
        )?;

        let access_rules_substate: &mut MethodAccessRulesSubstate =
            api.kernel_get_substate_ref_mut(handle)?;
        let access_rules = &mut access_rules_substate.access_rules;

        access_rules.set_group_access_rule(input.name.clone(), input.rule.clone());

        Runtime::emit_event(
            api,
            SetRuleEvent::Group {
                name: input.name,
                rule: input.rule,
            },
        )?;

        Ok(IndexedScryptoValue::from_typed(&()))
    }

    pub(crate) fn set_method_mutability_authorization<Y>(
        receiver: RENodeId,
        module_id: NodeModuleId,
        args: &ScryptoValue,
        api: &mut Y,
    ) -> Result<MethodAuthorization, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi,
    {
        // TODO: Remove encode/decode mess
        let input: AccessRulesSetMethodMutabilityInput =
            scrypto_decode(&scrypto_encode(args).unwrap())
                .map_err(|_| RuntimeError::InterpreterError(InterpreterError::InvalidInvocation))?;

        Self::method_mutability_authorization(receiver, module_id, input.key, api)
    }

    pub(crate) fn set_method_mutability<Y>(
        receiver: RENodeId,
        input: ScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let input: AccessRulesSetMethodMutabilityInput =
            scrypto_decode(&scrypto_encode(&input).unwrap())
                .map_err(|_| RuntimeError::InterpreterError(InterpreterError::InvalidInvocation))?;

        let handle = api.sys_lock_substate(
            receiver,
            SubstateOffset::AccessRules(AccessRulesOffset::AccessRules),
            LockFlags::MUTABLE,
        )?;

        let access_rules_substate: &mut MethodAccessRulesSubstate =
            api.kernel_get_substate_ref_mut(handle)?;
        let access_rules = &mut access_rules_substate.access_rules;
        access_rules.set_mutability(input.key.clone(), input.mutability.clone());

        Runtime::emit_event(
            api,
            SetMutabilityEvent::Method {
                key: input.key,
                mutability: input.mutability,
            },
        )?;

        Ok(IndexedScryptoValue::from_typed(&()))
    }

    pub(crate) fn set_group_mutability_authorization<Y>(
        receiver: RENodeId,
        module_id: NodeModuleId,
        args: &ScryptoValue,
        api: &mut Y,
    ) -> Result<MethodAuthorization, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi,
    {
        // TODO: Remove encode/decode mess
        let input: AccessRulesSetGroupMutabilityInput =
            scrypto_decode(&scrypto_encode(&args).unwrap())
                .map_err(|_| RuntimeError::InterpreterError(InterpreterError::InvalidInvocation))?;

        Self::group_mutability_authorization(receiver, module_id, input.name.as_str(), api)
    }

    pub(crate) fn set_group_mutability<Y>(
        receiver: RENodeId,
        input: ScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let input: AccessRulesSetGroupMutabilityInput =
            scrypto_decode(&scrypto_encode(&input).unwrap())
                .map_err(|_| RuntimeError::InterpreterError(InterpreterError::InvalidInvocation))?;

        let handle = api.sys_lock_substate(
            receiver,
            SubstateOffset::AccessRules(AccessRulesOffset::AccessRules),
            LockFlags::MUTABLE,
        )?;

        let access_rules_substate: &mut MethodAccessRulesSubstate =
            api.kernel_get_substate_ref_mut(handle)?;
        let access_rules = &mut access_rules_substate.access_rules;
        access_rules.set_group_mutability(input.name.clone(), input.mutability.clone());

        Runtime::emit_event(
            api,
            SetMutabilityEvent::Group {
                name: input.name,
                mutability: input.mutability,
            },
        )?;

        Ok(IndexedScryptoValue::from_typed(&()))
    }
}
