use crate::kernel::kernel_api::KernelSubstateApi;
use crate::system::node_modules::access_rules::UpdateMethodEvent;
use crate::system::system_modules::auth::AuthError;
use crate::system::system_modules::costing::FIXED_LOW_FEE;
use crate::types::*;
use crate::{errors::*, event_schema};
use native_sdk::runtime::Runtime;
use radix_engine_interface::api::field_lock_api::LockFlags;
use radix_engine_interface::api::node_modules::auth::*;
use radix_engine_interface::api::node_modules::metadata::{METADATA_GET_IDENT, METADATA_SET_IDENT};
use radix_engine_interface::api::node_modules::royalty::{
    COMPONENT_ROYALTY_CLAIM_ROYALTY_IDENT, COMPONENT_ROYALTY_SET_ROYALTY_CONFIG_IDENT,
};
use radix_engine_interface::api::{ClientApi, ObjectModuleId, OBJECT_HANDLE_SELF};
use radix_engine_interface::blueprints::resource::*;
use radix_engine_interface::schema::{BlueprintSchema, FunctionSchema, PackageSchema};
use radix_engine_interface::types::*;

use super::UpdateRoleEvent;

#[derive(Debug, Clone, Eq, PartialEq, ScryptoSbor)]
pub enum AccessRulesError {
    BlueprintFunctionNotFound(String),
    ProtectedMethod(MethodKey),
    RoleDoesNotExist(RoleKey),
    MethodDoesNotExist(ObjectKey, MethodKey),
}

#[derive(Debug, Clone, PartialEq, Eq, ScryptoSbor)]
pub struct FunctionAccessRulesSubstate {
    pub access_rules: BTreeMap<FnKey, AccessRule>,
    pub default_auth: AccessRule,
}

#[derive(Debug, Clone, PartialEq, Eq, ScryptoSbor)]
pub struct MethodAccessRulesSubstate {
    pub roles: BTreeMap<RoleKey, AccessRule>,
    pub role_mutability: BTreeMap<RoleKey, (RoleList, bool)>,
    pub access_rules: NodeAuthorizationRules,
    pub inner_blueprint_access_rules: BTreeMap<String, NodeAuthorizationRules>,
}

impl MethodAccessRulesSubstate {
    pub fn role_mutability_list(&self, key: &RoleKey) -> (RoleList, bool) {
        match self.role_mutability.get(&key) {
            None => (RoleList::none(), false),
            Some(entry) => entry.clone(),
        }
    }
}

/// Method authorization rules for a component
#[derive(Debug, Clone, PartialEq, Eq, ScryptoSbor, ManifestSbor)]
pub struct NodeAuthorizationRules {
    pub method_permissions: BTreeMap<MethodKey, MethodPermission>, // Should this be optional?
}

impl NodeAuthorizationRules {
    pub fn new() -> Self {
        Self {
            method_permissions: BTreeMap::new(),
        }
    }

    fn create(
        method_permissions_and_mutability: BTreeMap<MethodKey, MethodEntry>,
        inner_blueprint: bool,
    ) -> Self {
        let mut method_permissions = BTreeMap::new();

        for (method, entry) in method_permissions_and_mutability {
            method_permissions.insert(method.clone(), entry.permission);
        }

        if !inner_blueprint {
            // Metadata
            {
                // Always public
                let metadata_get = MethodKey::new(ObjectModuleId::Metadata, METADATA_GET_IDENT);
                method_permissions.insert(metadata_get.clone(), MethodPermission::Public);

                let metadata_set = MethodKey::new(ObjectModuleId::Metadata, METADATA_SET_IDENT);
                if !method_permissions.contains_key(&metadata_set) {
                    method_permissions.insert(metadata_set.clone(), MethodPermission::nobody());
                }
            }

            // Royalties
            {
                let royalty_set = MethodKey::new(
                    ObjectModuleId::Royalty,
                    COMPONENT_ROYALTY_SET_ROYALTY_CONFIG_IDENT,
                );
                if !method_permissions.contains_key(&royalty_set) {
                    method_permissions.insert(royalty_set.clone(), MethodPermission::nobody());
                }
                let royalty_claim = MethodKey::new(
                    ObjectModuleId::Royalty,
                    COMPONENT_ROYALTY_CLAIM_ROYALTY_IDENT,
                );
                if !method_permissions.contains_key(&royalty_claim) {
                    method_permissions.insert(royalty_claim.clone(), MethodPermission::nobody());
                }
            }
        }

        Self {
            method_permissions,
        }
    }
}

pub struct AccessRulesNativePackage;

impl AccessRulesNativePackage {
    pub fn schema() -> PackageSchema {
        let mut aggregator = TypeAggregator::<ScryptoCustomTypeKind>::new();

        let mut fields = Vec::new();
        fields.push(aggregator.add_child_type_and_descendents::<MethodAccessRulesSubstate>());

        let mut functions = BTreeMap::new();
        functions.insert(
            ACCESS_RULES_CREATE_IDENT.to_string(),
            FunctionSchema {
                receiver: None,
                input: aggregator.add_child_type_and_descendents::<AccessRulesCreateInput>(),
                output: aggregator.add_child_type_and_descendents::<AccessRulesCreateOutput>(),
                export_name: ACCESS_RULES_CREATE_IDENT.to_string(),
            },
        );
        functions.insert(
            ACCESS_RULES_UPDATE_ROLE_IDENT.to_string(),
            FunctionSchema {
                receiver: Some(schema::ReceiverInfo::normal_ref_mut()),
                input: aggregator.add_child_type_and_descendents::<AccessRulesUpdateRoleInput>(),
                output: aggregator.add_child_type_and_descendents::<AccessRulesUpdateRoleOutput>(),
                export_name: ACCESS_RULES_UPDATE_ROLE_IDENT.to_string(),
            },
        );
        functions.insert(
            ACCESS_RULES_GET_ROLE_IDENT.to_string(),
            FunctionSchema {
                receiver: Some(schema::ReceiverInfo::normal_ref_mut()),
                input: aggregator.add_child_type_and_descendents::<AccessRulesGetRoleInput>(),
                output: aggregator.add_child_type_and_descendents::<AccessRulesGetRoleOutput>(),
                export_name: ACCESS_RULES_GET_ROLE_IDENT.to_string(),
            },
        );

        let event_schema = event_schema! {
            aggregator,
            [
                UpdateMethodEvent,
                UpdateRoleEvent
            ]
        };

        let schema = generate_full_schema(aggregator);
        PackageSchema {
            blueprints: btreemap!(
                ACCESS_RULES_BLUEPRINT.to_string() => BlueprintSchema {
                    outer_blueprint: None,
                    schema,
                    fields,
                    collections: vec![],
                    functions,
                    virtual_lazy_load_functions: btreemap!(),
                    event_schema,
                    method_permissions_instance: btreemap!(),
                    inner_method_permissions_instance: btreemap!(),
                }
            ),
        }
    }

    pub fn authorization<Y: KernelSubstateApi<L>, L: Default>(
        node_id: &NodeId,
        ident: &str,
        input: &IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<MethodPermission, RuntimeError> {
        let permission = match ident {
            ACCESS_RULES_UPDATE_ROLE_IDENT => {
                let input: AccessRulesUpdateRoleInput = input.as_typed().map_err(|e| {
                    RuntimeError::SystemUpstreamError(SystemUpstreamError::InputDecodeError(e))
                })?;
                Self::update_role_authorization(node_id, &input, api)?
            }
            ACCESS_RULES_GET_ROLE_IDENT => MethodPermission::Public,
            _ => MethodPermission::nobody(),
        };

        Ok(permission)
    }

    pub fn function_access_rules() -> BTreeMap<FnKey, AccessRule> {
        let mut access_rules = BTreeMap::new();
        access_rules.insert(
            FnKey::new(
                ACCESS_RULES_BLUEPRINT.to_string(),
                ACCESS_RULES_CREATE_IDENT.to_string(),
            ),
            rule!(allow_all),
        );
        access_rules
    }

    pub fn invoke_export<Y>(
        export_name: &str,
        receiver: Option<&NodeId>,
        input: &IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        match export_name {
            ACCESS_RULES_CREATE_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                if receiver.is_some() {
                    return Err(RuntimeError::SystemUpstreamError(
                        SystemUpstreamError::NativeUnexpectedReceiver(export_name.to_string()),
                    ));
                }

                let input: AccessRulesCreateInput = input.as_typed().map_err(|e| {
                    RuntimeError::SystemUpstreamError(SystemUpstreamError::InputDecodeError(e))
                })?;

                let rtn = Self::create(
                    input.roles,
                    input.method_permissions,
                    input.inner_blueprint_rules,
                    api,
                )?;
                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            ACCESS_RULES_UPDATE_ROLE_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let input: AccessRulesUpdateRoleInput = input.as_typed().map_err(|e| {
                    RuntimeError::SystemUpstreamError(SystemUpstreamError::InputDecodeError(e))
                })?;

                let rtn = Self::update_role(input.role_key, input.rule, input.mutability, api)?;
                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            ACCESS_RULES_GET_ROLE_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                let input: AccessRulesGetRoleInput = input.as_typed().map_err(|e| {
                    RuntimeError::SystemUpstreamError(SystemUpstreamError::InputDecodeError(e))
                })?;

                let rtn = Self::get_role(input.role_key, api)?;
                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            _ => Err(RuntimeError::SystemUpstreamError(
                SystemUpstreamError::NativeExportDoesNotExist(export_name.to_string()),
            )),
        }
    }

    fn update_role_authorization<Y, L: Default>(
        receiver: &NodeId,
        input: &AccessRulesUpdateRoleInput,
        api: &mut Y,
    ) -> Result<MethodPermission, RuntimeError>
    where
        Y: KernelSubstateApi<L>,
    {
        let handle = api.kernel_lock_substate(
            receiver,
            ACCESS_RULES_FIELD_PARTITION,
            &AccessRulesField::AccessRules.into(),
            LockFlags::read_only(),
            L::default(),
        )?;

        let (role_list, mutable) = {
            let access_rules_substate: MethodAccessRulesSubstate =
                api.kernel_read_substate(handle)?.as_typed().unwrap();
            access_rules_substate.role_mutability_list(&input.role_key)
        };

        api.kernel_drop_lock(handle)?;

        let permission = if input.mutability.is_some() && !mutable {
            MethodPermission::nobody()
        } else {
            role_list.into()
        };

        Ok(permission)
    }

    pub(crate) fn create<Y>(
        role_definitions: Roles,
        method_permissions: BTreeMap<MethodKey, MethodEntry>,
        inner_blueprint_rules: BTreeMap<String, BTreeMap<MethodKey, MethodEntry>>,
        api: &mut Y,
    ) -> Result<Own, RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        if role_definitions
            .rules
            .contains_key(&RoleKey::new(SELF_ROLE))
        {
            return Err(RuntimeError::ModuleError(ModuleError::AuthError(
                AuthError::UsedReservedRole(SELF_ROLE.to_string()),
            )));
        }
        let mut roles = BTreeMap::new();
        let mut protected_roles = BTreeMap::new();
        for (authority, entry) in role_definitions.rules {
            roles.insert(authority.clone(), entry.rule);
            protected_roles.insert(authority, (entry.mutable, entry.mutable_mutable));
        }

        let access_rules = NodeAuthorizationRules::create(method_permissions, false);

        let mut inner_blueprint_access_rules = BTreeMap::new();
        for (blueprint, protected_methods) in inner_blueprint_rules {
            let inner_access_rules = NodeAuthorizationRules::create(protected_methods, true);
            inner_blueprint_access_rules.insert(blueprint, inner_access_rules);
        }

        let substate = MethodAccessRulesSubstate {
            roles,
            role_mutability: protected_roles,
            access_rules,
            inner_blueprint_access_rules,
        };

        let component_id = api.new_simple_object(
            ACCESS_RULES_BLUEPRINT,
            vec![scrypto_encode(&substate).unwrap()],
        )?;

        Ok(Own(component_id))
    }

    fn update_role<Y>(
        role_key: RoleKey,
        rule: Option<AccessRule>,
        mutability: Option<(RoleList, bool)>,
        api: &mut Y,
    ) -> Result<(), RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        let handle = api.actor_lock_field(
            OBJECT_HANDLE_SELF,
            AccessRulesField::AccessRules.into(),
            LockFlags::MUTABLE,
        )?;

        let mut access_rules_substate: MethodAccessRulesSubstate =
            api.field_lock_read_typed(handle)?;

        if !access_rules_substate.roles.contains_key(&role_key) {
            return Err(RuntimeError::ApplicationError(
                ApplicationError::AccessRulesError(AccessRulesError::RoleDoesNotExist(role_key)),
            ));
        }

        if let Some(rule) = &rule {
            access_rules_substate
                .roles
                .insert(role_key.clone(), rule.clone());
        }
        if let Some(mutability) = &mutability {
            access_rules_substate
                .role_mutability
                .insert(role_key.clone(), mutability.clone());
        }

        Runtime::emit_event(
            api,
            UpdateRoleEvent {
                role_key,
                rule,
                mutability,
            },
        )?;
        api.field_lock_write_typed(handle, &access_rules_substate)?;

        Ok(())
    }

    pub(crate) fn get_role<Y>(
        role_key: RoleKey,
        api: &mut Y,
    ) -> Result<Option<AccessRule>, RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        let handle = api.actor_lock_field(
            OBJECT_HANDLE_SELF,
            AccessRulesField::AccessRules.into(),
            LockFlags::MUTABLE,
        )?;

        let access_rules_substate: MethodAccessRulesSubstate = api.field_lock_read_typed(handle)?;
        let rule = access_rules_substate.roles.get(&role_key).cloned();

        api.field_lock_release(handle)?;

        Ok(rule)
    }
}
