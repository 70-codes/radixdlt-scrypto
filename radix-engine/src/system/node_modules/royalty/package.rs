use crate::errors::*;
use crate::system::system_modules::costing::{FIXED_LOW_FEE, FIXED_MEDIUM_FEE};
use crate::types::*;
use native_sdk::resource::NativeVault;
use radix_engine_interface::api::field_lock_api::LockFlags;
use radix_engine_interface::api::node_modules::royalty::*;
use radix_engine_interface::api::{ClientApi, OBJECT_HANDLE_SELF};
use radix_engine_interface::schema::{
    BlueprintCollectionSchema, BlueprintKeyValueStoreSchema, BlueprintSchema, FeaturedSchema,
    FieldSchema, FunctionSchema, TypeRef,
};

// Re-export substates
pub use radix_engine_interface::api::component::ComponentRoyaltyAccumulatorSubstate;
use radix_engine_interface::blueprints::package::{
    BlueprintSetup, BlueprintTemplate, PackageSetup,
};

pub struct RoyaltyNativePackage;
impl RoyaltyNativePackage {
    pub fn definition() -> PackageSetup {
        let mut aggregator = TypeAggregator::<ScryptoCustomTypeKind>::new();

        let mut fields = Vec::new();
        fields.push(FieldSchema::normal(
            aggregator.add_child_type_and_descendents::<ComponentRoyaltyAccumulatorSubstate>(),
        ));

        let mut collections = Vec::new();
        collections.push(BlueprintCollectionSchema::KeyValueStore(
            BlueprintKeyValueStoreSchema {
                key: TypeRef::Blueprint(aggregator.add_child_type_and_descendents::<String>()),
                value: TypeRef::Blueprint(
                    aggregator.add_child_type_and_descendents::<RoyaltyAmount>(),
                ),
                can_own: false,
            },
        ));

        let mut functions = BTreeMap::new();
        functions.insert(
            COMPONENT_ROYALTY_CREATE_IDENT.to_string(),
            FunctionSchema {
                receiver: None,
                input: aggregator.add_child_type_and_descendents::<ComponentRoyaltyCreateInput>(),
                output: aggregator.add_child_type_and_descendents::<ComponentRoyaltyCreateOutput>(),
                export: FeaturedSchema::normal(COMPONENT_ROYALTY_CREATE_IDENT),
            },
        );
        functions.insert(
            COMPONENT_ROYALTY_SET_ROYALTY_IDENT.to_string(),
            FunctionSchema {
                receiver: Some(schema::ReceiverInfo::normal_ref_mut()),
                input: aggregator.add_child_type_and_descendents::<ComponentSetRoyaltyInput>(),
                output: aggregator.add_child_type_and_descendents::<ComponentSetRoyaltyOutput>(),
                export: FeaturedSchema::normal(COMPONENT_ROYALTY_SET_ROYALTY_IDENT),
            },
        );
        functions.insert(
            COMPONENT_ROYALTY_CLAIM_ROYALTIES_IDENT.to_string(),
            FunctionSchema {
                receiver: Some(schema::ReceiverInfo::normal_ref_mut()),
                input: aggregator.add_child_type_and_descendents::<ComponentClaimRoyaltiesInput>(),
                output: aggregator
                    .add_child_type_and_descendents::<ComponentClaimRoyaltiesOutput>(),
                export: FeaturedSchema::normal(COMPONENT_ROYALTY_CLAIM_ROYALTIES_IDENT),
            },
        );

        let schema = generate_full_schema(aggregator);
        let component_royalty_schema = BlueprintSchema {
            outer_blueprint: None,
            fields,
            collections,
            functions,
            dependencies: btreeset!(RADIX_TOKEN.into(),),
            features: btreeset!(),
        };

        let blueprints = btreemap!(
            COMPONENT_ROYALTY_BLUEPRINT.to_string() => BlueprintSetup {
                schema,
                blueprint: component_royalty_schema,
                event_schema: [].into(),
                function_auth: btreemap!(
                    COMPONENT_ROYALTY_CREATE_IDENT.to_string() => rule!(allow_all),
                ),
                royalty_config: RoyaltyConfig::default(),
                template: BlueprintTemplate {
                    method_auth_template: btreemap!(),
                    outer_method_auth_template: btreemap!(),
                },
                virtual_lazy_load_functions: btreemap!(),
            },
        );

        PackageSetup { blueprints }
    }

    pub fn invoke_export<Y>(
        export_name: &str,
        receiver: Option<&NodeId>,
        input: &IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        match export_name {
            COMPONENT_ROYALTY_CREATE_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                if receiver.is_some() {
                    return Err(RuntimeError::SystemUpstreamError(
                        SystemUpstreamError::NativeUnexpectedReceiver(export_name.to_string()),
                    ));
                }

                let input: ComponentRoyaltyCreateInput = input.as_typed().map_err(|e| {
                    RuntimeError::SystemUpstreamError(SystemUpstreamError::InputDecodeError(e))
                })?;
                let rtn = ComponentRoyaltyBlueprint::create(input.royalty_config, api)?;
                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            COMPONENT_ROYALTY_SET_ROYALTY_IDENT => {
                api.consume_cost_units(FIXED_MEDIUM_FEE, ClientCostingReason::RunNative)?;

                let input: ComponentSetRoyaltyInput = input.as_typed().map_err(|e| {
                    RuntimeError::SystemUpstreamError(SystemUpstreamError::InputDecodeError(e))
                })?;
                let rtn = ComponentRoyaltyBlueprint::set_royalty(input.method, input.amount, api)?;

                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            COMPONENT_ROYALTY_CLAIM_ROYALTIES_IDENT => {
                api.consume_cost_units(FIXED_MEDIUM_FEE, ClientCostingReason::RunNative)?;

                let _input: ComponentClaimRoyaltiesInput = input.as_typed().map_err(|e| {
                    RuntimeError::SystemUpstreamError(SystemUpstreamError::InputDecodeError(e))
                })?;
                let rtn = ComponentRoyaltyBlueprint::claim_royalties(api)?;
                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            _ => Err(RuntimeError::SystemUpstreamError(
                SystemUpstreamError::NativeExportDoesNotExist(export_name.to_string()),
            )),
        }
    }
}

pub struct ComponentRoyaltyBlueprint;

impl ComponentRoyaltyBlueprint {
    pub(crate) fn create<Y>(royalty_config: RoyaltyConfig, api: &mut Y) -> Result<Own, RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        // Create a royalty vault
        let accumulator_substate = ComponentRoyaltyAccumulatorSubstate {
            royalty_vault: Vault::create(RADIX_TOKEN, api)?,
        };

        let mut royalty_config_entries = BTreeMap::new();
        for (method, amount) in royalty_config.rules {
            royalty_config_entries.insert(
                scrypto_encode(&method).unwrap(),
                scrypto_encode(&amount).unwrap(),
            );
        }

        let component_id = api.new_object(
            COMPONENT_ROYALTY_BLUEPRINT,
            vec![],
            None,
            vec![scrypto_encode(&accumulator_substate).unwrap()],
            btreemap!(0u8 => royalty_config_entries),
        )?;

        Ok(Own(component_id))
    }

    pub(crate) fn set_royalty<Y>(
        method: String,
        amount: RoyaltyAmount,
        api: &mut Y,
    ) -> Result<(), RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        let handle = api.actor_lock_key_value_entry(
            OBJECT_HANDLE_SELF,
            0u8,
            &scrypto_encode(&method).unwrap(),
            LockFlags::MUTABLE,
        )?;
        api.key_value_entry_set_typed(handle, amount)?;
        api.key_value_entry_release(handle)?;

        Ok(())
    }

    pub(crate) fn claim_royalties<Y>(api: &mut Y) -> Result<Bucket, RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        let handle = api.actor_lock_field(
            OBJECT_HANDLE_SELF,
            RoyaltyField::RoyaltyAccumulator.into(),
            LockFlags::read_only(),
        )?;

        let substate: ComponentRoyaltyAccumulatorSubstate = api.field_lock_read_typed(handle)?;
        let mut royalty_vault = substate.royalty_vault;
        let bucket = royalty_vault.take_all(api)?;
        api.field_lock_release(handle)?;

        Ok(bucket)
    }
}
