use crate::errors::*;
use crate::kernel::kernel_api::{KernelNodeApi, KernelSubstateApi};
use crate::system::kernel_modules::costing::{FIXED_LOW_FEE, FIXED_MEDIUM_FEE};
use crate::types::*;
use native_sdk::resource::{ResourceManager, Vault};
use radix_engine_interface::api::component::{
    ComponentRoyaltyAccumulatorSubstate, ComponentRoyaltyConfigSubstate,
};
use radix_engine_interface::api::node_modules::royalty::*;
use radix_engine_interface::api::package::{
    PackageRoyaltyAccumulatorSubstate, PackageRoyaltyConfigSubstate,
};
use radix_engine_interface::api::substate_api::LockFlags;
use radix_engine_interface::api::types::{RENodeId, SubstateOffset};
use radix_engine_interface::api::unsafe_api::ClientCostingReason;
use radix_engine_interface::api::ClientApi;
use radix_engine_interface::blueprints::resource::{AccessRule, FnKey};

pub struct RoyaltyNativePackage;
impl RoyaltyNativePackage {
    pub fn function_access_rules() -> BTreeMap<FnKey, AccessRule> {
        let mut access_rules = BTreeMap::new();
        access_rules.insert(
            FnKey::new(
                COMPONENT_ROYALTY_BLUEPRINT.to_string(),
                COMPONENT_ROYALTY_CREATE_IDENT.to_string(),
            ),
            rule!(allow_all),
        );
        access_rules
    }

    pub fn invoke_export<Y>(
        export_name: &str,
        receiver: Option<RENodeId>,
        input: IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        match export_name {
            COMPONENT_ROYALTY_CREATE_IDENT => {
                api.consume_cost_units(FIXED_LOW_FEE, ClientCostingReason::RunNative)?;

                if receiver.is_some() {
                    return Err(RuntimeError::InterpreterError(
                        InterpreterError::NativeUnexpectedReceiver(export_name.to_string()),
                    ));
                }

                ComponentRoyaltyBlueprint::create(input, api)
            }
            COMPONENT_ROYALTY_SET_ROYALTY_CONFIG_IDENT => {
                api.consume_cost_units(FIXED_MEDIUM_FEE, ClientCostingReason::RunNative)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                ComponentRoyaltyBlueprint::set_royalty_config(receiver, input, api)
            }
            COMPONENT_ROYALTY_CLAIM_ROYALTY_IDENT => {
                api.consume_cost_units(FIXED_MEDIUM_FEE, ClientCostingReason::RunNative)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                ComponentRoyaltyBlueprint::claim_royalty(receiver, input, api)
            }
            PACKAGE_ROYALTY_SET_ROYALTY_CONFIG_IDENT => {
                api.consume_cost_units(FIXED_MEDIUM_FEE, ClientCostingReason::RunNative)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                PackageRoyaltyBlueprint::set_royalty_config(receiver, input, api)
            }
            PACKAGE_ROYALTY_CLAIM_ROYALTY_IDENT => {
                api.consume_cost_units(FIXED_MEDIUM_FEE, ClientCostingReason::RunNative)?;

                let receiver = receiver.ok_or(RuntimeError::InterpreterError(
                    InterpreterError::NativeExpectedReceiver(export_name.to_string()),
                ))?;

                PackageRoyaltyBlueprint::claim_royalty(receiver, input, api)
            }
            _ => Err(RuntimeError::InterpreterError(
                InterpreterError::NativeExportDoesNotExist(export_name.to_string()),
            )),
        }
    }
}

pub struct ComponentRoyaltyBlueprint;

impl ComponentRoyaltyBlueprint {
    pub(crate) fn create<Y>(
        input: IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let input: ComponentRoyaltyCreateInput = input.as_typed().map_err(|e| {
            RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
        })?;

        // Create a royalty vault
        let config_substate = ComponentRoyaltyConfigSubstate {
            royalty_config: input.royalty_config,
        };
        let accumulator_substate = ComponentRoyaltyAccumulatorSubstate {
            royalty_vault: ResourceManager(RADIX_TOKEN).new_vault(api)?,
        };
        let component_id = api.new_object(
            COMPONENT_ROYALTY_BLUEPRINT,
            vec![
                scrypto_encode(&config_substate).unwrap(),
                scrypto_encode(&accumulator_substate).unwrap(),
            ],
        )?;

        Ok(IndexedScryptoValue::from_typed(&Own::Object(component_id)))
    }

    pub(crate) fn set_royalty_config<Y>(
        receiver: RENodeId,
        input: IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let input: ComponentSetRoyaltyConfigInput = input.as_typed().map_err(|e| {
            RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
        })?;

        let handle = api.sys_lock_substate(
            receiver,
            SubstateOffset::Royalty(RoyaltyOffset::RoyaltyConfig),
            LockFlags::MUTABLE,
        )?;

        let substate: &mut ComponentRoyaltyConfigSubstate =
            api.kernel_get_substate_ref_mut(handle)?;
        substate.royalty_config = input.royalty_config;

        api.sys_drop_lock(handle)?;

        Ok(IndexedScryptoValue::from_typed(&()))
    }

    pub(crate) fn claim_royalty<Y>(
        receiver: RENodeId,
        input: IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let _input: ComponentClaimRoyaltyInput = input.as_typed().map_err(|e| {
            RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
        })?;

        let handle = api.sys_lock_substate(
            receiver,
            SubstateOffset::Royalty(RoyaltyOffset::RoyaltyAccumulator),
            LockFlags::MUTABLE,
        )?;

        let substate: &mut ComponentRoyaltyAccumulatorSubstate =
            api.kernel_get_substate_ref_mut(handle)?;
        let royalty_vault = substate.royalty_vault.clone();

        let mut vault = Vault(royalty_vault.vault_id());
        let bucket = vault.sys_take_all(api)?;

        api.sys_drop_lock(handle)?;

        Ok(IndexedScryptoValue::from_typed(&bucket))
    }
}

pub struct PackageRoyaltyBlueprint;

impl PackageRoyaltyBlueprint {
    pub(crate) fn set_royalty_config<Y>(
        receiver: RENodeId,
        input: IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let input: PackageSetRoyaltyConfigInput = input.as_typed().map_err(|e| {
            RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
        })?;

        // TODO: auth check
        let handle = api.sys_lock_substate(
            receiver,
            SubstateOffset::Royalty(RoyaltyOffset::RoyaltyConfig),
            LockFlags::MUTABLE,
        )?;

        let package_royalty_config: &mut PackageRoyaltyConfigSubstate =
            api.kernel_get_substate_ref_mut(handle)?;
        package_royalty_config.royalty_config = input.royalty_config;

        api.kernel_drop_lock(handle)?;

        Ok(IndexedScryptoValue::from_typed(&()))
    }

    pub(crate) fn claim_royalty<Y>(
        receiver: RENodeId,
        input: IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        let _input: PackageClaimRoyaltyInput = input.as_typed().map_err(|e| {
            RuntimeError::InterpreterError(InterpreterError::ScryptoInputDecodeError(e))
        })?;

        let handle = api.sys_lock_substate(
            receiver,
            SubstateOffset::Royalty(RoyaltyOffset::RoyaltyAccumulator),
            LockFlags::MUTABLE,
        )?;

        let substate: &mut PackageRoyaltyAccumulatorSubstate =
            api.kernel_get_substate_ref_mut(handle)?;
        let royalty_vault = substate.royalty_vault.clone();
        let mut vault = Vault(
            royalty_vault
                .expect("FIXME: cleanup royalty vault madness")
                .vault_id(),
        );
        let bucket = vault.sys_take_all(api)?;

        Ok(IndexedScryptoValue::from_typed(&bucket))
    }
}
