use crate::errors::*;
use crate::kernel::actor::ResolvedActor;
use crate::kernel::call_frame::CallFrameUpdate;
use crate::kernel::interpreters::deref_and_update;
use crate::kernel::kernel_api::{
    ExecutableInvocation, Executor, KernelNodeApi, KernelSubstateApi, LockFlags,
};
use crate::types::*;
use crate::wasm::WasmEngine;
use native_sdk::resource::Vault;
use radix_engine_interface::api::node_modules::royalty::{
    ComponentClaimRoyaltyInvocation, ComponentSetRoyaltyConfigInvocation,
};
use radix_engine_interface::api::types::{NativeFn, RENodeId, SubstateOffset};
use radix_engine_interface::api::{ClientApi, ClientDerefApi};
use radix_engine_interface::blueprints::resource::Bucket;

impl ExecutableInvocation for ComponentSetRoyaltyConfigInvocation {
    type Exec = Self;

    fn resolve<D: ClientDerefApi<RuntimeError>>(
        self,
        deref: &mut D,
    ) -> Result<(ResolvedActor, CallFrameUpdate, Self::Exec), RuntimeError>
    where
        Self: Sized,
    {
        let mut call_frame_update = CallFrameUpdate::empty();
        let receiver = self.receiver;
        let resolved_receiver = deref_and_update(receiver, NodeModuleId::ComponentRoyalty, &mut call_frame_update, deref)?;

        let actor = ResolvedActor::method(
            NativeFn::ComponentRoyalty(ComponentRoyaltyFn::SetRoyaltyConfig),
            resolved_receiver,
        );
        let executor = Self {
            receiver: resolved_receiver.receiver.0,
            royalty_config: self.royalty_config,
        };

        Ok((actor, call_frame_update, executor))
    }
}

impl Executor for ComponentSetRoyaltyConfigInvocation {
    type Output = ();

    fn execute<Y, W: WasmEngine>(self, api: &mut Y) -> Result<((), CallFrameUpdate), RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi,
    {
        // TODO: auth check
        let node_id = self.receiver;
        let handle = api.kernel_lock_substate(
            node_id,
            NodeModuleId::ComponentRoyalty,
            SubstateOffset::Royalty(RoyaltyOffset::RoyaltyConfig),
            LockFlags::MUTABLE,
        )?;

        let mut substate_mut = api.kernel_get_substate_ref_mut(handle)?;
        substate_mut.component_royalty_config().royalty_config = self.royalty_config;

        api.kernel_drop_lock(handle)?;

        Ok(((), CallFrameUpdate::empty()))
    }
}

impl ExecutableInvocation for ComponentClaimRoyaltyInvocation {
    type Exec = Self;

    fn resolve<D: ClientDerefApi<RuntimeError>>(
        self,
        deref: &mut D,
    ) -> Result<(ResolvedActor, CallFrameUpdate, Self::Exec), RuntimeError> {
        let mut call_frame_update = CallFrameUpdate::empty();
        let receiver = self.receiver;
        let resolved_receiver = deref_and_update(receiver, NodeModuleId::ComponentRoyalty, &mut call_frame_update, deref)?;

        let actor = ResolvedActor::method(
            NativeFn::ComponentRoyalty(ComponentRoyaltyFn::ClaimRoyalty),
            resolved_receiver,
        );
        let executor = Self {
            receiver: resolved_receiver.receiver.0,
        };

        Ok((actor, call_frame_update, executor))
    }
}

impl Executor for ComponentClaimRoyaltyInvocation {
    type Output = Bucket;

    fn execute<Y, W: WasmEngine>(
        self,
        api: &mut Y,
    ) -> Result<(Bucket, CallFrameUpdate), RuntimeError>
    where
        Y: KernelNodeApi + KernelSubstateApi + ClientApi<RuntimeError>,
    {
        // TODO: auth check
        let node_id = self.receiver;
        let handle = api.kernel_lock_substate(
            node_id,
            NodeModuleId::ComponentRoyalty,
            SubstateOffset::Royalty(RoyaltyOffset::RoyaltyAccumulator),
            LockFlags::MUTABLE,
        )?;

        let mut substate_mut = api.kernel_get_substate_ref_mut(handle)?;
        let royalty_vault = substate_mut.component_royalty_accumulator().royalty.clone();

        let mut vault = Vault(royalty_vault.vault_id());
        let bucket = vault.sys_take_all(api)?;
        let bucket_id = bucket.0;

        api.kernel_drop_lock(handle)?;

        Ok((
            bucket,
            CallFrameUpdate::move_node(RENodeId::Bucket(bucket_id)),
        ))
    }
}
