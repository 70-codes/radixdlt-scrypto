mod access_rules;
mod auth_addresses;

pub use access_rules::*;
pub use auth_addresses::*;



#[macro_export]
macro_rules! roles {
    ( $($role:ident => $rule:expr, $locked:ident;)* ) => ({
        internal_roles!(MethodRoles, $($role => $rule, $locked;)*)
    });
}

#[macro_export]
macro_rules! internal_roles {
    ($module_roles:ident, $($role:ident => $rule:expr, $locked:ident;)* ) => ({
        let method_roles = $module_roles::<(AccessRule, bool)> {
            $(
                $role: {
                    role_definition_entry!($rule, $locked)
                }
            ),*
        };

        let mut roles = $crate::blueprints::resource::Roles::new();
        for (name, (rule, mutable)) in method_roles.list() {
            if mutable {
                roles.define_mutable_role(name, rule);
            } else {
                roles.define_immutable_role(name, rule);
            }
        }

        roles
    });
}


#[macro_export]
macro_rules! role_definition_entry {
    ($rule:expr, locked) => {{
        ($rule, false)
    }};
    ($rule:expr, updatable) => {{
        ($rule, true)
    }};
}
