use crate::*;
#[cfg(feature = "radix_engine_fuzzing")]
use arbitrary::Arbitrary;
use sbor::rust::fmt::Debug;
use sbor::rust::prelude::*;

use super::url::validate_url;
use super::url::URLValidationError;

#[cfg_attr(feature = "radix_engine_fuzzing", derive(Arbitrary))]
#[derive(Debug, Clone, Eq, PartialEq, ScryptoSbor, ManifestSbor)]
#[sbor(transparent)]
pub struct Origin(pub String);

impl Origin {
    pub fn of(value: impl Into<String>) -> Self {
        Self(value.into())
    }
}

#[derive(Debug, Clone, PartialEq, Eq, ScryptoSbor)]
pub enum OriginValidationError {
    URLValidationError(URLValidationError),
    NotAnOrigin,
}

pub fn validate_origin(origin: &str) -> Result<String, OriginValidationError> {
    let url = validate_url(origin).map_err(OriginValidationError::URLValidationError)?;

    if !url.username().is_empty()
        || url.password().is_some()
        || !url.path().is_empty()
        || url.query().is_some()
        || url.fragment().is_some()
    {
        Err(OriginValidationError::NotAnOrigin)
    } else {
        Ok(url.into())
    }
}
