use crate::*;
use radix_engine_common::data::scrypto::ScryptoValue;
use sbor::rust::fmt::Debug;
use sbor::rust::prelude::*;

pub const METADATA_BLUEPRINT: &str = "Metadata";

pub const METADATA_STRING_TYPE: u32 = 0u32;

#[derive(Debug, Clone, Eq, PartialEq, ScryptoSbor)]
pub struct MetadataValue {
    pub type_id: u32,
    pub value: ScryptoValue,
}

impl MetadataValue {
    pub fn string(value: String) -> Self {
        Self {
            type_id: METADATA_STRING_TYPE,
            value: ScryptoValue::String { value },
        }
    }

    pub fn to_string(self) -> Result<String, MetadataError> {
        match self.type_id {
            METADATA_STRING_TYPE => match self.value {
                ScryptoValue::String { value } => Ok(value),
                _ => panic!("Unexpected metadata scrypto value"),
            },
            _ => Err(MetadataError::NotAString),
        }
    }
}

#[derive(Debug, Clone, Eq, PartialEq, ScryptoSbor)]
pub enum MetadataError {
    NotAString,
    EmptyEntry,
}

pub const METADATA_CREATE_IDENT: &str = "create";

#[derive(
    Debug, Clone, Eq, PartialEq, ScryptoSbor, ManifestCategorize, ManifestEncode, ManifestDecode,
)]
pub struct MetadataCreateInput {}

pub const METADATA_CREATE_WITH_DATA_IDENT: &str = "create_with_data";

#[derive(
    Debug, Clone, Eq, PartialEq, ScryptoSbor, ManifestCategorize, ManifestEncode, ManifestDecode,
)]
pub struct MetadataCreateWithDataInput {
    pub data: BTreeMap<String, String>,
}

pub const METADATA_SET_IDENT: &str = "set";

#[derive(Debug, Clone, Eq, PartialEq, ScryptoSbor)]
pub struct MetadataSet {
    pub key: String,
    pub value: MetadataValue,
}

pub const METADATA_GET_IDENT: &str = "get";

#[derive(
    Debug, Clone, Eq, PartialEq, ScryptoSbor, ManifestCategorize, ManifestEncode, ManifestDecode,
)]
pub struct MetadataGetInput {
    pub key: String,
}

pub const METADATA_REMOVE_IDENT: &str = "remove";

#[derive(
    Debug, Clone, Eq, PartialEq, ScryptoSbor, ManifestCategorize, ManifestEncode, ManifestDecode,
)]
pub struct MetadataRemoveInput {
    pub key: String,
}
