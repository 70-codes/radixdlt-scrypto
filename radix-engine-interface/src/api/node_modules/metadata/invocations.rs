use crate::*;
use radix_engine_common::data::scrypto::{ScryptoCustomValue, ScryptoCustomValueKind, ScryptoValue};
use sbor::rust::fmt::Debug;
use sbor::rust::prelude::*;
use sbor::Value;

pub const METADATA_BLUEPRINT: &str = "Metadata";

pub const METADATA_STRING_TYPE_ID: u8 = 0u8;
pub const METADATA_U8_TYPE_ID: u8 = 1u8;

pub trait MetadataVal: Sized {
    const TYPE_ID: u8;

    fn to_scrypto_value(self) -> Value<ScryptoCustomValueKind, ScryptoCustomValue>;

    fn from_scrypto_value(value: Value<ScryptoCustomValueKind, ScryptoCustomValue>) -> Self;

    fn to_metadata_value(self) -> ScryptoValue {
        ScryptoValue::Enum {
            discriminator: Self::TYPE_ID,
            fields: vec![self.to_scrypto_value()],
        }
    }

    fn from_metadata_value(value: ScryptoValue) -> Result<Self, MetadataError> {
        let (discriminator, value) = match value {
            ScryptoValue::Enum {
                discriminator,
                fields,
            } => {
                let value = fields.into_iter().next().unwrap();
                (discriminator, value)

            },
            _ => panic!("Unexpected")
        };

        if discriminator == Self::TYPE_ID {
            Ok(Self::from_scrypto_value(value))
        } else {
            Err(MetadataError::NotAString)
        }
    }
}

impl MetadataVal for String {
    const TYPE_ID: u8 = METADATA_STRING_TYPE_ID;

    fn to_scrypto_value(self) -> Value<ScryptoCustomValueKind, ScryptoCustomValue> {
        Value::String { value: self }
    }

    fn from_scrypto_value(value: Value<ScryptoCustomValueKind, ScryptoCustomValue>) -> Self {
        match value {
            Value::String { value } => value,
            _ => panic!("Unexpected"),
        }
    }
}

#[derive(Debug, Clone, Eq, PartialEq, ScryptoSbor)]
pub enum MetadataError {
    NotAString,
    EmptyEntry,
}

pub const METADATA_CREATE_IDENT: &str = "create";

#[derive(
    Debug, Clone, Eq, PartialEq, ScryptoSbor, ManifestCategorize, ManifestEncode, ManifestDecode,
)]
pub struct MetadataCreateInput {}

pub const METADATA_CREATE_WITH_DATA_IDENT: &str = "create_with_data";

#[derive(
    Debug, Clone, Eq, PartialEq, ScryptoSbor, ManifestCategorize, ManifestEncode, ManifestDecode,
)]
pub struct MetadataCreateWithDataInput {
    pub data: BTreeMap<String, String>,
}

pub const METADATA_SET_IDENT: &str = "set";

#[derive(Debug, Clone, Eq, PartialEq, ScryptoSbor)]
pub struct MetadataSet {
    pub key: String,
    pub value: ScryptoValue,
}

pub const METADATA_GET_IDENT: &str = "get";

#[derive(
    Debug, Clone, Eq, PartialEq, ScryptoSbor, ManifestCategorize, ManifestEncode, ManifestDecode,
)]
pub struct MetadataGetInput {
    pub key: String,
}

pub const METADATA_REMOVE_IDENT: &str = "remove";

#[derive(
    Debug, Clone, Eq, PartialEq, ScryptoSbor, ManifestCategorize, ManifestEncode, ManifestDecode,
)]
pub struct MetadataRemoveInput {
    pub key: String,
}
