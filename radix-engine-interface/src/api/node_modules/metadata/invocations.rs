use crate::api::types::*;
use crate::*;
use sbor::rust::collections::BTreeMap;
use sbor::rust::fmt::Debug;
use scrypto_abi::BlueprintAbi;

pub struct MetadataAbi;

impl MetadataAbi {
    pub fn blueprint_abis() -> BTreeMap<String, BlueprintAbi> {
        BTreeMap::new()
    }
}

pub const METADATA_BLUEPRINT: &str = "Metadata";

pub const METADATA_SET_IDENT: &str = "set";

#[derive(Debug, Clone, Eq, PartialEq, ScryptoCategorize, ScryptoEncode, ScryptoDecode)]
pub struct MetadataSetInput {
    pub key: String,
    pub value: String,
}

#[derive(Debug, Clone, Eq, PartialEq, ScryptoCategorize, ScryptoEncode, ScryptoDecode)]
pub struct MetadataGetInvocation {
    pub receiver: RENodeId,
    pub key: String,
}

impl Invocation for MetadataGetInvocation {
    type Output = Option<String>;

    fn fn_identifier(&self) -> FnIdentifier {
        FnIdentifier::Native(NativeFn::Metadata(MetadataFn::Get))
    }
}

impl SerializableInvocation for MetadataGetInvocation {
    type ScryptoOutput = Option<String>;

    fn native_fn() -> NativeFn {
        NativeFn::Metadata(MetadataFn::Get)
    }
}

impl Into<CallTableInvocation> for MetadataGetInvocation {
    fn into(self) -> CallTableInvocation {
        NativeInvocation::Metadata(MetadataInvocation::Get(self)).into()
    }
}
