use crate::*;
use sbor::rust::fmt::Debug;
use sbor::rust::prelude::*;

pub const METADATA_BLUEPRINT: &str = "Metadata";

#[derive(
Debug, Clone, Eq, PartialEq, ScryptoSbor,
)]
pub enum MetadataError {
    NotAString,
    EmptyEntry,
}

pub const METADATA_CREATE_IDENT: &str = "create";

#[derive(
    Debug, Clone, Eq, PartialEq, ScryptoSbor, ManifestCategorize, ManifestEncode, ManifestDecode,
)]
pub struct MetadataCreateInput {}

pub const METADATA_CREATE_WITH_DATA_IDENT: &str = "create_with_data";

#[derive(
    Debug, Clone, Eq, PartialEq, ScryptoSbor, ManifestCategorize, ManifestEncode, ManifestDecode,
)]
pub struct MetadataCreateWithDataInput {
    pub data: BTreeMap<String, String>,
}

pub const METADATA_SET_STRING_IDENT: &str = "set_string";

#[derive(
    Debug, Clone, Eq, PartialEq, ScryptoSbor, ManifestCategorize, ManifestEncode, ManifestDecode,
)]
pub struct MetadataSetStringInput {
    pub key: String,
    pub value: String,
}

pub const METADATA_GET_STRING_IDENT: &str = "get_string";

#[derive(
    Debug, Clone, Eq, PartialEq, ScryptoSbor, ManifestCategorize, ManifestEncode, ManifestDecode,
)]
pub struct MetadataGetStringInput {
    pub key: String,
}

pub const METADATA_REMOVE_IDENT: &str = "remove";

#[derive(
    Debug, Clone, Eq, PartialEq, ScryptoSbor, ManifestCategorize, ManifestEncode, ManifestDecode,
)]
pub struct MetadataRemoveInput {
    pub key: String,
}
