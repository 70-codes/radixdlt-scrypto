use crate::*;
#[cfg(feature = "radix_engine_fuzzing")]
use arbitrary::Arbitrary;
use radix_engine_common::crypto::PublicKey;
use radix_engine_common::crypto::PublicKeyHash;
use radix_engine_common::data::scrypto::model::NonFungibleLocalId;
use radix_engine_common::data::scrypto::model::Own;
use radix_engine_common::math::Decimal;
use radix_engine_common::time::Instant;
use radix_engine_common::types::GlobalAddress;
use radix_engine_interface::blueprints::resource::NonFungibleGlobalId;
use sbor::rust::fmt::Debug;
use sbor::rust::prelude::*;

pub const METADATA_BLUEPRINT: &str = "Metadata";

#[cfg_attr(feature = "radix_engine_fuzzing", derive(Arbitrary))]
#[derive(Debug, Clone, Eq, PartialEq, ScryptoSbor, ManifestSbor)]
pub enum MetadataValue {
    #[sbor(discriminator(METADATA_VALUE_STRING_TYPE_ID))]
    String(String),
    #[sbor(discriminator(METADATA_VALUE_BOOLEAN_TYPE_ID))]
    Bool(bool),
    #[sbor(discriminator(METADATA_VALUE_U8_TYPE_ID))]
    U8(u8),
    #[sbor(discriminator(METADATA_VALUE_U32_TYPE_ID))]
    U32(u32),
    #[sbor(discriminator(METADATA_VALUE_U64_TYPE_ID))]
    U64(u64),
    #[sbor(discriminator(METADATA_VALUE_I32_TYPE_ID))]
    I32(i32),
    #[sbor(discriminator(METADATA_VALUE_I64_TYPE_ID))]
    I64(i64),
    #[sbor(discriminator(METADATA_VALUE_DECIMAL_TYPE_ID))]
    Decimal(Decimal),
    #[sbor(discriminator(METADATA_VALUE_GLOBAL_ADDRESS_TYPE_ID))]
    GlobalAddress(GlobalAddress),
    #[sbor(discriminator(METADATA_VALUE_PUBLIC_KEY_TYPE_ID))]
    PublicKey(PublicKey),
    #[sbor(discriminator(METADATA_VALUE_NON_FUNGIBLE_GLOBAL_ID_TYPE_ID))]
    NonFungibleGlobalId(NonFungibleGlobalId),
    #[sbor(discriminator(METADATA_VALUE_NON_FUNGIBLE_LOCAL_ID_TYPE_ID))]
    NonFungibleLocalId(NonFungibleLocalId),
    #[sbor(discriminator(METADATA_VALUE_INSTANT_TYPE_ID))]
    Instant(Instant),
    #[sbor(discriminator(METADATA_VALUE_URL_TYPE_ID))]
    Url(Url),
    #[sbor(discriminator(METADATA_VALUE_ORIGIN_TYPE_ID))]
    Origin(Origin),
    #[sbor(discriminator(METADATA_VALUE_PUBLIC_KEY_HASH_TYPE_ID))]
    PublicKeyHash(PublicKeyHash),

    #[sbor(discriminator(METADATA_VALUE_STRING_ARRAY_TYPE_ID))]
    StringArray(Vec<String>),
    #[sbor(discriminator(METADATA_VALUE_BOOLEAN_ARRAY_TYPE_ID))]
    BoolArray(Vec<bool>),
    #[sbor(discriminator(METADATA_VALUE_U8_ARRAY_TYPE_ID))]
    U8Array(Vec<u8>),
    #[sbor(discriminator(METADATA_VALUE_U32_ARRAY_TYPE_ID))]
    U32Array(Vec<u32>),
    #[sbor(discriminator(METADATA_VALUE_U64_ARRAY_TYPE_ID))]
    U64Array(Vec<u64>),
    #[sbor(discriminator(METADATA_VALUE_I32_ARRAY_TYPE_ID))]
    I32Array(Vec<i32>),
    #[sbor(discriminator(METADATA_VALUE_I64_ARRAY_TYPE_ID))]
    I64Array(Vec<i64>),
    #[sbor(discriminator(METADATA_VALUE_DECIMAL_ARRAY_TYPE_ID))]
    DecimalArray(Vec<Decimal>),
    #[sbor(discriminator(METADATA_VALUE_GLOBAL_ADDRESS_ARRAY_TYPE_ID))]
    GlobalAddressArray(Vec<GlobalAddress>),
    #[sbor(discriminator(METADATA_VALUE_PUBLIC_KEY_ARRAY_TYPE_ID))]
    PublicKeyArray(Vec<PublicKey>),
    #[sbor(discriminator(METADATA_VALUE_NON_FUNGIBLE_GLOBAL_ID_ARRAY_TYPE_ID))]
    NonFungibleGlobalIdArray(Vec<NonFungibleGlobalId>),
    #[sbor(discriminator(METADATA_VALUE_NON_FUNGIBLE_LOCAL_ID_ARRAY_TYPE_ID))]
    NonFungibleLocalIdArray(Vec<NonFungibleLocalId>),
    #[sbor(discriminator(METADATA_VALUE_INSTANT_ARRAY_TYPE_ID))]
    InstantArray(Vec<Instant>),
    #[sbor(discriminator(METADATA_VALUE_URL_ARRAY_TYPE_ID))]
    UrlArray(Vec<Url>),
    #[sbor(discriminator(METADATA_VALUE_ORIGIN_ARRAY_TYPE_ID))]
    OriginArray(Vec<Origin>),
    #[sbor(discriminator(METADATA_VALUE_PUBLIC_KEY_HASH_ARRAY_TYPE_ID))]
    PublicKeyHashArray(Vec<PublicKeyHash>),
}

pub const METADATA_VALUE_STRING_TYPE_ID: u8 = 0u8;
pub const METADATA_VALUE_BOOLEAN_TYPE_ID: u8 = 1u8;
pub const METADATA_VALUE_U8_TYPE_ID: u8 = 2u8;
pub const METADATA_VALUE_U32_TYPE_ID: u8 = 3u8;
pub const METADATA_VALUE_U64_TYPE_ID: u8 = 4u8;
pub const METADATA_VALUE_I32_TYPE_ID: u8 = 5u8;
pub const METADATA_VALUE_I64_TYPE_ID: u8 = 6u8;
pub const METADATA_VALUE_DECIMAL_TYPE_ID: u8 = 7u8;
pub const METADATA_VALUE_GLOBAL_ADDRESS_TYPE_ID: u8 = 8u8;
pub const METADATA_VALUE_PUBLIC_KEY_TYPE_ID: u8 = 9u8;
pub const METADATA_VALUE_NON_FUNGIBLE_GLOBAL_ID_TYPE_ID: u8 = 10u8;
pub const METADATA_VALUE_NON_FUNGIBLE_LOCAL_ID_TYPE_ID: u8 = 11u8;
pub const METADATA_VALUE_INSTANT_TYPE_ID: u8 = 12u8;
pub const METADATA_VALUE_URL_TYPE_ID: u8 = 13u8;
pub const METADATA_VALUE_ORIGIN_TYPE_ID: u8 = 14u8;
pub const METADATA_VALUE_PUBLIC_KEY_HASH_TYPE_ID: u8 = 15u8;

pub const METADATA_VALUE_STRING_ARRAY_TYPE_ID: u8 = 0x80 + 0u8;
pub const METADATA_VALUE_BOOLEAN_ARRAY_TYPE_ID: u8 = 0x80 + 1u8;
pub const METADATA_VALUE_U8_ARRAY_TYPE_ID: u8 = 0x80 + 2u8;
pub const METADATA_VALUE_U32_ARRAY_TYPE_ID: u8 = 0x80 + 3u8;
pub const METADATA_VALUE_U64_ARRAY_TYPE_ID: u8 = 0x80 + 4u8;
pub const METADATA_VALUE_I32_ARRAY_TYPE_ID: u8 = 0x80 + 5u8;
pub const METADATA_VALUE_I64_ARRAY_TYPE_ID: u8 = 0x80 + 6u8;
pub const METADATA_VALUE_DECIMAL_ARRAY_TYPE_ID: u8 = 0x80 + 7u8;
pub const METADATA_VALUE_GLOBAL_ADDRESS_ARRAY_TYPE_ID: u8 = 0x80 + 8u8;
pub const METADATA_VALUE_PUBLIC_KEY_ARRAY_TYPE_ID: u8 = 0x80 + 9u8;
pub const METADATA_VALUE_NON_FUNGIBLE_GLOBAL_ID_ARRAY_TYPE_ID: u8 = 0x80 + 10u8;
pub const METADATA_VALUE_NON_FUNGIBLE_LOCAL_ID_ARRAY_TYPE_ID: u8 = 0x80 + 11u8;
pub const METADATA_VALUE_INSTANT_ARRAY_TYPE_ID: u8 = 0x80 + 12u8;
pub const METADATA_VALUE_URL_ARRAY_TYPE_ID: u8 = 0x80 + 13u8;
pub const METADATA_VALUE_ORIGIN_ARRAY_TYPE_ID: u8 = 0x80 + 14u8;
pub const METADATA_VALUE_PUBLIC_KEY_HASH_ARRAY_TYPE_ID: u8 = 0x80 + 15u8;

#[cfg_attr(feature = "radix_engine_fuzzing", derive(Arbitrary))]
#[derive(Debug, Clone, Eq, PartialEq, ScryptoSbor, ManifestSbor)]
#[sbor(transparent)]
pub struct Url(pub String);

#[cfg_attr(feature = "radix_engine_fuzzing", derive(Arbitrary))]
#[derive(Debug, Clone, Eq, PartialEq, ScryptoSbor, ManifestSbor)]
#[sbor(transparent)]
pub struct Origin(pub String);

pub trait MetadataVal: Sized {
    fn to_metadata_value(self) -> MetadataValue;

    fn from_metadata_value(entry: MetadataValue) -> Result<Self, MetadataError>;
}

macro_rules! impl_metadata_val {
    ($rust_type:ty, $metadata_type:tt, $type_id:expr) => {
        impl MetadataVal for $rust_type {
            fn to_metadata_value(self) -> MetadataValue {
                MetadataValue::$metadata_type(self)
            }

            fn from_metadata_value(entry: MetadataValue) -> Result<Self, MetadataError> {
                match entry {
                    MetadataValue::$metadata_type(x) => Ok(x),
                    x => Err(MetadataError::UnexpectedValue {
                        expected_type_id: $type_id,
                        actual: x,
                    }),
                }
            }
        }
    };
}

impl_metadata_val!(String, String, METADATA_VALUE_STRING_TYPE_ID);
impl_metadata_val!(bool, Bool, METADATA_VALUE_BOOLEAN_TYPE_ID);
impl_metadata_val!(u8, U8, METADATA_VALUE_U8_TYPE_ID);
impl_metadata_val!(u32, U32, METADATA_VALUE_U32_TYPE_ID);
impl_metadata_val!(u64, U64, METADATA_VALUE_U64_TYPE_ID);
impl_metadata_val!(i32, I32, METADATA_VALUE_I32_TYPE_ID);
impl_metadata_val!(i64, I64, METADATA_VALUE_I64_TYPE_ID);
impl_metadata_val!(Decimal, Decimal, METADATA_VALUE_DECIMAL_TYPE_ID);
impl_metadata_val!(
    GlobalAddress,
    GlobalAddress,
    METADATA_VALUE_GLOBAL_ADDRESS_TYPE_ID
);
impl_metadata_val!(PublicKey, PublicKey, METADATA_VALUE_PUBLIC_KEY_TYPE_ID);
impl_metadata_val!(
    NonFungibleGlobalId,
    NonFungibleGlobalId,
    METADATA_VALUE_PUBLIC_KEY_TYPE_ID
);
impl_metadata_val!(
    NonFungibleLocalId,
    NonFungibleLocalId,
    METADATA_VALUE_NON_FUNGIBLE_LOCAL_ID_TYPE_ID
);
impl_metadata_val!(Instant, Instant, METADATA_VALUE_INSTANT_TYPE_ID);
impl_metadata_val!(Url, Url, METADATA_VALUE_URL_TYPE_ID);

impl_metadata_val!(
    Vec<String>,
    StringArray,
    METADATA_VALUE_STRING_ARRAY_TYPE_ID
);
impl_metadata_val!(Vec<bool>, BoolArray, METADATA_VALUE_BOOLEAN_ARRAY_TYPE_ID);
impl_metadata_val!(Vec<u8>, U8Array, METADATA_VALUE_U8_ARRAY_TYPE_ID);
impl_metadata_val!(Vec<u32>, U32Array, METADATA_VALUE_U32_ARRAY_TYPE_ID);
impl_metadata_val!(Vec<u64>, U64Array, METADATA_VALUE_U64_ARRAY_TYPE_ID);
impl_metadata_val!(Vec<i32>, I32Array, METADATA_VALUE_I32_ARRAY_TYPE_ID);
impl_metadata_val!(Vec<i64>, I64Array, METADATA_VALUE_I64_ARRAY_TYPE_ID);
impl_metadata_val!(
    Vec<Decimal>,
    DecimalArray,
    METADATA_VALUE_DECIMAL_ARRAY_TYPE_ID
);
impl_metadata_val!(
    Vec<GlobalAddress>,
    GlobalAddressArray,
    METADATA_VALUE_GLOBAL_ADDRESS_ARRAY_TYPE_ID
);
impl_metadata_val!(
    Vec<PublicKey>,
    PublicKeyArray,
    METADATA_VALUE_PUBLIC_KEY_ARRAY_TYPE_ID
);
impl_metadata_val!(
    Vec<NonFungibleGlobalId>,
    NonFungibleGlobalIdArray,
    METADATA_VALUE_PUBLIC_KEY_ARRAY_TYPE_ID
);
impl_metadata_val!(
    Vec<NonFungibleLocalId>,
    NonFungibleLocalIdArray,
    METADATA_VALUE_NON_FUNGIBLE_LOCAL_ID_ARRAY_TYPE_ID
);
impl_metadata_val!(
    Vec<Instant>,
    InstantArray,
    METADATA_VALUE_INSTANT_ARRAY_TYPE_ID
);
impl_metadata_val!(Vec<Url>, UrlArray, METADATA_VALUE_URL_ARRAY_TYPE_ID);

#[derive(Debug, Clone, Eq, PartialEq, ScryptoSbor)]
pub enum MetadataError {
    ExpectedValueButFoundList,

    ExpectedListButFoundValue,

    UnexpectedValue {
        expected_type_id: u8,
        actual: MetadataValue,
    },

    EmptyEntry,
}

pub const METADATA_CREATE_IDENT: &str = "create";

#[derive(Debug, Clone, Eq, PartialEq, ScryptoSbor, ManifestSbor)]
pub struct MetadataCreateInput {}

pub type MetadataCreateOutput = Own;

pub const METADATA_CREATE_WITH_DATA_IDENT: &str = "create_with_data";

#[derive(Debug, Clone, Eq, PartialEq, ScryptoSbor, ManifestSbor)]
pub struct MetadataCreateWithDataInput {
    pub data: BTreeMap<String, String>,
}

pub type MetadataCreateWithDataOutput = Own;

pub const METADATA_SET_IDENT: &str = "set";

#[derive(Debug, Clone, Eq, PartialEq, ScryptoSbor, ManifestSbor)]
pub struct MetadataSetInput {
    pub key: String,
    pub value: MetadataValue,
}

pub type MetadataSetOutput = ();

pub const METADATA_GET_IDENT: &str = "get";

#[derive(Debug, Clone, Eq, PartialEq, ScryptoSbor, ManifestSbor)]
pub struct MetadataGetInput {
    pub key: String,
}

pub type MetadataGetOutput = Option<MetadataValue>;

pub const METADATA_REMOVE_IDENT: &str = "remove";

#[derive(Debug, Clone, Eq, PartialEq, ScryptoSbor, ManifestSbor)]
pub struct MetadataRemoveInput {
    pub key: String,
}

pub type MetadataRemoveOutput = bool;
