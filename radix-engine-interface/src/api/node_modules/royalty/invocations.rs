use sbor::rust::collections::BTreeMap;
use crate::api::types::*;
use crate::blueprints::resource::Bucket;
use crate::*;
use sbor::rust::fmt::Debug;
use scrypto_abi::BlueprintAbi;

pub struct RoyaltyAbi;

impl RoyaltyAbi {
    pub fn blueprint_abis() -> BTreeMap<String, BlueprintAbi> {
        BTreeMap::new()
    }
}

pub const COMPONENT_ROYALTY_BLUEPRINT: &str = "ComponentRoyalty";

pub const COMPONENT_ROYALTY_SET_ROYALTY_CONFIG_IDENT: &str = "set_royalty_config";


#[derive(Debug, Clone, Eq, PartialEq, ScryptoCategorize, ScryptoEncode, ScryptoDecode)]
pub struct ComponentSetRoyaltyConfigInput {
    pub royalty_config: RoyaltyConfig,
}

#[derive(Debug, Clone, Eq, PartialEq, ScryptoCategorize, ScryptoEncode, ScryptoDecode)]
pub struct ComponentClaimRoyaltyInvocation {
    /// TODO: change to component id, after `borrow_component` returns component id
    pub receiver: RENodeId,
}

impl Invocation for ComponentClaimRoyaltyInvocation {
    type Output = Bucket;

    fn fn_identifier(&self) -> FnIdentifier {
        FnIdentifier::Native(NativeFn::ComponentRoyalty(ComponentRoyaltyFn::ClaimRoyalty))
    }
}

impl SerializableInvocation for ComponentClaimRoyaltyInvocation {
    type ScryptoOutput = Bucket;

    fn native_fn() -> NativeFn {
        NativeFn::ComponentRoyalty(ComponentRoyaltyFn::ClaimRoyalty)
    }
}

impl Into<CallTableInvocation> for ComponentClaimRoyaltyInvocation {
    fn into(self) -> CallTableInvocation {
        NativeInvocation::ComponentRoyalty(ComponentRoyaltyInvocation::ClaimRoyalty(self)).into()
    }
}
