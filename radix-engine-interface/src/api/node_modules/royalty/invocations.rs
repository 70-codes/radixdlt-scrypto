use crate::api::types::*;
use crate::*;
use sbor::rust::collections::BTreeMap;
use sbor::rust::fmt::Debug;
use scrypto_schema::PackageSchema;

pub const COMPONENT_ROYALTY_BLUEPRINT: &str = "ComponentRoyalty";

pub const COMPONENT_ROYALTY_SET_ROYALTY_CONFIG_IDENT: &str = "set_royalty_config";

#[derive(
    Debug, Clone, Eq, PartialEq, ScryptoSbor, ManifestCategorize, ManifestEncode, ManifestDecode,
)]
pub struct ComponentSetRoyaltyConfigInput {
    pub royalty_config: RoyaltyConfig,
}

pub const COMPONENT_ROYALTY_CLAIM_ROYALTY_IDENT: &str = "claim_royalty";

#[derive(
    Debug, Clone, Eq, PartialEq, ScryptoSbor, ManifestCategorize, ManifestEncode, ManifestDecode,
)]
pub struct ComponentClaimRoyaltyInput {}

pub const PACKAGE_ROYALTY_BLUEPRINT: &str = "PackageRoyalty";

pub const PACKAGE_ROYALTY_SET_ROYALTY_CONFIG_IDENT: &str = "PackageRoyalty_set_royalty_config";

#[derive(
    Debug, Clone, Eq, PartialEq, ScryptoSbor, ManifestCategorize, ManifestEncode, ManifestDecode,
)]
pub struct PackageSetRoyaltyConfigInput {
    pub royalty_config: BTreeMap<String, RoyaltyConfig>, // TODO: optimize to allow per blueprint configuration.
}

pub const PACKAGE_ROYALTY_CLAIM_ROYALTY_IDENT: &str = "PackageRoyalty_claim_royalty";

#[derive(
    Debug, Clone, Eq, PartialEq, ScryptoSbor, ManifestCategorize, ManifestEncode, ManifestDecode,
)]
pub struct PackageClaimRoyaltyInput {}
